module @module {
  util.global private @__auto.token_embd.weight = #stream.parameter.named<"model"::"token_embd.weight"> : tensor<128256x4096xf16>
  util.global private @__auto.blk.0.attn_norm.weight = #stream.parameter.named<"model"::"blk.0.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.0.attn_q.weight = #stream.parameter.named<"model"::"blk.0.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.0.attn_k.weight = #stream.parameter.named<"model"::"blk.0.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.0.attn_v.weight = #stream.parameter.named<"model"::"blk.0.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.constant_8192_64_torch.complex64 = dense_resource<__auto.constant_8192_64_torch.complex64> : tensor<8192x64xcomplex<f32>>
  util.global private @__auto.blk.0.attn_output.weight = #stream.parameter.named<"model"::"blk.0.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.0.ffn_norm.weight = #stream.parameter.named<"model"::"blk.0.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.0.ffn_gate.weight = #stream.parameter.named<"model"::"blk.0.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.0.ffn_up.weight = #stream.parameter.named<"model"::"blk.0.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.0.ffn_down.weight = #stream.parameter.named<"model"::"blk.0.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.1.attn_norm.weight = #stream.parameter.named<"model"::"blk.1.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.1.attn_q.weight = #stream.parameter.named<"model"::"blk.1.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.1.attn_k.weight = #stream.parameter.named<"model"::"blk.1.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.1.attn_v.weight = #stream.parameter.named<"model"::"blk.1.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.1.attn_output.weight = #stream.parameter.named<"model"::"blk.1.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.1.ffn_norm.weight = #stream.parameter.named<"model"::"blk.1.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.1.ffn_gate.weight = #stream.parameter.named<"model"::"blk.1.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.1.ffn_up.weight = #stream.parameter.named<"model"::"blk.1.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.1.ffn_down.weight = #stream.parameter.named<"model"::"blk.1.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.2.attn_norm.weight = #stream.parameter.named<"model"::"blk.2.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.2.attn_q.weight = #stream.parameter.named<"model"::"blk.2.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.2.attn_k.weight = #stream.parameter.named<"model"::"blk.2.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.2.attn_v.weight = #stream.parameter.named<"model"::"blk.2.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.2.attn_output.weight = #stream.parameter.named<"model"::"blk.2.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.2.ffn_norm.weight = #stream.parameter.named<"model"::"blk.2.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.2.ffn_gate.weight = #stream.parameter.named<"model"::"blk.2.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.2.ffn_up.weight = #stream.parameter.named<"model"::"blk.2.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.2.ffn_down.weight = #stream.parameter.named<"model"::"blk.2.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.3.attn_norm.weight = #stream.parameter.named<"model"::"blk.3.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.3.attn_q.weight = #stream.parameter.named<"model"::"blk.3.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.3.attn_k.weight = #stream.parameter.named<"model"::"blk.3.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.3.attn_v.weight = #stream.parameter.named<"model"::"blk.3.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.3.attn_output.weight = #stream.parameter.named<"model"::"blk.3.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.3.ffn_norm.weight = #stream.parameter.named<"model"::"blk.3.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.3.ffn_gate.weight = #stream.parameter.named<"model"::"blk.3.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.3.ffn_up.weight = #stream.parameter.named<"model"::"blk.3.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.3.ffn_down.weight = #stream.parameter.named<"model"::"blk.3.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.4.attn_norm.weight = #stream.parameter.named<"model"::"blk.4.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.4.attn_q.weight = #stream.parameter.named<"model"::"blk.4.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.4.attn_k.weight = #stream.parameter.named<"model"::"blk.4.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.4.attn_v.weight = #stream.parameter.named<"model"::"blk.4.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.4.attn_output.weight = #stream.parameter.named<"model"::"blk.4.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.4.ffn_norm.weight = #stream.parameter.named<"model"::"blk.4.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.4.ffn_gate.weight = #stream.parameter.named<"model"::"blk.4.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.4.ffn_up.weight = #stream.parameter.named<"model"::"blk.4.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.4.ffn_down.weight = #stream.parameter.named<"model"::"blk.4.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.5.attn_norm.weight = #stream.parameter.named<"model"::"blk.5.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.5.attn_q.weight = #stream.parameter.named<"model"::"blk.5.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.5.attn_k.weight = #stream.parameter.named<"model"::"blk.5.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.5.attn_v.weight = #stream.parameter.named<"model"::"blk.5.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.5.attn_output.weight = #stream.parameter.named<"model"::"blk.5.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.5.ffn_norm.weight = #stream.parameter.named<"model"::"blk.5.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.5.ffn_gate.weight = #stream.parameter.named<"model"::"blk.5.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.5.ffn_up.weight = #stream.parameter.named<"model"::"blk.5.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.5.ffn_down.weight = #stream.parameter.named<"model"::"blk.5.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.6.attn_norm.weight = #stream.parameter.named<"model"::"blk.6.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.6.attn_q.weight = #stream.parameter.named<"model"::"blk.6.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.6.attn_k.weight = #stream.parameter.named<"model"::"blk.6.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.6.attn_v.weight = #stream.parameter.named<"model"::"blk.6.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.6.attn_output.weight = #stream.parameter.named<"model"::"blk.6.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.6.ffn_norm.weight = #stream.parameter.named<"model"::"blk.6.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.6.ffn_gate.weight = #stream.parameter.named<"model"::"blk.6.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.6.ffn_up.weight = #stream.parameter.named<"model"::"blk.6.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.6.ffn_down.weight = #stream.parameter.named<"model"::"blk.6.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.7.attn_norm.weight = #stream.parameter.named<"model"::"blk.7.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.7.attn_q.weight = #stream.parameter.named<"model"::"blk.7.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.7.attn_k.weight = #stream.parameter.named<"model"::"blk.7.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.7.attn_v.weight = #stream.parameter.named<"model"::"blk.7.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.7.attn_output.weight = #stream.parameter.named<"model"::"blk.7.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.7.ffn_norm.weight = #stream.parameter.named<"model"::"blk.7.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.7.ffn_gate.weight = #stream.parameter.named<"model"::"blk.7.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.7.ffn_up.weight = #stream.parameter.named<"model"::"blk.7.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.7.ffn_down.weight = #stream.parameter.named<"model"::"blk.7.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.8.attn_norm.weight = #stream.parameter.named<"model"::"blk.8.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.8.attn_q.weight = #stream.parameter.named<"model"::"blk.8.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.8.attn_k.weight = #stream.parameter.named<"model"::"blk.8.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.8.attn_v.weight = #stream.parameter.named<"model"::"blk.8.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.8.attn_output.weight = #stream.parameter.named<"model"::"blk.8.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.8.ffn_norm.weight = #stream.parameter.named<"model"::"blk.8.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.8.ffn_gate.weight = #stream.parameter.named<"model"::"blk.8.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.8.ffn_up.weight = #stream.parameter.named<"model"::"blk.8.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.8.ffn_down.weight = #stream.parameter.named<"model"::"blk.8.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.9.attn_norm.weight = #stream.parameter.named<"model"::"blk.9.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.9.attn_q.weight = #stream.parameter.named<"model"::"blk.9.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.9.attn_k.weight = #stream.parameter.named<"model"::"blk.9.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.9.attn_v.weight = #stream.parameter.named<"model"::"blk.9.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.9.attn_output.weight = #stream.parameter.named<"model"::"blk.9.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.9.ffn_norm.weight = #stream.parameter.named<"model"::"blk.9.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.9.ffn_gate.weight = #stream.parameter.named<"model"::"blk.9.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.9.ffn_up.weight = #stream.parameter.named<"model"::"blk.9.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.9.ffn_down.weight = #stream.parameter.named<"model"::"blk.9.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.10.attn_norm.weight = #stream.parameter.named<"model"::"blk.10.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.10.attn_q.weight = #stream.parameter.named<"model"::"blk.10.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.10.attn_k.weight = #stream.parameter.named<"model"::"blk.10.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.10.attn_v.weight = #stream.parameter.named<"model"::"blk.10.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.10.attn_output.weight = #stream.parameter.named<"model"::"blk.10.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.10.ffn_norm.weight = #stream.parameter.named<"model"::"blk.10.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.10.ffn_gate.weight = #stream.parameter.named<"model"::"blk.10.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.10.ffn_up.weight = #stream.parameter.named<"model"::"blk.10.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.10.ffn_down.weight = #stream.parameter.named<"model"::"blk.10.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.11.attn_norm.weight = #stream.parameter.named<"model"::"blk.11.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.11.attn_q.weight = #stream.parameter.named<"model"::"blk.11.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.11.attn_k.weight = #stream.parameter.named<"model"::"blk.11.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.11.attn_v.weight = #stream.parameter.named<"model"::"blk.11.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.11.attn_output.weight = #stream.parameter.named<"model"::"blk.11.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.11.ffn_norm.weight = #stream.parameter.named<"model"::"blk.11.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.11.ffn_gate.weight = #stream.parameter.named<"model"::"blk.11.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.11.ffn_up.weight = #stream.parameter.named<"model"::"blk.11.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.11.ffn_down.weight = #stream.parameter.named<"model"::"blk.11.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.12.attn_norm.weight = #stream.parameter.named<"model"::"blk.12.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.12.attn_q.weight = #stream.parameter.named<"model"::"blk.12.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.12.attn_k.weight = #stream.parameter.named<"model"::"blk.12.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.12.attn_v.weight = #stream.parameter.named<"model"::"blk.12.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.12.attn_output.weight = #stream.parameter.named<"model"::"blk.12.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.12.ffn_norm.weight = #stream.parameter.named<"model"::"blk.12.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.12.ffn_gate.weight = #stream.parameter.named<"model"::"blk.12.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.12.ffn_up.weight = #stream.parameter.named<"model"::"blk.12.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.12.ffn_down.weight = #stream.parameter.named<"model"::"blk.12.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.13.attn_norm.weight = #stream.parameter.named<"model"::"blk.13.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.13.attn_q.weight = #stream.parameter.named<"model"::"blk.13.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.13.attn_k.weight = #stream.parameter.named<"model"::"blk.13.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.13.attn_v.weight = #stream.parameter.named<"model"::"blk.13.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.13.attn_output.weight = #stream.parameter.named<"model"::"blk.13.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.13.ffn_norm.weight = #stream.parameter.named<"model"::"blk.13.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.13.ffn_gate.weight = #stream.parameter.named<"model"::"blk.13.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.13.ffn_up.weight = #stream.parameter.named<"model"::"blk.13.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.13.ffn_down.weight = #stream.parameter.named<"model"::"blk.13.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.14.attn_norm.weight = #stream.parameter.named<"model"::"blk.14.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.14.attn_q.weight = #stream.parameter.named<"model"::"blk.14.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.14.attn_k.weight = #stream.parameter.named<"model"::"blk.14.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.14.attn_v.weight = #stream.parameter.named<"model"::"blk.14.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.14.attn_output.weight = #stream.parameter.named<"model"::"blk.14.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.14.ffn_norm.weight = #stream.parameter.named<"model"::"blk.14.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.14.ffn_gate.weight = #stream.parameter.named<"model"::"blk.14.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.14.ffn_up.weight = #stream.parameter.named<"model"::"blk.14.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.14.ffn_down.weight = #stream.parameter.named<"model"::"blk.14.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.15.attn_norm.weight = #stream.parameter.named<"model"::"blk.15.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.15.attn_q.weight = #stream.parameter.named<"model"::"blk.15.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.15.attn_k.weight = #stream.parameter.named<"model"::"blk.15.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.15.attn_v.weight = #stream.parameter.named<"model"::"blk.15.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.15.attn_output.weight = #stream.parameter.named<"model"::"blk.15.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.15.ffn_norm.weight = #stream.parameter.named<"model"::"blk.15.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.15.ffn_gate.weight = #stream.parameter.named<"model"::"blk.15.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.15.ffn_up.weight = #stream.parameter.named<"model"::"blk.15.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.15.ffn_down.weight = #stream.parameter.named<"model"::"blk.15.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.16.attn_norm.weight = #stream.parameter.named<"model"::"blk.16.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.16.attn_q.weight = #stream.parameter.named<"model"::"blk.16.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.16.attn_k.weight = #stream.parameter.named<"model"::"blk.16.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.16.attn_v.weight = #stream.parameter.named<"model"::"blk.16.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.16.attn_output.weight = #stream.parameter.named<"model"::"blk.16.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.16.ffn_norm.weight = #stream.parameter.named<"model"::"blk.16.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.16.ffn_gate.weight = #stream.parameter.named<"model"::"blk.16.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.16.ffn_up.weight = #stream.parameter.named<"model"::"blk.16.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.16.ffn_down.weight = #stream.parameter.named<"model"::"blk.16.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.17.attn_norm.weight = #stream.parameter.named<"model"::"blk.17.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.17.attn_q.weight = #stream.parameter.named<"model"::"blk.17.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.17.attn_k.weight = #stream.parameter.named<"model"::"blk.17.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.17.attn_v.weight = #stream.parameter.named<"model"::"blk.17.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.17.attn_output.weight = #stream.parameter.named<"model"::"blk.17.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.17.ffn_norm.weight = #stream.parameter.named<"model"::"blk.17.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.17.ffn_gate.weight = #stream.parameter.named<"model"::"blk.17.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.17.ffn_up.weight = #stream.parameter.named<"model"::"blk.17.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.17.ffn_down.weight = #stream.parameter.named<"model"::"blk.17.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.18.attn_norm.weight = #stream.parameter.named<"model"::"blk.18.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.18.attn_q.weight = #stream.parameter.named<"model"::"blk.18.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.18.attn_k.weight = #stream.parameter.named<"model"::"blk.18.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.18.attn_v.weight = #stream.parameter.named<"model"::"blk.18.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.18.attn_output.weight = #stream.parameter.named<"model"::"blk.18.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.18.ffn_norm.weight = #stream.parameter.named<"model"::"blk.18.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.18.ffn_gate.weight = #stream.parameter.named<"model"::"blk.18.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.18.ffn_up.weight = #stream.parameter.named<"model"::"blk.18.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.18.ffn_down.weight = #stream.parameter.named<"model"::"blk.18.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.19.attn_norm.weight = #stream.parameter.named<"model"::"blk.19.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.19.attn_q.weight = #stream.parameter.named<"model"::"blk.19.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.19.attn_k.weight = #stream.parameter.named<"model"::"blk.19.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.19.attn_v.weight = #stream.parameter.named<"model"::"blk.19.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.19.attn_output.weight = #stream.parameter.named<"model"::"blk.19.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.19.ffn_norm.weight = #stream.parameter.named<"model"::"blk.19.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.19.ffn_gate.weight = #stream.parameter.named<"model"::"blk.19.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.19.ffn_up.weight = #stream.parameter.named<"model"::"blk.19.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.19.ffn_down.weight = #stream.parameter.named<"model"::"blk.19.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.20.attn_norm.weight = #stream.parameter.named<"model"::"blk.20.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.20.attn_q.weight = #stream.parameter.named<"model"::"blk.20.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.20.attn_k.weight = #stream.parameter.named<"model"::"blk.20.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.20.attn_v.weight = #stream.parameter.named<"model"::"blk.20.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.20.attn_output.weight = #stream.parameter.named<"model"::"blk.20.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.20.ffn_norm.weight = #stream.parameter.named<"model"::"blk.20.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.20.ffn_gate.weight = #stream.parameter.named<"model"::"blk.20.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.20.ffn_up.weight = #stream.parameter.named<"model"::"blk.20.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.20.ffn_down.weight = #stream.parameter.named<"model"::"blk.20.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.21.attn_norm.weight = #stream.parameter.named<"model"::"blk.21.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.21.attn_q.weight = #stream.parameter.named<"model"::"blk.21.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.21.attn_k.weight = #stream.parameter.named<"model"::"blk.21.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.21.attn_v.weight = #stream.parameter.named<"model"::"blk.21.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.21.attn_output.weight = #stream.parameter.named<"model"::"blk.21.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.21.ffn_norm.weight = #stream.parameter.named<"model"::"blk.21.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.21.ffn_gate.weight = #stream.parameter.named<"model"::"blk.21.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.21.ffn_up.weight = #stream.parameter.named<"model"::"blk.21.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.21.ffn_down.weight = #stream.parameter.named<"model"::"blk.21.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.22.attn_norm.weight = #stream.parameter.named<"model"::"blk.22.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.22.attn_q.weight = #stream.parameter.named<"model"::"blk.22.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.22.attn_k.weight = #stream.parameter.named<"model"::"blk.22.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.22.attn_v.weight = #stream.parameter.named<"model"::"blk.22.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.22.attn_output.weight = #stream.parameter.named<"model"::"blk.22.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.22.ffn_norm.weight = #stream.parameter.named<"model"::"blk.22.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.22.ffn_gate.weight = #stream.parameter.named<"model"::"blk.22.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.22.ffn_up.weight = #stream.parameter.named<"model"::"blk.22.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.22.ffn_down.weight = #stream.parameter.named<"model"::"blk.22.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.23.attn_norm.weight = #stream.parameter.named<"model"::"blk.23.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.23.attn_q.weight = #stream.parameter.named<"model"::"blk.23.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.23.attn_k.weight = #stream.parameter.named<"model"::"blk.23.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.23.attn_v.weight = #stream.parameter.named<"model"::"blk.23.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.23.attn_output.weight = #stream.parameter.named<"model"::"blk.23.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.23.ffn_norm.weight = #stream.parameter.named<"model"::"blk.23.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.23.ffn_gate.weight = #stream.parameter.named<"model"::"blk.23.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.23.ffn_up.weight = #stream.parameter.named<"model"::"blk.23.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.23.ffn_down.weight = #stream.parameter.named<"model"::"blk.23.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.24.attn_norm.weight = #stream.parameter.named<"model"::"blk.24.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.24.attn_q.weight = #stream.parameter.named<"model"::"blk.24.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.24.attn_k.weight = #stream.parameter.named<"model"::"blk.24.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.24.attn_v.weight = #stream.parameter.named<"model"::"blk.24.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.24.attn_output.weight = #stream.parameter.named<"model"::"blk.24.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.24.ffn_norm.weight = #stream.parameter.named<"model"::"blk.24.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.24.ffn_gate.weight = #stream.parameter.named<"model"::"blk.24.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.24.ffn_up.weight = #stream.parameter.named<"model"::"blk.24.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.24.ffn_down.weight = #stream.parameter.named<"model"::"blk.24.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.25.attn_norm.weight = #stream.parameter.named<"model"::"blk.25.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.25.attn_q.weight = #stream.parameter.named<"model"::"blk.25.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.25.attn_k.weight = #stream.parameter.named<"model"::"blk.25.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.25.attn_v.weight = #stream.parameter.named<"model"::"blk.25.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.25.attn_output.weight = #stream.parameter.named<"model"::"blk.25.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.25.ffn_norm.weight = #stream.parameter.named<"model"::"blk.25.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.25.ffn_gate.weight = #stream.parameter.named<"model"::"blk.25.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.25.ffn_up.weight = #stream.parameter.named<"model"::"blk.25.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.25.ffn_down.weight = #stream.parameter.named<"model"::"blk.25.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.26.attn_norm.weight = #stream.parameter.named<"model"::"blk.26.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.26.attn_q.weight = #stream.parameter.named<"model"::"blk.26.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.26.attn_k.weight = #stream.parameter.named<"model"::"blk.26.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.26.attn_v.weight = #stream.parameter.named<"model"::"blk.26.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.26.attn_output.weight = #stream.parameter.named<"model"::"blk.26.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.26.ffn_norm.weight = #stream.parameter.named<"model"::"blk.26.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.26.ffn_gate.weight = #stream.parameter.named<"model"::"blk.26.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.26.ffn_up.weight = #stream.parameter.named<"model"::"blk.26.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.26.ffn_down.weight = #stream.parameter.named<"model"::"blk.26.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.27.attn_norm.weight = #stream.parameter.named<"model"::"blk.27.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.27.attn_q.weight = #stream.parameter.named<"model"::"blk.27.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.27.attn_k.weight = #stream.parameter.named<"model"::"blk.27.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.27.attn_v.weight = #stream.parameter.named<"model"::"blk.27.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.27.attn_output.weight = #stream.parameter.named<"model"::"blk.27.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.27.ffn_norm.weight = #stream.parameter.named<"model"::"blk.27.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.27.ffn_gate.weight = #stream.parameter.named<"model"::"blk.27.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.27.ffn_up.weight = #stream.parameter.named<"model"::"blk.27.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.27.ffn_down.weight = #stream.parameter.named<"model"::"blk.27.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.28.attn_norm.weight = #stream.parameter.named<"model"::"blk.28.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.28.attn_q.weight = #stream.parameter.named<"model"::"blk.28.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.28.attn_k.weight = #stream.parameter.named<"model"::"blk.28.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.28.attn_v.weight = #stream.parameter.named<"model"::"blk.28.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.28.attn_output.weight = #stream.parameter.named<"model"::"blk.28.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.28.ffn_norm.weight = #stream.parameter.named<"model"::"blk.28.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.28.ffn_gate.weight = #stream.parameter.named<"model"::"blk.28.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.28.ffn_up.weight = #stream.parameter.named<"model"::"blk.28.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.28.ffn_down.weight = #stream.parameter.named<"model"::"blk.28.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.29.attn_norm.weight = #stream.parameter.named<"model"::"blk.29.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.29.attn_q.weight = #stream.parameter.named<"model"::"blk.29.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.29.attn_k.weight = #stream.parameter.named<"model"::"blk.29.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.29.attn_v.weight = #stream.parameter.named<"model"::"blk.29.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.29.attn_output.weight = #stream.parameter.named<"model"::"blk.29.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.29.ffn_norm.weight = #stream.parameter.named<"model"::"blk.29.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.29.ffn_gate.weight = #stream.parameter.named<"model"::"blk.29.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.29.ffn_up.weight = #stream.parameter.named<"model"::"blk.29.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.29.ffn_down.weight = #stream.parameter.named<"model"::"blk.29.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.30.attn_norm.weight = #stream.parameter.named<"model"::"blk.30.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.30.attn_q.weight = #stream.parameter.named<"model"::"blk.30.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.30.attn_k.weight = #stream.parameter.named<"model"::"blk.30.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.30.attn_v.weight = #stream.parameter.named<"model"::"blk.30.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.30.attn_output.weight = #stream.parameter.named<"model"::"blk.30.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.30.ffn_norm.weight = #stream.parameter.named<"model"::"blk.30.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.30.ffn_gate.weight = #stream.parameter.named<"model"::"blk.30.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.30.ffn_up.weight = #stream.parameter.named<"model"::"blk.30.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.30.ffn_down.weight = #stream.parameter.named<"model"::"blk.30.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.blk.31.attn_norm.weight = #stream.parameter.named<"model"::"blk.31.attn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.31.attn_q.weight = #stream.parameter.named<"model"::"blk.31.attn_q.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.31.attn_k.weight = #stream.parameter.named<"model"::"blk.31.attn_k.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.31.attn_v.weight = #stream.parameter.named<"model"::"blk.31.attn_v.weight"> : tensor<1024x4096xf16>
  util.global private @__auto.blk.31.attn_output.weight = #stream.parameter.named<"model"::"blk.31.attn_output.weight"> : tensor<4096x4096xf16>
  util.global private @__auto.blk.31.ffn_norm.weight = #stream.parameter.named<"model"::"blk.31.ffn_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.blk.31.ffn_gate.weight = #stream.parameter.named<"model"::"blk.31.ffn_gate.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.31.ffn_up.weight = #stream.parameter.named<"model"::"blk.31.ffn_up.weight"> : tensor<14336x4096xf16>
  util.global private @__auto.blk.31.ffn_down.weight = #stream.parameter.named<"model"::"blk.31.ffn_down.weight"> : tensor<4096x14336xf16>
  util.global private @__auto.output_norm.weight = #stream.parameter.named<"model"::"output_norm.weight"> : tensor<4096xf32>
  util.global private @__auto.output.weight = #stream.parameter.named<"model"::"output.weight"> : tensor<128256x4096xf16>
  util.global private @__auto.constant_1_1_8192_8192_torch.uint8 = dense_resource<__auto.constant_1_1_8192_8192_torch.uint8> : tensor<1x1x8192x8192xi8>
  util.func public @prefill_bs4$async(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view, %arg3: !hal.buffer_view, %arg4: !hal.fence, %arg5: !hal.fence) -> !hal.buffer_view attributes {inlining_policy = #util.inline.never, iree.abi.model = "coarse-fences", iree.abi.stub} {
    %c1_i64 = arith.constant 1 : i64
    %c0_i64 = arith.constant 0 : i64
    %cst = arith.constant dense<0xFF800000> : tensor<f32>
    %cst_0 = arith.constant dense<0> : tensor<i64>
    %c62_i64 = arith.constant 62 : i64
    %c60_i64 = arith.constant 60 : i64
    %c58_i64 = arith.constant 58 : i64
    %c56_i64 = arith.constant 56 : i64
    %c54_i64 = arith.constant 54 : i64
    %c52_i64 = arith.constant 52 : i64
    %c50_i64 = arith.constant 50 : i64
    %c48_i64 = arith.constant 48 : i64
    %c46_i64 = arith.constant 46 : i64
    %c44_i64 = arith.constant 44 : i64
    %c42_i64 = arith.constant 42 : i64
    %c40_i64 = arith.constant 40 : i64
    %c38_i64 = arith.constant 38 : i64
    %c36_i64 = arith.constant 36 : i64
    %c34_i64 = arith.constant 34 : i64
    %c30_i64 = arith.constant 30 : i64
    %c28_i64 = arith.constant 28 : i64
    %c26_i64 = arith.constant 26 : i64
    %c24_i64 = arith.constant 24 : i64
    %c22_i64 = arith.constant 22 : i64
    %c20_i64 = arith.constant 20 : i64
    %c18_i64 = arith.constant 18 : i64
    %c14_i64 = arith.constant 14 : i64
    %c12_i64 = arith.constant 12 : i64
    %c10_i64 = arith.constant 10 : i64
    %c64_i64 = arith.constant 64 : i64
    %c16_i64 = arith.constant 16 : i64
    %c8_i64 = arith.constant 8 : i64
    %c128_i64 = arith.constant 128 : i64
    %c32_i64 = arith.constant 32 : i64
    %c4_i64 = arith.constant 4 : i64
    %c6_i64 = arith.constant 6 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0 = arith.constant 0 : index
    %c0_i8 = arith.constant 0 : i8
    %c1 = arith.constant 1 : index
    %c-1 = arith.constant -1 : index
    %c8192 = arith.constant 8192 : index
    %c128256 = arith.constant 128256 : index
    %cst_1 = arith.constant 0.000000e+00 : f32
    %c4 = arith.constant 4 : index
    %c64 = arith.constant 64 : index
    %c16 = arith.constant 16 : index
    %cst_2 = arith.constant 0.000000e+00 : f16
    %cst_3 = arith.constant 0xFF800000 : f32
    %cst_4 = arith.constant 1.000000e+00 : f16
    %cst_5 = arith.constant 11.3137083 : f32
    %cst_6 = arith.constant 2.000000e+00 : f32
    %cst_7 = arith.constant 4.096000e+03 : f32
    %cst_8 = arith.constant 9.99999974E-6 : f32
    %c16384_i64 = arith.constant 16384 : i64
    %c4096_i64 = arith.constant 4096 : i64
    %c256_i64 = arith.constant 256 : i64
    %0 = hal.buffer_view.dim<%arg0 : !hal.buffer_view>[1] : index
    %1 = hal.tensor.import wait(%arg4) => %arg0 : !hal.buffer_view -> tensor<4x?xi64>{%0}
    %2 = hal.tensor.import wait(%arg4) => %arg1 : !hal.buffer_view -> tensor<4xi64>
    %3 = hal.buffer_view.dim<%arg2 : !hal.buffer_view>[1] : index
    %4 = hal.tensor.import wait(%arg4) => %arg2 : !hal.buffer_view -> tensor<4x?xi64>{%3}
    %__auto.token_embd.weight = util.global.load @__auto.token_embd.weight : tensor<128256x4096xf16>
    %__auto.blk.0.attn_norm.weight = util.global.load @__auto.blk.0.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.0.attn_q.weight = util.global.load @__auto.blk.0.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.0.attn_k.weight = util.global.load @__auto.blk.0.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.0.attn_v.weight = util.global.load @__auto.blk.0.attn_v.weight : tensor<1024x4096xf16>
    %__auto.constant_8192_64_torch.complex64 = util.global.load @__auto.constant_8192_64_torch.complex64 : tensor<8192x64xcomplex<f32>>
    %__auto.blk.0.attn_output.weight = util.global.load @__auto.blk.0.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.0.ffn_norm.weight = util.global.load @__auto.blk.0.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.0.ffn_gate.weight = util.global.load @__auto.blk.0.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.0.ffn_up.weight = util.global.load @__auto.blk.0.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.0.ffn_down.weight = util.global.load @__auto.blk.0.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.1.attn_norm.weight = util.global.load @__auto.blk.1.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.1.attn_q.weight = util.global.load @__auto.blk.1.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.1.attn_k.weight = util.global.load @__auto.blk.1.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.1.attn_v.weight = util.global.load @__auto.blk.1.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.1.attn_output.weight = util.global.load @__auto.blk.1.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.1.ffn_norm.weight = util.global.load @__auto.blk.1.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.1.ffn_gate.weight = util.global.load @__auto.blk.1.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.1.ffn_up.weight = util.global.load @__auto.blk.1.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.1.ffn_down.weight = util.global.load @__auto.blk.1.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.2.attn_norm.weight = util.global.load @__auto.blk.2.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.2.attn_q.weight = util.global.load @__auto.blk.2.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.2.attn_k.weight = util.global.load @__auto.blk.2.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.2.attn_v.weight = util.global.load @__auto.blk.2.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.2.attn_output.weight = util.global.load @__auto.blk.2.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.2.ffn_norm.weight = util.global.load @__auto.blk.2.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.2.ffn_gate.weight = util.global.load @__auto.blk.2.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.2.ffn_up.weight = util.global.load @__auto.blk.2.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.2.ffn_down.weight = util.global.load @__auto.blk.2.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.3.attn_norm.weight = util.global.load @__auto.blk.3.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.3.attn_q.weight = util.global.load @__auto.blk.3.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.3.attn_k.weight = util.global.load @__auto.blk.3.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.3.attn_v.weight = util.global.load @__auto.blk.3.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.3.attn_output.weight = util.global.load @__auto.blk.3.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.3.ffn_norm.weight = util.global.load @__auto.blk.3.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.3.ffn_gate.weight = util.global.load @__auto.blk.3.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.3.ffn_up.weight = util.global.load @__auto.blk.3.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.3.ffn_down.weight = util.global.load @__auto.blk.3.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.4.attn_norm.weight = util.global.load @__auto.blk.4.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.4.attn_q.weight = util.global.load @__auto.blk.4.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.4.attn_k.weight = util.global.load @__auto.blk.4.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.4.attn_v.weight = util.global.load @__auto.blk.4.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.4.attn_output.weight = util.global.load @__auto.blk.4.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.4.ffn_norm.weight = util.global.load @__auto.blk.4.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.4.ffn_gate.weight = util.global.load @__auto.blk.4.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.4.ffn_up.weight = util.global.load @__auto.blk.4.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.4.ffn_down.weight = util.global.load @__auto.blk.4.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.5.attn_norm.weight = util.global.load @__auto.blk.5.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.5.attn_q.weight = util.global.load @__auto.blk.5.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.5.attn_k.weight = util.global.load @__auto.blk.5.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.5.attn_v.weight = util.global.load @__auto.blk.5.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.5.attn_output.weight = util.global.load @__auto.blk.5.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.5.ffn_norm.weight = util.global.load @__auto.blk.5.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.5.ffn_gate.weight = util.global.load @__auto.blk.5.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.5.ffn_up.weight = util.global.load @__auto.blk.5.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.5.ffn_down.weight = util.global.load @__auto.blk.5.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.6.attn_norm.weight = util.global.load @__auto.blk.6.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.6.attn_q.weight = util.global.load @__auto.blk.6.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.6.attn_k.weight = util.global.load @__auto.blk.6.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.6.attn_v.weight = util.global.load @__auto.blk.6.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.6.attn_output.weight = util.global.load @__auto.blk.6.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.6.ffn_norm.weight = util.global.load @__auto.blk.6.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.6.ffn_gate.weight = util.global.load @__auto.blk.6.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.6.ffn_up.weight = util.global.load @__auto.blk.6.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.6.ffn_down.weight = util.global.load @__auto.blk.6.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.7.attn_norm.weight = util.global.load @__auto.blk.7.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.7.attn_q.weight = util.global.load @__auto.blk.7.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.7.attn_k.weight = util.global.load @__auto.blk.7.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.7.attn_v.weight = util.global.load @__auto.blk.7.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.7.attn_output.weight = util.global.load @__auto.blk.7.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.7.ffn_norm.weight = util.global.load @__auto.blk.7.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.7.ffn_gate.weight = util.global.load @__auto.blk.7.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.7.ffn_up.weight = util.global.load @__auto.blk.7.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.7.ffn_down.weight = util.global.load @__auto.blk.7.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.8.attn_norm.weight = util.global.load @__auto.blk.8.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.8.attn_q.weight = util.global.load @__auto.blk.8.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.8.attn_k.weight = util.global.load @__auto.blk.8.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.8.attn_v.weight = util.global.load @__auto.blk.8.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.8.attn_output.weight = util.global.load @__auto.blk.8.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.8.ffn_norm.weight = util.global.load @__auto.blk.8.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.8.ffn_gate.weight = util.global.load @__auto.blk.8.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.8.ffn_up.weight = util.global.load @__auto.blk.8.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.8.ffn_down.weight = util.global.load @__auto.blk.8.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.9.attn_norm.weight = util.global.load @__auto.blk.9.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.9.attn_q.weight = util.global.load @__auto.blk.9.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.9.attn_k.weight = util.global.load @__auto.blk.9.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.9.attn_v.weight = util.global.load @__auto.blk.9.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.9.attn_output.weight = util.global.load @__auto.blk.9.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.9.ffn_norm.weight = util.global.load @__auto.blk.9.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.9.ffn_gate.weight = util.global.load @__auto.blk.9.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.9.ffn_up.weight = util.global.load @__auto.blk.9.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.9.ffn_down.weight = util.global.load @__auto.blk.9.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.10.attn_norm.weight = util.global.load @__auto.blk.10.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.10.attn_q.weight = util.global.load @__auto.blk.10.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.10.attn_k.weight = util.global.load @__auto.blk.10.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.10.attn_v.weight = util.global.load @__auto.blk.10.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.10.attn_output.weight = util.global.load @__auto.blk.10.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.10.ffn_norm.weight = util.global.load @__auto.blk.10.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.10.ffn_gate.weight = util.global.load @__auto.blk.10.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.10.ffn_up.weight = util.global.load @__auto.blk.10.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.10.ffn_down.weight = util.global.load @__auto.blk.10.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.11.attn_norm.weight = util.global.load @__auto.blk.11.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.11.attn_q.weight = util.global.load @__auto.blk.11.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.11.attn_k.weight = util.global.load @__auto.blk.11.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.11.attn_v.weight = util.global.load @__auto.blk.11.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.11.attn_output.weight = util.global.load @__auto.blk.11.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.11.ffn_norm.weight = util.global.load @__auto.blk.11.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.11.ffn_gate.weight = util.global.load @__auto.blk.11.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.11.ffn_up.weight = util.global.load @__auto.blk.11.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.11.ffn_down.weight = util.global.load @__auto.blk.11.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.12.attn_norm.weight = util.global.load @__auto.blk.12.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.12.attn_q.weight = util.global.load @__auto.blk.12.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.12.attn_k.weight = util.global.load @__auto.blk.12.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.12.attn_v.weight = util.global.load @__auto.blk.12.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.12.attn_output.weight = util.global.load @__auto.blk.12.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.12.ffn_norm.weight = util.global.load @__auto.blk.12.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.12.ffn_gate.weight = util.global.load @__auto.blk.12.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.12.ffn_up.weight = util.global.load @__auto.blk.12.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.12.ffn_down.weight = util.global.load @__auto.blk.12.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.13.attn_norm.weight = util.global.load @__auto.blk.13.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.13.attn_q.weight = util.global.load @__auto.blk.13.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.13.attn_k.weight = util.global.load @__auto.blk.13.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.13.attn_v.weight = util.global.load @__auto.blk.13.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.13.attn_output.weight = util.global.load @__auto.blk.13.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.13.ffn_norm.weight = util.global.load @__auto.blk.13.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.13.ffn_gate.weight = util.global.load @__auto.blk.13.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.13.ffn_up.weight = util.global.load @__auto.blk.13.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.13.ffn_down.weight = util.global.load @__auto.blk.13.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.14.attn_norm.weight = util.global.load @__auto.blk.14.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.14.attn_q.weight = util.global.load @__auto.blk.14.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.14.attn_k.weight = util.global.load @__auto.blk.14.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.14.attn_v.weight = util.global.load @__auto.blk.14.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.14.attn_output.weight = util.global.load @__auto.blk.14.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.14.ffn_norm.weight = util.global.load @__auto.blk.14.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.14.ffn_gate.weight = util.global.load @__auto.blk.14.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.14.ffn_up.weight = util.global.load @__auto.blk.14.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.14.ffn_down.weight = util.global.load @__auto.blk.14.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.15.attn_norm.weight = util.global.load @__auto.blk.15.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.15.attn_q.weight = util.global.load @__auto.blk.15.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.15.attn_k.weight = util.global.load @__auto.blk.15.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.15.attn_v.weight = util.global.load @__auto.blk.15.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.15.attn_output.weight = util.global.load @__auto.blk.15.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.15.ffn_norm.weight = util.global.load @__auto.blk.15.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.15.ffn_gate.weight = util.global.load @__auto.blk.15.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.15.ffn_up.weight = util.global.load @__auto.blk.15.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.15.ffn_down.weight = util.global.load @__auto.blk.15.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.16.attn_norm.weight = util.global.load @__auto.blk.16.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.16.attn_q.weight = util.global.load @__auto.blk.16.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.16.attn_k.weight = util.global.load @__auto.blk.16.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.16.attn_v.weight = util.global.load @__auto.blk.16.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.16.attn_output.weight = util.global.load @__auto.blk.16.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.16.ffn_norm.weight = util.global.load @__auto.blk.16.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.16.ffn_gate.weight = util.global.load @__auto.blk.16.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.16.ffn_up.weight = util.global.load @__auto.blk.16.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.16.ffn_down.weight = util.global.load @__auto.blk.16.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.17.attn_norm.weight = util.global.load @__auto.blk.17.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.17.attn_q.weight = util.global.load @__auto.blk.17.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.17.attn_k.weight = util.global.load @__auto.blk.17.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.17.attn_v.weight = util.global.load @__auto.blk.17.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.17.attn_output.weight = util.global.load @__auto.blk.17.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.17.ffn_norm.weight = util.global.load @__auto.blk.17.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.17.ffn_gate.weight = util.global.load @__auto.blk.17.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.17.ffn_up.weight = util.global.load @__auto.blk.17.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.17.ffn_down.weight = util.global.load @__auto.blk.17.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.18.attn_norm.weight = util.global.load @__auto.blk.18.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.18.attn_q.weight = util.global.load @__auto.blk.18.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.18.attn_k.weight = util.global.load @__auto.blk.18.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.18.attn_v.weight = util.global.load @__auto.blk.18.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.18.attn_output.weight = util.global.load @__auto.blk.18.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.18.ffn_norm.weight = util.global.load @__auto.blk.18.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.18.ffn_gate.weight = util.global.load @__auto.blk.18.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.18.ffn_up.weight = util.global.load @__auto.blk.18.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.18.ffn_down.weight = util.global.load @__auto.blk.18.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.19.attn_norm.weight = util.global.load @__auto.blk.19.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.19.attn_q.weight = util.global.load @__auto.blk.19.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.19.attn_k.weight = util.global.load @__auto.blk.19.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.19.attn_v.weight = util.global.load @__auto.blk.19.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.19.attn_output.weight = util.global.load @__auto.blk.19.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.19.ffn_norm.weight = util.global.load @__auto.blk.19.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.19.ffn_gate.weight = util.global.load @__auto.blk.19.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.19.ffn_up.weight = util.global.load @__auto.blk.19.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.19.ffn_down.weight = util.global.load @__auto.blk.19.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.20.attn_norm.weight = util.global.load @__auto.blk.20.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.20.attn_q.weight = util.global.load @__auto.blk.20.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.20.attn_k.weight = util.global.load @__auto.blk.20.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.20.attn_v.weight = util.global.load @__auto.blk.20.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.20.attn_output.weight = util.global.load @__auto.blk.20.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.20.ffn_norm.weight = util.global.load @__auto.blk.20.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.20.ffn_gate.weight = util.global.load @__auto.blk.20.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.20.ffn_up.weight = util.global.load @__auto.blk.20.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.20.ffn_down.weight = util.global.load @__auto.blk.20.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.21.attn_norm.weight = util.global.load @__auto.blk.21.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.21.attn_q.weight = util.global.load @__auto.blk.21.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.21.attn_k.weight = util.global.load @__auto.blk.21.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.21.attn_v.weight = util.global.load @__auto.blk.21.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.21.attn_output.weight = util.global.load @__auto.blk.21.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.21.ffn_norm.weight = util.global.load @__auto.blk.21.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.21.ffn_gate.weight = util.global.load @__auto.blk.21.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.21.ffn_up.weight = util.global.load @__auto.blk.21.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.21.ffn_down.weight = util.global.load @__auto.blk.21.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.22.attn_norm.weight = util.global.load @__auto.blk.22.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.22.attn_q.weight = util.global.load @__auto.blk.22.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.22.attn_k.weight = util.global.load @__auto.blk.22.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.22.attn_v.weight = util.global.load @__auto.blk.22.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.22.attn_output.weight = util.global.load @__auto.blk.22.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.22.ffn_norm.weight = util.global.load @__auto.blk.22.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.22.ffn_gate.weight = util.global.load @__auto.blk.22.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.22.ffn_up.weight = util.global.load @__auto.blk.22.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.22.ffn_down.weight = util.global.load @__auto.blk.22.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.23.attn_norm.weight = util.global.load @__auto.blk.23.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.23.attn_q.weight = util.global.load @__auto.blk.23.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.23.attn_k.weight = util.global.load @__auto.blk.23.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.23.attn_v.weight = util.global.load @__auto.blk.23.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.23.attn_output.weight = util.global.load @__auto.blk.23.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.23.ffn_norm.weight = util.global.load @__auto.blk.23.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.23.ffn_gate.weight = util.global.load @__auto.blk.23.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.23.ffn_up.weight = util.global.load @__auto.blk.23.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.23.ffn_down.weight = util.global.load @__auto.blk.23.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.24.attn_norm.weight = util.global.load @__auto.blk.24.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.24.attn_q.weight = util.global.load @__auto.blk.24.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.24.attn_k.weight = util.global.load @__auto.blk.24.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.24.attn_v.weight = util.global.load @__auto.blk.24.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.24.attn_output.weight = util.global.load @__auto.blk.24.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.24.ffn_norm.weight = util.global.load @__auto.blk.24.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.24.ffn_gate.weight = util.global.load @__auto.blk.24.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.24.ffn_up.weight = util.global.load @__auto.blk.24.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.24.ffn_down.weight = util.global.load @__auto.blk.24.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.25.attn_norm.weight = util.global.load @__auto.blk.25.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.25.attn_q.weight = util.global.load @__auto.blk.25.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.25.attn_k.weight = util.global.load @__auto.blk.25.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.25.attn_v.weight = util.global.load @__auto.blk.25.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.25.attn_output.weight = util.global.load @__auto.blk.25.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.25.ffn_norm.weight = util.global.load @__auto.blk.25.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.25.ffn_gate.weight = util.global.load @__auto.blk.25.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.25.ffn_up.weight = util.global.load @__auto.blk.25.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.25.ffn_down.weight = util.global.load @__auto.blk.25.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.26.attn_norm.weight = util.global.load @__auto.blk.26.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.26.attn_q.weight = util.global.load @__auto.blk.26.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.26.attn_k.weight = util.global.load @__auto.blk.26.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.26.attn_v.weight = util.global.load @__auto.blk.26.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.26.attn_output.weight = util.global.load @__auto.blk.26.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.26.ffn_norm.weight = util.global.load @__auto.blk.26.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.26.ffn_gate.weight = util.global.load @__auto.blk.26.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.26.ffn_up.weight = util.global.load @__auto.blk.26.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.26.ffn_down.weight = util.global.load @__auto.blk.26.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.27.attn_norm.weight = util.global.load @__auto.blk.27.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.27.attn_q.weight = util.global.load @__auto.blk.27.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.27.attn_k.weight = util.global.load @__auto.blk.27.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.27.attn_v.weight = util.global.load @__auto.blk.27.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.27.attn_output.weight = util.global.load @__auto.blk.27.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.27.ffn_norm.weight = util.global.load @__auto.blk.27.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.27.ffn_gate.weight = util.global.load @__auto.blk.27.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.27.ffn_up.weight = util.global.load @__auto.blk.27.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.27.ffn_down.weight = util.global.load @__auto.blk.27.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.28.attn_norm.weight = util.global.load @__auto.blk.28.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.28.attn_q.weight = util.global.load @__auto.blk.28.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.28.attn_k.weight = util.global.load @__auto.blk.28.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.28.attn_v.weight = util.global.load @__auto.blk.28.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.28.attn_output.weight = util.global.load @__auto.blk.28.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.28.ffn_norm.weight = util.global.load @__auto.blk.28.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.28.ffn_gate.weight = util.global.load @__auto.blk.28.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.28.ffn_up.weight = util.global.load @__auto.blk.28.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.28.ffn_down.weight = util.global.load @__auto.blk.28.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.29.attn_norm.weight = util.global.load @__auto.blk.29.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.29.attn_q.weight = util.global.load @__auto.blk.29.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.29.attn_k.weight = util.global.load @__auto.blk.29.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.29.attn_v.weight = util.global.load @__auto.blk.29.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.29.attn_output.weight = util.global.load @__auto.blk.29.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.29.ffn_norm.weight = util.global.load @__auto.blk.29.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.29.ffn_gate.weight = util.global.load @__auto.blk.29.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.29.ffn_up.weight = util.global.load @__auto.blk.29.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.29.ffn_down.weight = util.global.load @__auto.blk.29.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.30.attn_norm.weight = util.global.load @__auto.blk.30.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.30.attn_q.weight = util.global.load @__auto.blk.30.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.30.attn_k.weight = util.global.load @__auto.blk.30.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.30.attn_v.weight = util.global.load @__auto.blk.30.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.30.attn_output.weight = util.global.load @__auto.blk.30.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.30.ffn_norm.weight = util.global.load @__auto.blk.30.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.30.ffn_gate.weight = util.global.load @__auto.blk.30.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.30.ffn_up.weight = util.global.load @__auto.blk.30.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.30.ffn_down.weight = util.global.load @__auto.blk.30.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.31.attn_norm.weight = util.global.load @__auto.blk.31.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.31.attn_q.weight = util.global.load @__auto.blk.31.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.31.attn_k.weight = util.global.load @__auto.blk.31.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.31.attn_v.weight = util.global.load @__auto.blk.31.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.31.attn_output.weight = util.global.load @__auto.blk.31.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.31.ffn_norm.weight = util.global.load @__auto.blk.31.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.31.ffn_gate.weight = util.global.load @__auto.blk.31.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.31.ffn_up.weight = util.global.load @__auto.blk.31.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.31.ffn_down.weight = util.global.load @__auto.blk.31.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.output_norm.weight = util.global.load @__auto.output_norm.weight : tensor<4096xf32>
    %__auto.output.weight = util.global.load @__auto.output.weight : tensor<128256x4096xf16>
    %5 = hal.buffer_view.dim<%arg3 : !hal.buffer_view>[0] : index
    %6 = hal.tensor.import wait(%arg4) => %arg3 : !hal.buffer_view -> tensor<?x1048576xf16>{%5}
    %dim = tensor.dim %1, %c1 : tensor<4x?xi64>
    %7 = tensor.empty(%dim) : tensor<?xi64>
    %8 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} outs(%7 : tensor<?xi64>) {
    ^bb0(%out: i64):
      %2559 = linalg.index 0 : index
      %2560 = arith.index_cast %2559 : index to i64
      linalg.yield %2560 : i64
    } -> tensor<?xi64>
    %expanded = tensor.expand_shape %2 [[0, 1]] output_shape [4, 1] : tensor<4xi64> into tensor<4x1xi64>
    %9 = tensor.empty(%dim) : tensor<4x?xi1>
    %10 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%8, %expanded : tensor<?xi64>, tensor<4x1xi64>) outs(%9 : tensor<4x?xi1>) {
    ^bb0(%in: i64, %in_1081: i64, %out: i1):
      %2559 = arith.cmpi sge, %in, %in_1081 : i64
      linalg.yield %2559 : i1
    } -> tensor<4x?xi1>
    %__auto.constant_1_1_8192_8192_torch.uint8 = util.global.load @__auto.constant_1_1_8192_8192_torch.uint8 : tensor<1x1x8192x8192xi8>
    %11 = tensor.empty() : tensor<1x1x8192x8192xi1>
    %12 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%__auto.constant_1_1_8192_8192_torch.uint8 : tensor<1x1x8192x8192xi8>) outs(%11 : tensor<1x1x8192x8192xi1>) {
    ^bb0(%in: i8, %out: i1):
      %2559 = arith.cmpi ne, %in, %c0_i8 : i8
      linalg.yield %2559 : i1
    } -> tensor<1x1x8192x8192xi1>
    %13 = arith.cmpi slt, %dim, %c0 : index
    %14 = arith.addi %dim, %c8192 : index
    %15 = arith.select %13, %14, %dim : index
    %16 = arith.cmpi slt, %15, %c0 : index
    %17 = arith.select %16, %c-1, %15 : index
    %18 = arith.cmpi sgt, %17, %c8192 : index
    %19 = arith.select %18, %c8192, %17 : index
    %20 = arith.cmpi slt, %19, %c0 : index
    %21 = arith.select %20, %c0, %19 : index
    %extracted_slice = tensor.extract_slice %12[0, 0, 0, 0] [1, 1, %21, 8192] [1, 1, 1, 1] : tensor<1x1x8192x8192xi1> to tensor<1x1x?x8192xi1>
    %extracted_slice_9 = tensor.extract_slice %extracted_slice[0, 0, 0, 0] [1, 1, %21, %21] [1, 1, 1, 1] : tensor<1x1x?x8192xi1> to tensor<1x1x?x?xi1>
    %expanded_10 = tensor.expand_shape %10 [[0], [1, 2, 3]] output_shape [4, 1, 1, %dim] : tensor<4x?xi1> into tensor<4x1x1x?xi1>
    %22 = tensor.empty(%21, %21) : tensor<4x1x?x?xi1>
    %23 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%extracted_slice_9, %expanded_10 : tensor<1x1x?x?xi1>, tensor<4x1x1x?xi1>) outs(%22 : tensor<4x1x?x?xi1>) {
    ^bb0(%in: i1, %in_1081: i1, %out: i1):
      %2559 = arith.addi %in, %in_1081 : i1
      linalg.yield %2559 : i1
    } -> tensor<4x1x?x?xi1>
    %24 = tensor.empty() : tensor<f16>
    %25 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%cst_0 : tensor<i64>) outs(%24 : tensor<f16>) {
    ^bb0(%in: i64, %out: f16):
      %2559 = arith.sitofp %in : i64 to f16
      linalg.yield %2559 : f16
    } -> tensor<f16>
    %26 = arith.index_cast %21 : index to i64
    %27 = arith.index_cast %26 : i64 to index
    %28 = tensor.empty(%27, %27) : tensor<4x1x?x?xf16>
    %29 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> ()>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%25 : tensor<f16>) outs(%28 : tensor<4x1x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x?x?xf16>
    %30 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%cst : tensor<f32>) outs(%24 : tensor<f16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<f16>
    %31 = tensor.empty(%21, %21) : tensor<4x1x?x?xf16>
    %32 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> ()>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%23, %30, %29 : tensor<4x1x?x?xi1>, tensor<f16>, tensor<4x1x?x?xf16>) outs(%31 : tensor<4x1x?x?xf16>) {
    ^bb0(%in: i1, %in_1081: f16, %in_1082: f16, %out: f16):
      %2559 = arith.select %in, %in_1081, %in_1082 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x1x?x?xf16>
    %33 = tensor.empty(%dim) : tensor<4x?x4096xf16>
    %34 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1 : tensor<4x?xi64>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: i64, %out: f16):
      %2559 = arith.index_cast %in : i64 to index
      %2560 = linalg.index 2 : index
      %2561 = arith.cmpi slt, %2559, %c128256 : index
      cf.assert %2561, "index must be smaller than dim size"
      %2562 = arith.cmpi sge, %in, %c0_i64 : i64
      cf.assert %2562, "index must be larger or equal to 0"
      %extracted = tensor.extract %__auto.token_embd.weight[%2559, %2560] : tensor<128256x4096xf16>
      linalg.yield %extracted : f16
    } -> tensor<4x?x4096xf16>
    %35 = tensor.empty(%dim) : tensor<4x?x4096xf32>
    %36 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%34 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %37 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%36 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %38 = tensor.empty(%dim) : tensor<4x?x1xf32>
    %39 = linalg.fill ins(%cst_1 : f32) outs(%38 : tensor<4x?x1xf32>) -> tensor<4x?x1xf32>
    %40 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%37 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %41 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%40 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %42 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%41 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %43 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%42 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %44 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%36, %43 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %45 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%44, %__auto.blk.0.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %46 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%45 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %47 = tensor.empty() : tensor<4096x4096xf16>
    %48 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed = tensor.collapse_shape %46 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %49 = affine.apply affine_map<()[s0] -> (s0 * 4)>()[%dim]
    %50 = tensor.empty(%49) : tensor<?x4096xf32>
    %51 = linalg.fill ins(%cst_1 : f32) outs(%50 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %52 = linalg.matmul ins(%collapsed, %48 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %53 = tensor.empty(%49) : tensor<?x4096xf16>
    %54 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%52 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %55 = tensor.empty() : tensor<4096x1024xf16>
    %56 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %57 = tensor.empty(%49) : tensor<?x1024xf32>
    %58 = linalg.fill ins(%cst_1 : f32) outs(%57 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %59 = linalg.matmul ins(%collapsed, %56 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %60 = tensor.empty(%49) : tensor<?x1024xf16>
    %61 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%59 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %62 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %63 = linalg.matmul ins(%collapsed, %62 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %64 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%63 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_11 = tensor.expand_shape %54 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_12 = tensor.expand_shape %61 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %65 = arith.index_cast %dim : index to i64
    %66 = arith.muli %65, %c256_i64 : i64
    %67 = arith.muli %65, %c16384_i64 : i64
    %68 = arith.divui %67, %66 : i64
    %from_elements = tensor.from_elements %c4_i64, %65, %c32_i64, %68, %c2_i64 : tensor<5xi64>
    %reshape = tensor.reshape %expanded_11(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %69 = arith.index_cast %65 : i64 to index
    %70 = tensor.empty(%69) : tensor<4x?x32x64xcomplex<f16>>
    %71 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %72 = arith.muli %65, %c64_i64 : i64
    %73 = arith.muli %65, %c4096_i64 : i64
    %74 = arith.divui %73, %72 : i64
    %from_elements_13 = tensor.from_elements %c4_i64, %65, %c8_i64, %74, %c2_i64 : tensor<5xi64>
    %reshape_14 = tensor.reshape %expanded_12(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %75 = tensor.empty(%69) : tensor<4x?x8x64xcomplex<f16>>
    %76 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_14[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_14[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %77 = arith.index_cast %65 : i64 to index
    %78 = arith.cmpi slt, %77, %c0 : index
    %79 = arith.addi %77, %c8192 : index
    %80 = arith.select %78, %79, %77 : index
    %81 = arith.cmpi slt, %80, %c0 : index
    %82 = arith.select %81, %c-1, %80 : index
    %83 = arith.cmpi sgt, %82, %c8192 : index
    %84 = arith.select %83, %c8192, %82 : index
    %85 = arith.cmpi slt, %84, %c0 : index
    %86 = arith.select %85, %c0, %84 : index
    %extracted_slice_15 = tensor.extract_slice %__auto.constant_8192_64_torch.complex64[0, 0] [%86, 64] [1, 1] : tensor<8192x64xcomplex<f32>> to tensor<?x64xcomplex<f32>>
    %expanded_16 = tensor.expand_shape %extracted_slice_15 [[0, 1], [2, 3]] output_shape [1, %86, 1, 64] : tensor<?x64xcomplex<f32>> into tensor<1x?x1x64xcomplex<f32>>
    %87 = tensor.empty(%69) : tensor<4x?x32x64xcomplex<f32>>
    %88 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%71, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %89 = tensor.empty(%69) : tensor<4x?x32x64x2xf32>
    %90 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%88 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_17 = tensor.collapse_shape %90 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %91 = tensor.empty(%69) : tensor<4x?x8x64xcomplex<f32>>
    %92 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%76, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %93 = tensor.empty(%69) : tensor<4x?x8x64x2xf32>
    %94 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%92 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_18 = tensor.collapse_shape %94 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %95 = tensor.empty(%69) : tensor<4x?x32x128xf16>
    %96 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_17 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %97 = tensor.empty(%69) : tensor<4x?x8x128xf16>
    %98 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_18 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %dim_19 = tensor.dim %6, %c0 : tensor<?x1048576xf16>
    %expanded_20 = tensor.expand_shape %6 [[0], [1, 2, 3, 4, 5]] output_shape [%dim_19, 32, 2, 16, 8, 128] : tensor<?x1048576xf16> into tensor<?x32x2x16x8x128xf16>
    %collapsed_21 = tensor.collapse_shape %expanded_20 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %dim_22 = tensor.dim %4, %c1 : tensor<4x?xi64>
    %99 = tensor.empty(%dim_22) : tensor<4x?xi64>
    %100 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%4 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.muli %in, %c64_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %101 = arith.divui %69, %c16 : index
    %expanded_23 = tensor.expand_shape %98 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_24 = tensor.collapse_shape %100 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_25 = tensor.collapse_shape %expanded_23 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %102 = affine.apply affine_map<()[s0] -> (s0 * 4)>()[%dim_22]
    %expanded_26 = tensor.expand_shape %collapsed_24 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %103 = affine.apply affine_map<()[s0] -> ((s0 floordiv 16) * 4)>()[%69]
    %expanded_27 = tensor.expand_shape %collapsed_25 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %104 = tensor.empty(%102) : tensor<?x1xi32>
    %105 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_26 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %106 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_27, %105 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%collapsed_21 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %107 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_28 = tensor.collapse_shape %107 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_29 = tensor.expand_shape %collapsed_28 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %108 = affine.apply affine_map<()[s0] -> (s0 floordiv 4)>()[%dim]
    %expanded_30 = tensor.expand_shape %64 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %109 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_29 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %110 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_30, %109 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%106 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_31 = tensor.expand_shape %98 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %111 = tensor.empty(%69) : tensor<4x?x8x4x128xf16>
    %112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_31 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_32 = tensor.collapse_shape %112 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_33 = tensor.expand_shape %64 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_33 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_34 = tensor.collapse_shape %113 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %114 = tensor.empty(%69) : tensor<4x32x?x128xf16>
    %115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%96 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_32 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_34 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %118 = tensor.empty(%69) : tensor<4x32x128x?xf16>
    %119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%116 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_35 = tensor.collapse_shape %115 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_36 = tensor.collapse_shape %119 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %120 = tensor.empty(%69, %69) : tensor<128x?x?xf16>
    %121 = linalg.fill ins(%cst_2 : f16) outs(%120 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %122 = linalg.batch_matmul ins(%collapsed_35, %collapsed_36 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %from_elements_37 = tensor.from_elements %c4_i64, %c32_i64, %65, %65 : tensor<4xi64>
    %reshape_38 = tensor.reshape %122(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %123 = tensor.empty(%69, %69) : tensor<4x32x?x?xf16>
    %124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_38 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%124, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %126 = tensor.empty(%69, %69) : tensor<4x32x?x?xf32>
    %127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%125 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %128 = tensor.empty(%69) : tensor<4x32x?xi64>
    %129 = linalg.fill ins(%c0_i64 : i64) outs(%128 : tensor<4x32x?xi64>) -> tensor<4x32x?xi64>
    %130 = tensor.empty(%69) : tensor<4x32x?xf32>
    %131 = linalg.fill ins(%cst_3 : f32) outs(%130 : tensor<4x32x?xf32>) -> tensor<4x32x?xf32>
    %132:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%127 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_39 = tensor.expand_shape %132#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%127, %expanded_39 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%133 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %135 = tensor.empty(%69) : tensor<4x32x?x1xf32>
    %136 = linalg.fill ins(%cst_1 : f32) outs(%135 : tensor<4x32x?x1xf32>) -> tensor<4x32x?x1xf32>
    %137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%134 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%134, %137 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%138 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %from_elements_40 = tensor.from_elements %c128_i64, %65, %65 : tensor<3xi64>
    %reshape_41 = tensor.reshape %139(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_42 = tensor.collapse_shape %117 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %140 = tensor.empty(%69) : tensor<128x?x128xf16>
    %141 = linalg.fill ins(%cst_2 : f16) outs(%140 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %142 = linalg.batch_matmul ins(%reshape_41, %collapsed_42 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_43 = tensor.expand_shape %142 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_43 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %144 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_44 = tensor.collapse_shape %143 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %145 = affine.apply affine_map<()[s0] -> (s0 * 4)>()[%69]
    %146 = tensor.empty(%145) : tensor<?x4096xf32>
    %147 = linalg.fill ins(%cst_1 : f32) outs(%146 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %148 = linalg.matmul ins(%collapsed_44, %144 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %149 = tensor.empty(%145) : tensor<?x4096xf16>
    %150 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%148 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %151 = arith.divui %145, %c4 : index
    %expanded_45 = tensor.expand_shape %150 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%34, %expanded_45 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%152 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%153 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%154 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%155 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%156 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%157 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%153, %158 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%159, %__auto.blk.0.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%160 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %162 = tensor.empty() : tensor<4096x14336xf16>
    %163 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_46 = tensor.collapse_shape %161 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %164 = tensor.empty(%49) : tensor<?x14336xf32>
    %165 = linalg.fill ins(%cst_1 : f32) outs(%164 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %166 = linalg.matmul ins(%collapsed_46, %163 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %167 = tensor.empty(%49) : tensor<?x14336xf16>
    %168 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%166 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %169 = arith.divui %49, %c4 : index
    %expanded_47 = tensor.expand_shape %168 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %170 = tensor.empty(%dim) : tensor<4x?x14336xf16>
    %171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_47 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%171, %expanded_47 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %173 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %174 = linalg.matmul ins(%collapsed_46, %173 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %175 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%174 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_48 = tensor.expand_shape %175 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%172, %expanded_48 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %177 = tensor.empty() : tensor<14336x4096xf16>
    %178 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_49 = tensor.collapse_shape %176 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %179 = linalg.matmul ins(%collapsed_49, %178 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %180 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%179 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_50 = tensor.expand_shape %180 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%152, %expanded_50 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%181 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%182 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%183 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%184 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%185 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%186 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%182, %187 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%188, %__auto.blk.1.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%189 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %191 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_51 = tensor.collapse_shape %190 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %192 = linalg.matmul ins(%collapsed_51, %191 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %193 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%192 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %194 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %195 = linalg.matmul ins(%collapsed_51, %194 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %196 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%195 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %197 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %198 = linalg.matmul ins(%collapsed_51, %197 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %199 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%198 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_52 = tensor.expand_shape %193 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_53 = tensor.expand_shape %196 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_54 = tensor.reshape %expanded_52(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_54[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_54[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_55 = tensor.reshape %expanded_53(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_55[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_55[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%200, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%202 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_56 = tensor.collapse_shape %203 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%201, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%204 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_57 = tensor.collapse_shape %205 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_56 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_57 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %208 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c2_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_58 = tensor.expand_shape %207 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_59 = tensor.collapse_shape %208 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_60 = tensor.collapse_shape %expanded_58 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_61 = tensor.expand_shape %collapsed_59 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_62 = tensor.expand_shape %collapsed_60 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %209 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_61 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %210 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_62, %209 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%110 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %211 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%208 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_63 = tensor.collapse_shape %211 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_64 = tensor.expand_shape %collapsed_63 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_65 = tensor.expand_shape %199 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %212 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_64 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %213 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_65, %212 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%210 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_66 = tensor.expand_shape %207 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_66 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_67 = tensor.collapse_shape %214 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_68 = tensor.expand_shape %199 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_68 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_69 = tensor.collapse_shape %215 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%206 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_67 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_69 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%217 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_70 = tensor.collapse_shape %216 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_71 = tensor.collapse_shape %219 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %220 = linalg.batch_matmul ins(%collapsed_70, %collapsed_71 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_72 = tensor.reshape %220(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_72 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%221, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%222 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %224:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%223 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_73 = tensor.expand_shape %224#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%223, %expanded_73 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%225 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%226 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%226, %227 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%228 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_74 = tensor.reshape %229(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_75 = tensor.collapse_shape %218 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %230 = linalg.batch_matmul ins(%reshape_74, %collapsed_75 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_76 = tensor.expand_shape %230 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_76 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %232 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_77 = tensor.collapse_shape %231 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %233 = linalg.matmul ins(%collapsed_77, %232 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %234 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%233 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_78 = tensor.expand_shape %234 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%181, %expanded_78 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%235 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%236 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%237 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%238 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%239 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%240 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%236, %241 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%242, %__auto.blk.1.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%243 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %245 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_79 = tensor.collapse_shape %244 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %246 = linalg.matmul ins(%collapsed_79, %245 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %247 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%246 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_80 = tensor.expand_shape %247 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_80 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%248, %expanded_80 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %250 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %251 = linalg.matmul ins(%collapsed_79, %250 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %252 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%251 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_81 = tensor.expand_shape %252 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%249, %expanded_81 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %254 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_82 = tensor.collapse_shape %253 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %255 = linalg.matmul ins(%collapsed_82, %254 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %256 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%255 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_83 = tensor.expand_shape %256 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%235, %expanded_83 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%257 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%258 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%259 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%260 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%261 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%262 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%258, %263 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%264, %__auto.blk.2.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%265 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %267 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_84 = tensor.collapse_shape %266 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %268 = linalg.matmul ins(%collapsed_84, %267 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %269 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%268 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %270 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %271 = linalg.matmul ins(%collapsed_84, %270 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %272 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%271 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %273 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %274 = linalg.matmul ins(%collapsed_84, %273 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %275 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%274 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_85 = tensor.expand_shape %269 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_86 = tensor.expand_shape %272 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_87 = tensor.reshape %expanded_85(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %276 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_87[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_87[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_88 = tensor.reshape %expanded_86(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_88[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_88[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%276, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%278 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_89 = tensor.collapse_shape %279 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%277, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%280 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_90 = tensor.collapse_shape %281 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_89 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_90 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %284 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c4_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_91 = tensor.expand_shape %283 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_92 = tensor.collapse_shape %284 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_93 = tensor.collapse_shape %expanded_91 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_94 = tensor.expand_shape %collapsed_92 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_95 = tensor.expand_shape %collapsed_93 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %285 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_94 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %286 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_95, %285 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%213 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %287 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%284 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_96 = tensor.collapse_shape %287 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_97 = tensor.expand_shape %collapsed_96 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_98 = tensor.expand_shape %275 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %288 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_97 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %289 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_98, %288 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%286 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_99 = tensor.expand_shape %283 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_99 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_100 = tensor.collapse_shape %290 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_101 = tensor.expand_shape %275 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_101 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_102 = tensor.collapse_shape %291 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%282 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_100 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_102 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%293 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_103 = tensor.collapse_shape %292 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_104 = tensor.collapse_shape %295 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %296 = linalg.batch_matmul ins(%collapsed_103, %collapsed_104 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_105 = tensor.reshape %296(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_105 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %298 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%297, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%298 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %300:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%299 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_106 = tensor.expand_shape %300#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%299, %expanded_106 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%301 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%302 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%302, %303 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%304 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_107 = tensor.reshape %305(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_108 = tensor.collapse_shape %294 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %306 = linalg.batch_matmul ins(%reshape_107, %collapsed_108 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_109 = tensor.expand_shape %306 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_109 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %308 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_110 = tensor.collapse_shape %307 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %309 = linalg.matmul ins(%collapsed_110, %308 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %310 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%309 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_111 = tensor.expand_shape %310 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%257, %expanded_111 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%311 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%312 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%313 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%314 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%315 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%316 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%312, %317 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%318, %__auto.blk.2.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%319 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %321 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_112 = tensor.collapse_shape %320 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %322 = linalg.matmul ins(%collapsed_112, %321 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %323 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%322 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_113 = tensor.expand_shape %323 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_113 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%324, %expanded_113 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %326 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %327 = linalg.matmul ins(%collapsed_112, %326 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %328 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%327 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_114 = tensor.expand_shape %328 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%325, %expanded_114 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %330 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_115 = tensor.collapse_shape %329 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %331 = linalg.matmul ins(%collapsed_115, %330 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %332 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%331 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_116 = tensor.expand_shape %332 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%311, %expanded_116 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%333 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%335 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%336 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%337 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%338 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%334, %339 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%340, %__auto.blk.3.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%341 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %343 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_117 = tensor.collapse_shape %342 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %344 = linalg.matmul ins(%collapsed_117, %343 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %345 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%344 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %346 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %347 = linalg.matmul ins(%collapsed_117, %346 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %348 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%347 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %349 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %350 = linalg.matmul ins(%collapsed_117, %349 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %351 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%350 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_118 = tensor.expand_shape %345 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_119 = tensor.expand_shape %348 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_120 = tensor.reshape %expanded_118(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %352 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_120[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_120[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_121 = tensor.reshape %expanded_119(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_121[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_121[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%352, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%354 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_122 = tensor.collapse_shape %355 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%353, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%356 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_123 = tensor.collapse_shape %357 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_122 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_123 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %360 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c6_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_124 = tensor.expand_shape %359 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_125 = tensor.collapse_shape %360 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_126 = tensor.collapse_shape %expanded_124 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_127 = tensor.expand_shape %collapsed_125 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_128 = tensor.expand_shape %collapsed_126 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %361 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_127 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %362 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_128, %361 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%289 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %363 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%360 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_129 = tensor.collapse_shape %363 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_130 = tensor.expand_shape %collapsed_129 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_131 = tensor.expand_shape %351 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %364 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_130 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %365 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_131, %364 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%362 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_132 = tensor.expand_shape %359 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_132 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_133 = tensor.collapse_shape %366 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_134 = tensor.expand_shape %351 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_134 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_135 = tensor.collapse_shape %367 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%358 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_133 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_135 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%369 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_136 = tensor.collapse_shape %368 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_137 = tensor.collapse_shape %371 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %372 = linalg.batch_matmul ins(%collapsed_136, %collapsed_137 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_138 = tensor.reshape %372(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_138 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %374 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%373, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%374 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %376:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%375 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_139 = tensor.expand_shape %376#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%375, %expanded_139 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%377 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%378 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%378, %379 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%380 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_140 = tensor.reshape %381(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_141 = tensor.collapse_shape %370 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %382 = linalg.batch_matmul ins(%reshape_140, %collapsed_141 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_142 = tensor.expand_shape %382 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_142 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %384 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_143 = tensor.collapse_shape %383 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %385 = linalg.matmul ins(%collapsed_143, %384 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %386 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%385 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_144 = tensor.expand_shape %386 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%333, %expanded_144 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%387 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%388 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%389 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%390 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%392 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%388, %393 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%394, %__auto.blk.3.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %396 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%395 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %397 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_145 = tensor.collapse_shape %396 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %398 = linalg.matmul ins(%collapsed_145, %397 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %399 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%398 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_146 = tensor.expand_shape %399 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_146 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%400, %expanded_146 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %402 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %403 = linalg.matmul ins(%collapsed_145, %402 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %404 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%403 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_147 = tensor.expand_shape %404 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%401, %expanded_147 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %406 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_148 = tensor.collapse_shape %405 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %407 = linalg.matmul ins(%collapsed_148, %406 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %408 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%407 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_149 = tensor.expand_shape %408 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%387, %expanded_149 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %410 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%409 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%410 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %412 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%411 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %413 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%412 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%413 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%414 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%410, %415 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%416, %__auto.blk.4.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%417 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %419 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_150 = tensor.collapse_shape %418 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %420 = linalg.matmul ins(%collapsed_150, %419 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %421 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%420 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %422 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %423 = linalg.matmul ins(%collapsed_150, %422 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %424 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%423 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %425 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %426 = linalg.matmul ins(%collapsed_150, %425 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %427 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%426 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_151 = tensor.expand_shape %421 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_152 = tensor.expand_shape %424 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_153 = tensor.reshape %expanded_151(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %428 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_153[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_153[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_154 = tensor.reshape %expanded_152(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_154[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_154[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%428, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%430 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_155 = tensor.collapse_shape %431 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%429, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%432 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_156 = tensor.collapse_shape %433 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_155 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_156 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %436 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c8_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_157 = tensor.expand_shape %435 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_158 = tensor.collapse_shape %436 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_159 = tensor.collapse_shape %expanded_157 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_160 = tensor.expand_shape %collapsed_158 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_161 = tensor.expand_shape %collapsed_159 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %437 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_160 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %438 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_161, %437 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%365 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %439 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%436 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_162 = tensor.collapse_shape %439 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_163 = tensor.expand_shape %collapsed_162 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_164 = tensor.expand_shape %427 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %440 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_163 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %441 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_164, %440 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%438 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_165 = tensor.expand_shape %435 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_165 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_166 = tensor.collapse_shape %442 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_167 = tensor.expand_shape %427 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_167 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_168 = tensor.collapse_shape %443 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%434 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_166 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_168 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%445 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_169 = tensor.collapse_shape %444 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_170 = tensor.collapse_shape %447 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %448 = linalg.batch_matmul ins(%collapsed_169, %collapsed_170 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_171 = tensor.reshape %448(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %449 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_171 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %450 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%449, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%450 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %452:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%451 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_172 = tensor.expand_shape %452#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%451, %expanded_172 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %454 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%453 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%454 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%454, %455 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%456 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_173 = tensor.reshape %457(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_174 = tensor.collapse_shape %446 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %458 = linalg.batch_matmul ins(%reshape_173, %collapsed_174 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_175 = tensor.expand_shape %458 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_175 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %460 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_176 = tensor.collapse_shape %459 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %461 = linalg.matmul ins(%collapsed_176, %460 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %462 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%461 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_177 = tensor.expand_shape %462 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%409, %expanded_177 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%463 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%465 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%466 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%467 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%468 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %470 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%464, %469 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %471 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%470, %__auto.blk.4.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %472 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%471 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %473 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_178 = tensor.collapse_shape %472 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %474 = linalg.matmul ins(%collapsed_178, %473 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %475 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%474 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_179 = tensor.expand_shape %475 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_179 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476, %expanded_179 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %478 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %479 = linalg.matmul ins(%collapsed_178, %478 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %480 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%479 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_180 = tensor.expand_shape %480 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%477, %expanded_180 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %482 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_181 = tensor.collapse_shape %481 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %483 = linalg.matmul ins(%collapsed_181, %482 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %484 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%483 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_182 = tensor.expand_shape %484 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%463, %expanded_182 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%485 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%486 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%487 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %489 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%488 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %491 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%490 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%486, %491 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%492, %__auto.blk.5.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%493 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %495 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_183 = tensor.collapse_shape %494 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %496 = linalg.matmul ins(%collapsed_183, %495 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %497 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%496 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %498 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %499 = linalg.matmul ins(%collapsed_183, %498 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %500 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%499 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %501 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %502 = linalg.matmul ins(%collapsed_183, %501 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %503 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%502 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_184 = tensor.expand_shape %497 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_185 = tensor.expand_shape %500 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_186 = tensor.reshape %expanded_184(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_186[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_186[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_187 = tensor.reshape %expanded_185(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_187[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_187[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%504, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%506 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_188 = tensor.collapse_shape %507 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%505, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%508 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_189 = tensor.collapse_shape %509 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_188 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_189 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %512 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c10_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_190 = tensor.expand_shape %511 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_191 = tensor.collapse_shape %512 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_192 = tensor.collapse_shape %expanded_190 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_193 = tensor.expand_shape %collapsed_191 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_194 = tensor.expand_shape %collapsed_192 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %513 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_193 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %514 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_194, %513 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%441 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %515 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%512 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_195 = tensor.collapse_shape %515 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_196 = tensor.expand_shape %collapsed_195 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_197 = tensor.expand_shape %503 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %516 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_196 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %517 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_197, %516 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%514 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_198 = tensor.expand_shape %511 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_198 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_199 = tensor.collapse_shape %518 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_200 = tensor.expand_shape %503 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_200 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_201 = tensor.collapse_shape %519 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%510 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_199 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_201 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%521 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_202 = tensor.collapse_shape %520 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_203 = tensor.collapse_shape %523 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %524 = linalg.batch_matmul ins(%collapsed_202, %collapsed_203 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_204 = tensor.reshape %524(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_204 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%525, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%526 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %528:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%527 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_205 = tensor.expand_shape %528#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%527, %expanded_205 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%529 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%530 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %532 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%530, %531 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%532 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_206 = tensor.reshape %533(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_207 = tensor.collapse_shape %522 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %534 = linalg.batch_matmul ins(%reshape_206, %collapsed_207 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_208 = tensor.expand_shape %534 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_208 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %536 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_209 = tensor.collapse_shape %535 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %537 = linalg.matmul ins(%collapsed_209, %536 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %538 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%537 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_210 = tensor.expand_shape %538 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%485, %expanded_210 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%539 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%540 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%541 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%542 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%543 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%544 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%540, %545 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%546, %__auto.blk.5.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %548 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%547 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %549 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_211 = tensor.collapse_shape %548 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %550 = linalg.matmul ins(%collapsed_211, %549 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %551 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%550 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_212 = tensor.expand_shape %551 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_212 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%552, %expanded_212 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %554 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %555 = linalg.matmul ins(%collapsed_211, %554 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %556 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%555 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_213 = tensor.expand_shape %556 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%553, %expanded_213 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %558 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_214 = tensor.collapse_shape %557 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %559 = linalg.matmul ins(%collapsed_214, %558 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %560 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%559 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_215 = tensor.expand_shape %560 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%539, %expanded_215 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%561 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%562 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%563 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%564 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%565 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%566 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%562, %567 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%568, %__auto.blk.6.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %570 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%569 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %571 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_216 = tensor.collapse_shape %570 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %572 = linalg.matmul ins(%collapsed_216, %571 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %573 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%572 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %574 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %575 = linalg.matmul ins(%collapsed_216, %574 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %576 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%575 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %577 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %578 = linalg.matmul ins(%collapsed_216, %577 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %579 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%578 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_217 = tensor.expand_shape %573 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_218 = tensor.expand_shape %576 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_219 = tensor.reshape %expanded_217(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_219[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_219[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_220 = tensor.reshape %expanded_218(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_220[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_220[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%580, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%582 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_221 = tensor.collapse_shape %583 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%581, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%584 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_222 = tensor.collapse_shape %585 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_221 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_222 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %588 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c12_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_223 = tensor.expand_shape %587 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_224 = tensor.collapse_shape %588 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_225 = tensor.collapse_shape %expanded_223 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_226 = tensor.expand_shape %collapsed_224 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_227 = tensor.expand_shape %collapsed_225 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %589 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_226 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %590 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_227, %589 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%517 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %591 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%588 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_228 = tensor.collapse_shape %591 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_229 = tensor.expand_shape %collapsed_228 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_230 = tensor.expand_shape %579 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %592 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_229 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %593 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_230, %592 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%590 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_231 = tensor.expand_shape %587 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_231 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_232 = tensor.collapse_shape %594 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_233 = tensor.expand_shape %579 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_233 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_234 = tensor.collapse_shape %595 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%586 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_232 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_234 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%597 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_235 = tensor.collapse_shape %596 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_236 = tensor.collapse_shape %599 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %600 = linalg.batch_matmul ins(%collapsed_235, %collapsed_236 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_237 = tensor.reshape %600(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_237 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%601, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%602 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %604:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%603 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_238 = tensor.expand_shape %604#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %605 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%603, %expanded_238 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%605 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%606 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%606, %607 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%608 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_239 = tensor.reshape %609(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_240 = tensor.collapse_shape %598 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %610 = linalg.batch_matmul ins(%reshape_239, %collapsed_240 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_241 = tensor.expand_shape %610 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_241 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %612 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_242 = tensor.collapse_shape %611 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %613 = linalg.matmul ins(%collapsed_242, %612 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %614 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%613 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_243 = tensor.expand_shape %614 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%561, %expanded_243 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%615 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%616 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%617 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %619 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%618 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%619 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%620 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %622 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%616, %621 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%622, %__auto.blk.6.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %624 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%623 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %625 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_244 = tensor.collapse_shape %624 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %626 = linalg.matmul ins(%collapsed_244, %625 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %627 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%626 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_245 = tensor.expand_shape %627 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_245 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%628, %expanded_245 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %630 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %631 = linalg.matmul ins(%collapsed_244, %630 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %632 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%631 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_246 = tensor.expand_shape %632 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%629, %expanded_246 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %634 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_247 = tensor.collapse_shape %633 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %635 = linalg.matmul ins(%collapsed_247, %634 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %636 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%635 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_248 = tensor.expand_shape %636 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%615, %expanded_248 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%637 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%638 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%639 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%640 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %642 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%641 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%642 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%638, %643 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%644, %__auto.blk.7.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %646 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%645 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %647 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_249 = tensor.collapse_shape %646 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %648 = linalg.matmul ins(%collapsed_249, %647 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %649 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%648 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %650 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %651 = linalg.matmul ins(%collapsed_249, %650 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %652 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%651 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %653 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %654 = linalg.matmul ins(%collapsed_249, %653 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %655 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%654 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_250 = tensor.expand_shape %649 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_251 = tensor.expand_shape %652 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_252 = tensor.reshape %expanded_250(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_252[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_252[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_253 = tensor.reshape %expanded_251(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_253[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_253[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%656, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%658 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_254 = tensor.collapse_shape %659 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%657, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%660 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_255 = tensor.collapse_shape %661 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_254 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_255 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %664 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c14_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_256 = tensor.expand_shape %663 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_257 = tensor.collapse_shape %664 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_258 = tensor.collapse_shape %expanded_256 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_259 = tensor.expand_shape %collapsed_257 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_260 = tensor.expand_shape %collapsed_258 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %665 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_259 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %666 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_260, %665 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%593 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %667 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%664 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_261 = tensor.collapse_shape %667 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_262 = tensor.expand_shape %collapsed_261 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_263 = tensor.expand_shape %655 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %668 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_262 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %669 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_263, %668 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%666 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_264 = tensor.expand_shape %663 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %670 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_264 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_265 = tensor.collapse_shape %670 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_266 = tensor.expand_shape %655 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_266 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_267 = tensor.collapse_shape %671 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%662 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_265 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_267 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%673 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_268 = tensor.collapse_shape %672 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_269 = tensor.collapse_shape %675 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %676 = linalg.batch_matmul ins(%collapsed_268, %collapsed_269 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_270 = tensor.reshape %676(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_270 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%677, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%678 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %680:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%679 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_271 = tensor.expand_shape %680#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%679, %expanded_271 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%681 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%682 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%682, %683 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%684 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_272 = tensor.reshape %685(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_273 = tensor.collapse_shape %674 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %686 = linalg.batch_matmul ins(%reshape_272, %collapsed_273 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_274 = tensor.expand_shape %686 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_274 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %688 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_275 = tensor.collapse_shape %687 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %689 = linalg.matmul ins(%collapsed_275, %688 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %690 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%689 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_276 = tensor.expand_shape %690 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %691 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%637, %expanded_276 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%691 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%692 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%693 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%694 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%695 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%696 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%692, %697 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%698, %__auto.blk.7.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %700 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%699 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %701 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_277 = tensor.collapse_shape %700 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %702 = linalg.matmul ins(%collapsed_277, %701 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %703 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%702 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_278 = tensor.expand_shape %703 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %704 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_278 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%704, %expanded_278 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %706 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %707 = linalg.matmul ins(%collapsed_277, %706 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %708 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%707 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_279 = tensor.expand_shape %708 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%705, %expanded_279 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %710 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_280 = tensor.collapse_shape %709 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %711 = linalg.matmul ins(%collapsed_280, %710 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %712 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%711 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_281 = tensor.expand_shape %712 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%691, %expanded_281 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%713 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%714 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%715 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%716 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%717 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %719 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%718 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%714, %719 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%720, %__auto.blk.8.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%721 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %723 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_282 = tensor.collapse_shape %722 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %724 = linalg.matmul ins(%collapsed_282, %723 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %725 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%724 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %726 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %727 = linalg.matmul ins(%collapsed_282, %726 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %728 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%727 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %729 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %730 = linalg.matmul ins(%collapsed_282, %729 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %731 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%730 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_283 = tensor.expand_shape %725 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_284 = tensor.expand_shape %728 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_285 = tensor.reshape %expanded_283(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_285[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_285[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_286 = tensor.reshape %expanded_284(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_286[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_286[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%732, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%734 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_287 = tensor.collapse_shape %735 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%733, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%736 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_288 = tensor.collapse_shape %737 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_287 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_288 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %740 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c16_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_289 = tensor.expand_shape %739 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_290 = tensor.collapse_shape %740 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_291 = tensor.collapse_shape %expanded_289 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_292 = tensor.expand_shape %collapsed_290 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_293 = tensor.expand_shape %collapsed_291 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %741 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_292 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %742 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_293, %741 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%669 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %743 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%740 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_294 = tensor.collapse_shape %743 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_295 = tensor.expand_shape %collapsed_294 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_296 = tensor.expand_shape %731 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %744 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_295 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %745 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_296, %744 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%742 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_297 = tensor.expand_shape %739 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %746 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_297 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_298 = tensor.collapse_shape %746 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_299 = tensor.expand_shape %731 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_299 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_300 = tensor.collapse_shape %747 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%738 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_298 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_300 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%749 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_301 = tensor.collapse_shape %748 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_302 = tensor.collapse_shape %751 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %752 = linalg.batch_matmul ins(%collapsed_301, %collapsed_302 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_303 = tensor.reshape %752(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_303 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%753, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%754 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %756:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%755 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_304 = tensor.expand_shape %756#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%755, %expanded_304 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%757 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%758 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%758, %759 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%760 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_305 = tensor.reshape %761(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_306 = tensor.collapse_shape %750 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %762 = linalg.batch_matmul ins(%reshape_305, %collapsed_306 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_307 = tensor.expand_shape %762 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_307 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %764 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_308 = tensor.collapse_shape %763 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %765 = linalg.matmul ins(%collapsed_308, %764 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %766 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%765 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_309 = tensor.expand_shape %766 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%713, %expanded_309 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %768 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%767 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%768 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%769 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%770 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%771 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%772 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%768, %773 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774, %__auto.blk.8.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%775 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %777 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_310 = tensor.collapse_shape %776 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %778 = linalg.matmul ins(%collapsed_310, %777 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %779 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%778 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_311 = tensor.expand_shape %779 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_311 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%780, %expanded_311 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %782 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %783 = linalg.matmul ins(%collapsed_310, %782 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %784 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%783 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_312 = tensor.expand_shape %784 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%781, %expanded_312 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %786 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_313 = tensor.collapse_shape %785 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %787 = linalg.matmul ins(%collapsed_313, %786 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %788 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%787 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_314 = tensor.expand_shape %788 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %789 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%767, %expanded_314 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%789 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%790 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %792 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%791 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%792 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%793 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%794 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%790, %795 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%796, %__auto.blk.9.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%797 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %799 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_315 = tensor.collapse_shape %798 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %800 = linalg.matmul ins(%collapsed_315, %799 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %801 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%800 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %802 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %803 = linalg.matmul ins(%collapsed_315, %802 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %804 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%803 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %805 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %806 = linalg.matmul ins(%collapsed_315, %805 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %807 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%806 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_316 = tensor.expand_shape %801 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_317 = tensor.expand_shape %804 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_318 = tensor.reshape %expanded_316(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %808 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_318[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_318[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_319 = tensor.reshape %expanded_317(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %809 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_319[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_319[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%808, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%810 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_320 = tensor.collapse_shape %811 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%809, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%812 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_321 = tensor.collapse_shape %813 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_320 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_321 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %816 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c18_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_322 = tensor.expand_shape %815 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_323 = tensor.collapse_shape %816 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_324 = tensor.collapse_shape %expanded_322 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_325 = tensor.expand_shape %collapsed_323 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_326 = tensor.expand_shape %collapsed_324 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %817 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_325 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %818 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_326, %817 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%745 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %819 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%816 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_327 = tensor.collapse_shape %819 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_328 = tensor.expand_shape %collapsed_327 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_329 = tensor.expand_shape %807 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %820 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_328 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %821 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_329, %820 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%818 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_330 = tensor.expand_shape %815 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_330 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_331 = tensor.collapse_shape %822 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_332 = tensor.expand_shape %807 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_332 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_333 = tensor.collapse_shape %823 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %824 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%814 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_331 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_333 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%825 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_334 = tensor.collapse_shape %824 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_335 = tensor.collapse_shape %827 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %828 = linalg.batch_matmul ins(%collapsed_334, %collapsed_335 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_336 = tensor.reshape %828(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_336 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%829, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%830 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %832:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%831 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_337 = tensor.expand_shape %832#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%831, %expanded_337 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%833 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%834 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%834, %835 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%836 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_338 = tensor.reshape %837(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_339 = tensor.collapse_shape %826 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %838 = linalg.batch_matmul ins(%reshape_338, %collapsed_339 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_340 = tensor.expand_shape %838 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_340 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %840 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_341 = tensor.collapse_shape %839 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %841 = linalg.matmul ins(%collapsed_341, %840 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %842 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%841 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_342 = tensor.expand_shape %842 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%789, %expanded_342 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%843 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %846 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%845 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%846 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%847 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%848 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%844, %849 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%850, %__auto.blk.9.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%851 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %853 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_343 = tensor.collapse_shape %852 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %854 = linalg.matmul ins(%collapsed_343, %853 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %855 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%854 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_344 = tensor.expand_shape %855 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_344 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%856, %expanded_344 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %858 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %859 = linalg.matmul ins(%collapsed_343, %858 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %860 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%859 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_345 = tensor.expand_shape %860 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%857, %expanded_345 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %862 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_346 = tensor.collapse_shape %861 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %863 = linalg.matmul ins(%collapsed_346, %862 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %864 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%863 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_347 = tensor.expand_shape %864 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %865 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%843, %expanded_347 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %866 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%865 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%866 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%867 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%868 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%869 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%870 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%866, %871 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%872, %__auto.blk.10.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%873 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %875 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_348 = tensor.collapse_shape %874 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %876 = linalg.matmul ins(%collapsed_348, %875 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %877 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%876 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %878 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %879 = linalg.matmul ins(%collapsed_348, %878 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %880 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%879 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %881 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %882 = linalg.matmul ins(%collapsed_348, %881 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %883 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%882 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_349 = tensor.expand_shape %877 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_350 = tensor.expand_shape %880 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_351 = tensor.reshape %expanded_349(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %884 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_351[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_351[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_352 = tensor.reshape %expanded_350(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_352[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_352[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %886 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%884, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %887 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%886 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_353 = tensor.collapse_shape %887 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%885, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%888 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_354 = tensor.collapse_shape %889 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_353 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_354 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %892 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c20_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_355 = tensor.expand_shape %891 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_356 = tensor.collapse_shape %892 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_357 = tensor.collapse_shape %expanded_355 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_358 = tensor.expand_shape %collapsed_356 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_359 = tensor.expand_shape %collapsed_357 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %893 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_358 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %894 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_359, %893 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%821 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %895 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%892 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_360 = tensor.collapse_shape %895 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_361 = tensor.expand_shape %collapsed_360 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_362 = tensor.expand_shape %883 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %896 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_361 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %897 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_362, %896 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%894 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_363 = tensor.expand_shape %891 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_363 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_364 = tensor.collapse_shape %898 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_365 = tensor.expand_shape %883 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_365 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_366 = tensor.collapse_shape %899 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %900 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%890 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_364 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_366 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%901 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_367 = tensor.collapse_shape %900 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_368 = tensor.collapse_shape %903 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %904 = linalg.batch_matmul ins(%collapsed_367, %collapsed_368 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_369 = tensor.reshape %904(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_369 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%905, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%906 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %908:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%907 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_370 = tensor.expand_shape %908#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%907, %expanded_370 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%909 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%910 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%910, %911 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%912 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_371 = tensor.reshape %913(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_372 = tensor.collapse_shape %902 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %914 = linalg.batch_matmul ins(%reshape_371, %collapsed_372 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_373 = tensor.expand_shape %914 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_373 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %916 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_374 = tensor.collapse_shape %915 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %917 = linalg.matmul ins(%collapsed_374, %916 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %918 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%917 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_375 = tensor.expand_shape %918 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %919 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%865, %expanded_375 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%919 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%920 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%921 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%922 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %924 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%923 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%924 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%920, %925 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%926, %__auto.blk.10.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%927 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %929 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_376 = tensor.collapse_shape %928 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %930 = linalg.matmul ins(%collapsed_376, %929 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %931 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%930 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_377 = tensor.expand_shape %931 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_377 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%932, %expanded_377 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %934 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %935 = linalg.matmul ins(%collapsed_376, %934 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %936 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%935 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_378 = tensor.expand_shape %936 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%933, %expanded_378 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %938 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_379 = tensor.collapse_shape %937 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %939 = linalg.matmul ins(%collapsed_379, %938 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %940 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%939 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_380 = tensor.expand_shape %940 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%919, %expanded_380 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %942 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%941 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%942 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%943 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%944 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%945 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%946 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%942, %947 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%948, %__auto.blk.11.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%949 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %951 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_381 = tensor.collapse_shape %950 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %952 = linalg.matmul ins(%collapsed_381, %951 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %953 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%952 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %954 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %955 = linalg.matmul ins(%collapsed_381, %954 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %956 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%955 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %957 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %958 = linalg.matmul ins(%collapsed_381, %957 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %959 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%958 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_382 = tensor.expand_shape %953 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_383 = tensor.expand_shape %956 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_384 = tensor.reshape %expanded_382(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %960 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_384[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_384[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_385 = tensor.reshape %expanded_383(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %961 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_385[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_385[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %962 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%960, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%962 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_386 = tensor.collapse_shape %963 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%961, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %965 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%964 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_387 = tensor.collapse_shape %965 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_386 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_387 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %968 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c22_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_388 = tensor.expand_shape %967 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_389 = tensor.collapse_shape %968 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_390 = tensor.collapse_shape %expanded_388 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_391 = tensor.expand_shape %collapsed_389 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_392 = tensor.expand_shape %collapsed_390 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %969 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_391 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %970 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_392, %969 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%897 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %971 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%968 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_393 = tensor.collapse_shape %971 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_394 = tensor.expand_shape %collapsed_393 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_395 = tensor.expand_shape %959 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %972 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_394 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %973 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_395, %972 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%970 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_396 = tensor.expand_shape %967 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_396 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_397 = tensor.collapse_shape %974 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_398 = tensor.expand_shape %959 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_398 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_399 = tensor.collapse_shape %975 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%966 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_397 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %978 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_399 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%977 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_400 = tensor.collapse_shape %976 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_401 = tensor.collapse_shape %979 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %980 = linalg.batch_matmul ins(%collapsed_400, %collapsed_401 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_402 = tensor.reshape %980(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %981 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_402 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %982 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%981, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%982 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %984:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%983 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_403 = tensor.expand_shape %984#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %985 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%983, %expanded_403 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%985 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%986 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%986, %987 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%988 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_404 = tensor.reshape %989(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_405 = tensor.collapse_shape %978 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %990 = linalg.batch_matmul ins(%reshape_404, %collapsed_405 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_406 = tensor.expand_shape %990 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_406 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %992 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_407 = tensor.collapse_shape %991 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %993 = linalg.matmul ins(%collapsed_407, %992 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %994 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%993 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_408 = tensor.expand_shape %994 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%941, %expanded_408 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%995 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%996 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %998 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%997 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%998 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1000 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%999 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1000 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%996, %1001 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1002, %__auto.blk.11.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1003 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1005 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_409 = tensor.collapse_shape %1004 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1006 = linalg.matmul ins(%collapsed_409, %1005 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1007 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1006 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_410 = tensor.expand_shape %1007 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_410 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1008, %expanded_410 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1010 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1011 = linalg.matmul ins(%collapsed_409, %1010 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1012 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1011 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_411 = tensor.expand_shape %1012 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1009, %expanded_411 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1014 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_412 = tensor.collapse_shape %1013 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1015 = linalg.matmul ins(%collapsed_412, %1014 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1016 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1015 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_413 = tensor.expand_shape %1016 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%995, %expanded_413 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1018 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1017 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1018 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1019 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1020 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1022 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1021 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1022 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1018, %1023 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1024, %__auto.blk.12.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1025 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1027 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_414 = tensor.collapse_shape %1026 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1028 = linalg.matmul ins(%collapsed_414, %1027 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1029 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1028 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1030 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1031 = linalg.matmul ins(%collapsed_414, %1030 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1032 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1031 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1033 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1034 = linalg.matmul ins(%collapsed_414, %1033 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1035 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1034 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_415 = tensor.expand_shape %1029 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_416 = tensor.expand_shape %1032 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_417 = tensor.reshape %expanded_415(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_417[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_417[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_418 = tensor.reshape %expanded_416(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_418[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_418[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1038 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1036, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1038 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_419 = tensor.collapse_shape %1039 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1037, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1040 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_420 = tensor.collapse_shape %1041 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_419 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_420 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1044 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c24_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_421 = tensor.expand_shape %1043 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_422 = tensor.collapse_shape %1044 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_423 = tensor.collapse_shape %expanded_421 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_424 = tensor.expand_shape %collapsed_422 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_425 = tensor.expand_shape %collapsed_423 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1045 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_424 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1046 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_425, %1045 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%973 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1047 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1044 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_426 = tensor.collapse_shape %1047 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_427 = tensor.expand_shape %collapsed_426 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_428 = tensor.expand_shape %1035 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1048 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_427 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1049 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_428, %1048 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1046 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_429 = tensor.expand_shape %1043 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_429 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_430 = tensor.collapse_shape %1050 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_431 = tensor.expand_shape %1035 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_431 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_432 = tensor.collapse_shape %1051 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1042 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_430 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_432 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1053 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_433 = tensor.collapse_shape %1052 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_434 = tensor.collapse_shape %1055 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1056 = linalg.batch_matmul ins(%collapsed_433, %collapsed_434 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_435 = tensor.reshape %1056(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1057 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_435 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1058 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1057, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1058 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1060:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1059 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_436 = tensor.expand_shape %1060#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1059, %expanded_436 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1062 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1061 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1062 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1062, %1063 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1064 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_437 = tensor.reshape %1065(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_438 = tensor.collapse_shape %1054 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1066 = linalg.batch_matmul ins(%reshape_437, %collapsed_438 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_439 = tensor.expand_shape %1066 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_439 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1068 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_440 = tensor.collapse_shape %1067 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1069 = linalg.matmul ins(%collapsed_440, %1068 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1070 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1069 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_441 = tensor.expand_shape %1070 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1017, %expanded_441 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1071 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1072 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1073 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1074 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1075 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1076 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1072, %1077 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1079 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1078, %__auto.blk.12.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1080 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1079 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1081 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_442 = tensor.collapse_shape %1080 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1082 = linalg.matmul ins(%collapsed_442, %1081 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1083 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1082 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_443 = tensor.expand_shape %1083 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_443 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1084, %expanded_443 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1086 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1087 = linalg.matmul ins(%collapsed_442, %1086 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1088 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1087 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_444 = tensor.expand_shape %1088 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1085, %expanded_444 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1090 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_445 = tensor.collapse_shape %1089 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1091 = linalg.matmul ins(%collapsed_445, %1090 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1092 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1091 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_446 = tensor.expand_shape %1092 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1071, %expanded_446 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1093 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1095 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1094 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1096 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1095 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1097 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1096 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1097 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1098 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1094, %1099 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1100, %__auto.blk.13.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1101 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1103 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_447 = tensor.collapse_shape %1102 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1104 = linalg.matmul ins(%collapsed_447, %1103 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1105 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1104 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1106 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1107 = linalg.matmul ins(%collapsed_447, %1106 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1108 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1107 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1109 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1110 = linalg.matmul ins(%collapsed_447, %1109 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1111 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1110 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_448 = tensor.expand_shape %1105 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_449 = tensor.expand_shape %1108 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_450 = tensor.reshape %expanded_448(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_450[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_450[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_451 = tensor.reshape %expanded_449(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_451[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_451[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1112, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1114 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_452 = tensor.collapse_shape %1115 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1113, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1116 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_453 = tensor.collapse_shape %1117 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_452 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_453 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1120 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c26_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_454 = tensor.expand_shape %1119 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_455 = tensor.collapse_shape %1120 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_456 = tensor.collapse_shape %expanded_454 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_457 = tensor.expand_shape %collapsed_455 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_458 = tensor.expand_shape %collapsed_456 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1121 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_457 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1122 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_458, %1121 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1049 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1123 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1120 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_459 = tensor.collapse_shape %1123 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_460 = tensor.expand_shape %collapsed_459 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_461 = tensor.expand_shape %1111 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1124 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_460 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1125 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_461, %1124 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1122 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_462 = tensor.expand_shape %1119 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_462 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_463 = tensor.collapse_shape %1126 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_464 = tensor.expand_shape %1111 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_464 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_465 = tensor.collapse_shape %1127 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1118 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_463 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_465 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1129 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_466 = tensor.collapse_shape %1128 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_467 = tensor.collapse_shape %1131 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1132 = linalg.batch_matmul ins(%collapsed_466, %collapsed_467 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_468 = tensor.reshape %1132(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_468 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1133, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1134 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1136:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1135 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_469 = tensor.expand_shape %1136#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1135, %expanded_469 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1137 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1138 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1138, %1139 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1140 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_470 = tensor.reshape %1141(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_471 = tensor.collapse_shape %1130 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1142 = linalg.batch_matmul ins(%reshape_470, %collapsed_471 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_472 = tensor.expand_shape %1142 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_472 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1144 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_473 = tensor.collapse_shape %1143 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1145 = linalg.matmul ins(%collapsed_473, %1144 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1146 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1145 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_474 = tensor.expand_shape %1146 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1093, %expanded_474 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1147 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1148 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1149 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1150 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1151 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1152 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1148, %1153 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1154, %__auto.blk.13.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1156 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1155 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1157 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_475 = tensor.collapse_shape %1156 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1158 = linalg.matmul ins(%collapsed_475, %1157 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1159 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1158 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_476 = tensor.expand_shape %1159 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_476 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1160, %expanded_476 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1162 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1163 = linalg.matmul ins(%collapsed_475, %1162 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1164 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1163 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_477 = tensor.expand_shape %1164 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1161, %expanded_477 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1166 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_478 = tensor.collapse_shape %1165 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1167 = linalg.matmul ins(%collapsed_478, %1166 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1168 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1167 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_479 = tensor.expand_shape %1168 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1147, %expanded_479 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1169 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1170 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1171 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1172 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1173 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1174 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1170, %1175 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1176, %__auto.blk.14.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1177 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1179 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_480 = tensor.collapse_shape %1178 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1180 = linalg.matmul ins(%collapsed_480, %1179 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1181 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1180 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1182 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1183 = linalg.matmul ins(%collapsed_480, %1182 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1184 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1183 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1185 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1186 = linalg.matmul ins(%collapsed_480, %1185 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1187 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1186 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_481 = tensor.expand_shape %1181 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_482 = tensor.expand_shape %1184 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_483 = tensor.reshape %expanded_481(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_483[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_483[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_484 = tensor.reshape %expanded_482(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_484[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_484[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1188, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1190 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_485 = tensor.collapse_shape %1191 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1189, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1192 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_486 = tensor.collapse_shape %1193 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_485 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_486 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1196 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c28_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_487 = tensor.expand_shape %1195 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_488 = tensor.collapse_shape %1196 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_489 = tensor.collapse_shape %expanded_487 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_490 = tensor.expand_shape %collapsed_488 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_491 = tensor.expand_shape %collapsed_489 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1197 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_490 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1198 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_491, %1197 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1125 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1199 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1196 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_492 = tensor.collapse_shape %1199 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_493 = tensor.expand_shape %collapsed_492 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_494 = tensor.expand_shape %1187 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1200 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_493 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1201 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_494, %1200 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1198 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_495 = tensor.expand_shape %1195 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_495 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_496 = tensor.collapse_shape %1202 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_497 = tensor.expand_shape %1187 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_497 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_498 = tensor.collapse_shape %1203 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1194 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_496 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_498 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1205 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_499 = tensor.collapse_shape %1204 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_500 = tensor.collapse_shape %1207 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1208 = linalg.batch_matmul ins(%collapsed_499, %collapsed_500 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_501 = tensor.reshape %1208(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_501 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1209, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1210 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1212:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1211 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_502 = tensor.expand_shape %1212#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1211, %expanded_502 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1213 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1214 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1214, %1215 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1216 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_503 = tensor.reshape %1217(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_504 = tensor.collapse_shape %1206 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1218 = linalg.batch_matmul ins(%reshape_503, %collapsed_504 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_505 = tensor.expand_shape %1218 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_505 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1220 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_506 = tensor.collapse_shape %1219 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1221 = linalg.matmul ins(%collapsed_506, %1220 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1222 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1221 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_507 = tensor.expand_shape %1222 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1169, %expanded_507 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1223 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1224 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1225 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1226 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1227 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1228 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1224, %1229 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1230, %__auto.blk.14.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1231 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1233 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_508 = tensor.collapse_shape %1232 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1234 = linalg.matmul ins(%collapsed_508, %1233 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1235 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1234 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_509 = tensor.expand_shape %1235 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_509 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1236, %expanded_509 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1238 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1239 = linalg.matmul ins(%collapsed_508, %1238 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1240 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1239 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_510 = tensor.expand_shape %1240 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1237, %expanded_510 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1242 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_511 = tensor.collapse_shape %1241 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1243 = linalg.matmul ins(%collapsed_511, %1242 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1244 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1243 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_512 = tensor.expand_shape %1244 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1223, %expanded_512 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1245 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1246 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1247 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1248 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1249 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1250 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1246, %1251 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1252, %__auto.blk.15.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1253 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1255 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_513 = tensor.collapse_shape %1254 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1256 = linalg.matmul ins(%collapsed_513, %1255 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1257 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1256 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1258 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1259 = linalg.matmul ins(%collapsed_513, %1258 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1260 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1259 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1261 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1262 = linalg.matmul ins(%collapsed_513, %1261 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1263 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1262 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_514 = tensor.expand_shape %1257 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_515 = tensor.expand_shape %1260 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_516 = tensor.reshape %expanded_514(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_516[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_516[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_517 = tensor.reshape %expanded_515(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_517[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_517[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1264, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1266 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_518 = tensor.collapse_shape %1267 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1265, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1268 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_519 = tensor.collapse_shape %1269 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_518 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_519 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1272 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c30_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_520 = tensor.expand_shape %1271 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_521 = tensor.collapse_shape %1272 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_522 = tensor.collapse_shape %expanded_520 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_523 = tensor.expand_shape %collapsed_521 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_524 = tensor.expand_shape %collapsed_522 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1273 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_523 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1274 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_524, %1273 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1201 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1275 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1272 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_525 = tensor.collapse_shape %1275 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_526 = tensor.expand_shape %collapsed_525 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_527 = tensor.expand_shape %1263 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1276 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_526 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1277 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_527, %1276 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1274 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_528 = tensor.expand_shape %1271 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_528 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_529 = tensor.collapse_shape %1278 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_530 = tensor.expand_shape %1263 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_530 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_531 = tensor.collapse_shape %1279 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1270 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_529 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_531 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1281 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_532 = tensor.collapse_shape %1280 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_533 = tensor.collapse_shape %1283 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1284 = linalg.batch_matmul ins(%collapsed_532, %collapsed_533 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_534 = tensor.reshape %1284(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_534 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1285, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1286 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1288:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1287 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_535 = tensor.expand_shape %1288#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1287, %expanded_535 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1289 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1290 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1290, %1291 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1292 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_536 = tensor.reshape %1293(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_537 = tensor.collapse_shape %1282 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1294 = linalg.batch_matmul ins(%reshape_536, %collapsed_537 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_538 = tensor.expand_shape %1294 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_538 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1296 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_539 = tensor.collapse_shape %1295 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1297 = linalg.matmul ins(%collapsed_539, %1296 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1298 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1297 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_540 = tensor.expand_shape %1298 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1299 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1245, %expanded_540 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1299 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1300 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1301 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1302 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1303 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1304 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1300, %1305 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1306, %__auto.blk.15.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1307 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1309 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_541 = tensor.collapse_shape %1308 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1310 = linalg.matmul ins(%collapsed_541, %1309 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1311 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1310 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_542 = tensor.expand_shape %1311 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_542 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1312, %expanded_542 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1314 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1315 = linalg.matmul ins(%collapsed_541, %1314 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1316 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1315 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_543 = tensor.expand_shape %1316 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1313, %expanded_543 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1318 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_544 = tensor.collapse_shape %1317 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1319 = linalg.matmul ins(%collapsed_544, %1318 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1320 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1319 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_545 = tensor.expand_shape %1320 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1299, %expanded_545 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1321 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1322 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1323 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1324 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1325 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1326 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1322, %1327 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1328, %__auto.blk.16.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1329 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1331 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_546 = tensor.collapse_shape %1330 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1332 = linalg.matmul ins(%collapsed_546, %1331 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1333 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1332 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1334 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1335 = linalg.matmul ins(%collapsed_546, %1334 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1336 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1335 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1337 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1338 = linalg.matmul ins(%collapsed_546, %1337 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1339 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1338 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_547 = tensor.expand_shape %1333 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_548 = tensor.expand_shape %1336 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_549 = tensor.reshape %expanded_547(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_549[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_549[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_550 = tensor.reshape %expanded_548(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_550[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_550[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1340, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1342 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_551 = tensor.collapse_shape %1343 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1341, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1344 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_552 = tensor.collapse_shape %1345 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_551 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_552 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1348 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c32_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_553 = tensor.expand_shape %1347 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_554 = tensor.collapse_shape %1348 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_555 = tensor.collapse_shape %expanded_553 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_556 = tensor.expand_shape %collapsed_554 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_557 = tensor.expand_shape %collapsed_555 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1349 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_556 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1350 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_557, %1349 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1277 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1351 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1348 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_558 = tensor.collapse_shape %1351 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_559 = tensor.expand_shape %collapsed_558 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_560 = tensor.expand_shape %1339 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1352 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_559 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1353 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_560, %1352 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1350 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_561 = tensor.expand_shape %1347 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_561 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_562 = tensor.collapse_shape %1354 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_563 = tensor.expand_shape %1339 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_563 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_564 = tensor.collapse_shape %1355 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1346 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_562 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_564 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1357 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_565 = tensor.collapse_shape %1356 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_566 = tensor.collapse_shape %1359 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1360 = linalg.batch_matmul ins(%collapsed_565, %collapsed_566 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_567 = tensor.reshape %1360(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_567 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1361, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1362 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1364:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1363 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_568 = tensor.expand_shape %1364#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1363, %expanded_568 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1365 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1366 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1366, %1367 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1368 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_569 = tensor.reshape %1369(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_570 = tensor.collapse_shape %1358 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1370 = linalg.batch_matmul ins(%reshape_569, %collapsed_570 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_571 = tensor.expand_shape %1370 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_571 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1372 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_572 = tensor.collapse_shape %1371 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1373 = linalg.matmul ins(%collapsed_572, %1372 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1374 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1373 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_573 = tensor.expand_shape %1374 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1321, %expanded_573 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1376 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1375 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1376 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1377 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1378 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1379 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1380 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1376, %1381 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1382, %__auto.blk.16.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1383 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1385 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_574 = tensor.collapse_shape %1384 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1386 = linalg.matmul ins(%collapsed_574, %1385 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1387 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1386 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_575 = tensor.expand_shape %1387 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_575 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1388, %expanded_575 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1390 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1391 = linalg.matmul ins(%collapsed_574, %1390 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1392 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1391 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_576 = tensor.expand_shape %1392 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1389, %expanded_576 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1394 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_577 = tensor.collapse_shape %1393 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1395 = linalg.matmul ins(%collapsed_577, %1394 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1396 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1395 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_578 = tensor.expand_shape %1396 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1397 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1375, %expanded_578 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1397 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1398 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1399 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1400 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1401 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1403 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1402 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1398, %1403 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1404, %__auto.blk.17.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1405 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1407 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_579 = tensor.collapse_shape %1406 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1408 = linalg.matmul ins(%collapsed_579, %1407 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1409 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1408 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1410 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1411 = linalg.matmul ins(%collapsed_579, %1410 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1412 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1411 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1413 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1414 = linalg.matmul ins(%collapsed_579, %1413 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1415 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1414 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_580 = tensor.expand_shape %1409 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_581 = tensor.expand_shape %1412 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_582 = tensor.reshape %expanded_580(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_582[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_582[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_583 = tensor.reshape %expanded_581(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_583[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_583[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1416, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1418 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_584 = tensor.collapse_shape %1419 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1417, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1420 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_585 = tensor.collapse_shape %1421 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_584 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_585 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1424 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c34_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_586 = tensor.expand_shape %1423 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_587 = tensor.collapse_shape %1424 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_588 = tensor.collapse_shape %expanded_586 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_589 = tensor.expand_shape %collapsed_587 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_590 = tensor.expand_shape %collapsed_588 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1425 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_589 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1426 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_590, %1425 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1353 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1427 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1424 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_591 = tensor.collapse_shape %1427 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_592 = tensor.expand_shape %collapsed_591 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_593 = tensor.expand_shape %1415 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1428 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_592 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1429 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_593, %1428 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1426 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_594 = tensor.expand_shape %1423 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_594 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_595 = tensor.collapse_shape %1430 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_596 = tensor.expand_shape %1415 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_596 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_597 = tensor.collapse_shape %1431 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1422 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_595 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_597 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1433 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_598 = tensor.collapse_shape %1432 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_599 = tensor.collapse_shape %1435 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1436 = linalg.batch_matmul ins(%collapsed_598, %collapsed_599 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_600 = tensor.reshape %1436(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_600 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1437, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1438 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1440:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1439 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_601 = tensor.expand_shape %1440#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1439, %expanded_601 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1441 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1442 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1442, %1443 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1444 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_602 = tensor.reshape %1445(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_603 = tensor.collapse_shape %1434 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1446 = linalg.batch_matmul ins(%reshape_602, %collapsed_603 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_604 = tensor.expand_shape %1446 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_604 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1448 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_605 = tensor.collapse_shape %1447 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1449 = linalg.matmul ins(%collapsed_605, %1448 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1450 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1449 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_606 = tensor.expand_shape %1450 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1397, %expanded_606 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1451 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1452 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1454 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1453 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1454 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1455 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1456 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1452, %1457 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1458, %__auto.blk.17.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1459 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1461 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_607 = tensor.collapse_shape %1460 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1462 = linalg.matmul ins(%collapsed_607, %1461 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1463 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1462 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_608 = tensor.expand_shape %1463 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_608 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1464, %expanded_608 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1466 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1467 = linalg.matmul ins(%collapsed_607, %1466 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1468 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1467 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_609 = tensor.expand_shape %1468 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1465, %expanded_609 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1470 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_610 = tensor.collapse_shape %1469 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1471 = linalg.matmul ins(%collapsed_610, %1470 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1472 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1471 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_611 = tensor.expand_shape %1472 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1473 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1451, %expanded_611 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1474 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1473 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1475 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1474 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1475 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1476 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1477 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1478 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1474, %1479 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1480, %__auto.blk.18.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1481 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1483 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_612 = tensor.collapse_shape %1482 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1484 = linalg.matmul ins(%collapsed_612, %1483 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1485 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1484 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1486 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1487 = linalg.matmul ins(%collapsed_612, %1486 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1488 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1487 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1489 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1490 = linalg.matmul ins(%collapsed_612, %1489 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1491 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1490 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_613 = tensor.expand_shape %1485 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_614 = tensor.expand_shape %1488 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_615 = tensor.reshape %expanded_613(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1492 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_615[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_615[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_616 = tensor.reshape %expanded_614(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_616[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_616[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1494 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1492, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1494 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_617 = tensor.collapse_shape %1495 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1493, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1496 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_618 = tensor.collapse_shape %1497 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_617 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_618 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1500 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c36_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_619 = tensor.expand_shape %1499 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_620 = tensor.collapse_shape %1500 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_621 = tensor.collapse_shape %expanded_619 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_622 = tensor.expand_shape %collapsed_620 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_623 = tensor.expand_shape %collapsed_621 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1501 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_622 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1502 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_623, %1501 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1429 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1503 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1500 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_624 = tensor.collapse_shape %1503 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_625 = tensor.expand_shape %collapsed_624 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_626 = tensor.expand_shape %1491 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1504 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_625 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1505 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_626, %1504 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1502 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_627 = tensor.expand_shape %1499 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_627 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_628 = tensor.collapse_shape %1506 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_629 = tensor.expand_shape %1491 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_629 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_630 = tensor.collapse_shape %1507 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1498 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_628 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_630 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1509 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_631 = tensor.collapse_shape %1508 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_632 = tensor.collapse_shape %1511 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1512 = linalg.batch_matmul ins(%collapsed_631, %collapsed_632 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_633 = tensor.reshape %1512(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_633 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1513, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1514 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1516:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1515 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_634 = tensor.expand_shape %1516#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1515, %expanded_634 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1517 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1518 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1518, %1519 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1520 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_635 = tensor.reshape %1521(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_636 = tensor.collapse_shape %1510 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1522 = linalg.batch_matmul ins(%reshape_635, %collapsed_636 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_637 = tensor.expand_shape %1522 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_637 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1524 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_638 = tensor.collapse_shape %1523 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1525 = linalg.matmul ins(%collapsed_638, %1524 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1526 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1525 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_639 = tensor.expand_shape %1526 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1473, %expanded_639 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1528 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1527 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1528 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1529 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1530 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1532 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1531 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1532 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1528, %1533 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1534, %__auto.blk.18.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1535 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1537 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_640 = tensor.collapse_shape %1536 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1538 = linalg.matmul ins(%collapsed_640, %1537 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1539 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1538 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_641 = tensor.expand_shape %1539 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_641 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1540, %expanded_641 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1542 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1543 = linalg.matmul ins(%collapsed_640, %1542 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1544 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1543 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_642 = tensor.expand_shape %1544 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1541, %expanded_642 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1546 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_643 = tensor.collapse_shape %1545 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1547 = linalg.matmul ins(%collapsed_643, %1546 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1548 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1547 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_644 = tensor.expand_shape %1548 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1549 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1527, %expanded_644 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1550 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1549 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1550 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1551 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1552 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1554 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1553 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1554 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1550, %1555 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1556, %__auto.blk.19.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1557 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1559 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_645 = tensor.collapse_shape %1558 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1560 = linalg.matmul ins(%collapsed_645, %1559 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1561 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1560 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1562 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1563 = linalg.matmul ins(%collapsed_645, %1562 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1564 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1563 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1565 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1566 = linalg.matmul ins(%collapsed_645, %1565 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1567 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1566 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_646 = tensor.expand_shape %1561 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_647 = tensor.expand_shape %1564 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_648 = tensor.reshape %expanded_646(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1568 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_648[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_648[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_649 = tensor.reshape %expanded_647(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_649[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_649[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1570 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1568, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1570 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_650 = tensor.collapse_shape %1571 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1572 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1569, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1573 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1572 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_651 = tensor.collapse_shape %1573 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_650 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_651 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1576 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c38_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_652 = tensor.expand_shape %1575 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_653 = tensor.collapse_shape %1576 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_654 = tensor.collapse_shape %expanded_652 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_655 = tensor.expand_shape %collapsed_653 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_656 = tensor.expand_shape %collapsed_654 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1577 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_655 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1578 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_656, %1577 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1505 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1579 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1576 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_657 = tensor.collapse_shape %1579 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_658 = tensor.expand_shape %collapsed_657 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_659 = tensor.expand_shape %1567 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1580 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_658 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1581 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_659, %1580 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1578 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_660 = tensor.expand_shape %1575 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_660 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_661 = tensor.collapse_shape %1582 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_662 = tensor.expand_shape %1567 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_662 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_663 = tensor.collapse_shape %1583 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1574 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_661 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_663 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1585 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_664 = tensor.collapse_shape %1584 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_665 = tensor.collapse_shape %1587 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1588 = linalg.batch_matmul ins(%collapsed_664, %collapsed_665 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_666 = tensor.reshape %1588(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1589 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_666 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1590 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1589, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1590 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1592:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1591 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_667 = tensor.expand_shape %1592#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1593 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1591, %expanded_667 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1593 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1594 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1594, %1595 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1596 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_668 = tensor.reshape %1597(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_669 = tensor.collapse_shape %1586 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1598 = linalg.batch_matmul ins(%reshape_668, %collapsed_669 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_670 = tensor.expand_shape %1598 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_670 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1600 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_671 = tensor.collapse_shape %1599 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1601 = linalg.matmul ins(%collapsed_671, %1600 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1602 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1601 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_672 = tensor.expand_shape %1602 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1549, %expanded_672 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1603 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1605 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1604 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1606 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1605 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1606 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1607 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1608 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1604, %1609 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1610, %__auto.blk.19.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1612 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1611 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1613 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_673 = tensor.collapse_shape %1612 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1614 = linalg.matmul ins(%collapsed_673, %1613 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1615 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1614 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_674 = tensor.expand_shape %1615 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_674 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1616, %expanded_674 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1618 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1619 = linalg.matmul ins(%collapsed_673, %1618 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1620 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1619 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_675 = tensor.expand_shape %1620 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1617, %expanded_675 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1622 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_676 = tensor.collapse_shape %1621 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1623 = linalg.matmul ins(%collapsed_676, %1622 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1624 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1623 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_677 = tensor.expand_shape %1624 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1603, %expanded_677 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1626 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1625 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1627 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1626 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1627 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1628 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1629 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1630 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1626, %1631 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1632, %__auto.blk.20.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1633 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1635 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_678 = tensor.collapse_shape %1634 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1636 = linalg.matmul ins(%collapsed_678, %1635 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1637 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1636 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1638 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1639 = linalg.matmul ins(%collapsed_678, %1638 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1640 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1639 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1641 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1642 = linalg.matmul ins(%collapsed_678, %1641 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1643 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1642 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_679 = tensor.expand_shape %1637 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_680 = tensor.expand_shape %1640 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_681 = tensor.reshape %expanded_679(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_681[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_681[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_682 = tensor.reshape %expanded_680(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_682[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_682[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1646 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1644, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1646 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_683 = tensor.collapse_shape %1647 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1648 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1645, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1648 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_684 = tensor.collapse_shape %1649 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_683 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_684 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1652 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c40_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_685 = tensor.expand_shape %1651 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_686 = tensor.collapse_shape %1652 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_687 = tensor.collapse_shape %expanded_685 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_688 = tensor.expand_shape %collapsed_686 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_689 = tensor.expand_shape %collapsed_687 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1653 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_688 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1654 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_689, %1653 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1581 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1655 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1652 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_690 = tensor.collapse_shape %1655 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_691 = tensor.expand_shape %collapsed_690 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_692 = tensor.expand_shape %1643 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1656 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_691 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1657 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_692, %1656 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1654 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_693 = tensor.expand_shape %1651 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_693 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_694 = tensor.collapse_shape %1658 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_695 = tensor.expand_shape %1643 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_695 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_696 = tensor.collapse_shape %1659 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1650 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_694 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_696 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1661 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_697 = tensor.collapse_shape %1660 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_698 = tensor.collapse_shape %1663 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1664 = linalg.batch_matmul ins(%collapsed_697, %collapsed_698 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_699 = tensor.reshape %1664(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_699 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1666 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1665, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1667 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1666 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1668:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1667 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_700 = tensor.expand_shape %1668#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1667, %expanded_700 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1670 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1669 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1670 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1670, %1671 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1672 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_701 = tensor.reshape %1673(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_702 = tensor.collapse_shape %1662 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1674 = linalg.batch_matmul ins(%reshape_701, %collapsed_702 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_703 = tensor.expand_shape %1674 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_703 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1676 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_704 = tensor.collapse_shape %1675 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1677 = linalg.matmul ins(%collapsed_704, %1676 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1678 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1677 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_705 = tensor.expand_shape %1678 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1625, %expanded_705 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1679 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1680 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1681 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1682 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1683 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1684 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1686 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1680, %1685 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1687 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1686, %__auto.blk.20.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1688 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1687 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1689 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_706 = tensor.collapse_shape %1688 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1690 = linalg.matmul ins(%collapsed_706, %1689 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1691 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1690 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_707 = tensor.expand_shape %1691 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_707 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1692, %expanded_707 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1694 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1695 = linalg.matmul ins(%collapsed_706, %1694 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1696 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1695 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_708 = tensor.expand_shape %1696 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1693, %expanded_708 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1698 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_709 = tensor.collapse_shape %1697 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1699 = linalg.matmul ins(%collapsed_709, %1698 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1700 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1699 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_710 = tensor.expand_shape %1700 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1679, %expanded_710 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1702 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1701 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1702 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1704 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1703 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1704 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1705 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1706 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1708 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1702, %1707 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1708, %__auto.blk.21.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1709 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1711 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_711 = tensor.collapse_shape %1710 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1712 = linalg.matmul ins(%collapsed_711, %1711 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1713 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1712 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1714 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1715 = linalg.matmul ins(%collapsed_711, %1714 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1716 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1715 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1717 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1718 = linalg.matmul ins(%collapsed_711, %1717 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1719 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1718 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_712 = tensor.expand_shape %1713 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_713 = tensor.expand_shape %1716 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_714 = tensor.reshape %expanded_712(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_714[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_714[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_715 = tensor.reshape %expanded_713(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_715[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_715[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1720, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1722 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_716 = tensor.collapse_shape %1723 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1724 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1721, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1724 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_717 = tensor.collapse_shape %1725 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1726 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_716 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_717 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1728 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c42_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_718 = tensor.expand_shape %1727 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_719 = tensor.collapse_shape %1728 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_720 = tensor.collapse_shape %expanded_718 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_721 = tensor.expand_shape %collapsed_719 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_722 = tensor.expand_shape %collapsed_720 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1729 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_721 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1730 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_722, %1729 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1657 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1731 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1728 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_723 = tensor.collapse_shape %1731 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_724 = tensor.expand_shape %collapsed_723 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_725 = tensor.expand_shape %1719 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1732 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_724 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1733 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_725, %1732 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1730 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_726 = tensor.expand_shape %1727 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_726 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_727 = tensor.collapse_shape %1734 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_728 = tensor.expand_shape %1719 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_728 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_729 = tensor.collapse_shape %1735 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1726 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_727 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_729 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1737 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_730 = tensor.collapse_shape %1736 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_731 = tensor.collapse_shape %1739 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1740 = linalg.batch_matmul ins(%collapsed_730, %collapsed_731 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_732 = tensor.reshape %1740(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1741 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_732 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1741, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1743 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1742 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1744:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1743 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_733 = tensor.expand_shape %1744#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1743, %expanded_733 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1746 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1745 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1746 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1746, %1747 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1748 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_734 = tensor.reshape %1749(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_735 = tensor.collapse_shape %1738 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1750 = linalg.batch_matmul ins(%reshape_734, %collapsed_735 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_736 = tensor.expand_shape %1750 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_736 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1752 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_737 = tensor.collapse_shape %1751 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1753 = linalg.matmul ins(%collapsed_737, %1752 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1754 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1753 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_738 = tensor.expand_shape %1754 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1701, %expanded_738 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1755 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1756 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1757 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1758 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1759 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1760 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1756, %1761 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1762, %__auto.blk.21.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1764 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1763 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1765 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_739 = tensor.collapse_shape %1764 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1766 = linalg.matmul ins(%collapsed_739, %1765 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1767 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1766 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_740 = tensor.expand_shape %1767 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1768 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_740 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1768, %expanded_740 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1770 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1771 = linalg.matmul ins(%collapsed_739, %1770 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1772 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1771 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_741 = tensor.expand_shape %1772 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1769, %expanded_741 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1774 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_742 = tensor.collapse_shape %1773 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1775 = linalg.matmul ins(%collapsed_742, %1774 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1776 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1775 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_743 = tensor.expand_shape %1776 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1755, %expanded_743 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1777 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1779 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1780 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1781 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1782 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778, %1783 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1785 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1784, %__auto.blk.22.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1786 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1785 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1787 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_744 = tensor.collapse_shape %1786 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1788 = linalg.matmul ins(%collapsed_744, %1787 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1789 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1788 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1790 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1791 = linalg.matmul ins(%collapsed_744, %1790 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1792 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1791 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1793 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1794 = linalg.matmul ins(%collapsed_744, %1793 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1795 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1794 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_745 = tensor.expand_shape %1789 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_746 = tensor.expand_shape %1792 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_747 = tensor.reshape %expanded_745(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_747[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_747[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_748 = tensor.reshape %expanded_746(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_748[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_748[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1796, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1798 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_749 = tensor.collapse_shape %1799 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1800 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1797, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1800 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_750 = tensor.collapse_shape %1801 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1802 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_749 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1803 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_750 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1804 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c44_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_751 = tensor.expand_shape %1803 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_752 = tensor.collapse_shape %1804 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_753 = tensor.collapse_shape %expanded_751 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_754 = tensor.expand_shape %collapsed_752 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_755 = tensor.expand_shape %collapsed_753 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1805 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_754 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1806 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_755, %1805 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1733 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1807 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1804 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_756 = tensor.collapse_shape %1807 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_757 = tensor.expand_shape %collapsed_756 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_758 = tensor.expand_shape %1795 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1808 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_757 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1809 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_758, %1808 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1806 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_759 = tensor.expand_shape %1803 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_759 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_760 = tensor.collapse_shape %1810 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_761 = tensor.expand_shape %1795 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_761 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_762 = tensor.collapse_shape %1811 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1802 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_760 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_762 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1813 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_763 = tensor.collapse_shape %1812 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_764 = tensor.collapse_shape %1815 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1816 = linalg.batch_matmul ins(%collapsed_763, %collapsed_764 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_765 = tensor.reshape %1816(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_765 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1817, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1819 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1818 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1820:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1819 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_766 = tensor.expand_shape %1820#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1819, %expanded_766 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1822 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1821 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1822 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1824 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1822, %1823 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1824 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_767 = tensor.reshape %1825(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_768 = tensor.collapse_shape %1814 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1826 = linalg.batch_matmul ins(%reshape_767, %collapsed_768 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_769 = tensor.expand_shape %1826 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_769 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1828 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_770 = tensor.collapse_shape %1827 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1829 = linalg.matmul ins(%collapsed_770, %1828 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1830 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1829 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_771 = tensor.expand_shape %1830 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1777, %expanded_771 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1832 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1831 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1832 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1833 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1834 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1835 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1836 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1838 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1832, %1837 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1838, %__auto.blk.22.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1839 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1841 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_772 = tensor.collapse_shape %1840 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1842 = linalg.matmul ins(%collapsed_772, %1841 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1843 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1842 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_773 = tensor.expand_shape %1843 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1844 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_773 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1844, %expanded_773 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1846 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1847 = linalg.matmul ins(%collapsed_772, %1846 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1848 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1847 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_774 = tensor.expand_shape %1848 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1845, %expanded_774 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1850 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_775 = tensor.collapse_shape %1849 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1851 = linalg.matmul ins(%collapsed_775, %1850 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1852 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1851 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_776 = tensor.expand_shape %1852 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1831, %expanded_776 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1853 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1854 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1855 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1856 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1857 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1858 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1854, %1859 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1860, %__auto.blk.23.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1862 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1861 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1863 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_777 = tensor.collapse_shape %1862 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1864 = linalg.matmul ins(%collapsed_777, %1863 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1865 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1864 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1866 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1867 = linalg.matmul ins(%collapsed_777, %1866 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1868 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1867 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1869 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1870 = linalg.matmul ins(%collapsed_777, %1869 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1871 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1870 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_778 = tensor.expand_shape %1865 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_779 = tensor.expand_shape %1868 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_780 = tensor.reshape %expanded_778(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_780[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_780[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_781 = tensor.reshape %expanded_779(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_781[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_781[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1872, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1874 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_782 = tensor.collapse_shape %1875 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1873, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1876 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_783 = tensor.collapse_shape %1877 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1878 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_782 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_783 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1880 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c46_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_784 = tensor.expand_shape %1879 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_785 = tensor.collapse_shape %1880 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_786 = tensor.collapse_shape %expanded_784 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_787 = tensor.expand_shape %collapsed_785 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_788 = tensor.expand_shape %collapsed_786 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1881 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_787 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1882 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_788, %1881 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1809 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1883 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1880 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_789 = tensor.collapse_shape %1883 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_790 = tensor.expand_shape %collapsed_789 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_791 = tensor.expand_shape %1871 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1884 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_790 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1885 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_791, %1884 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1882 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_792 = tensor.expand_shape %1879 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1886 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_792 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_793 = tensor.collapse_shape %1886 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_794 = tensor.expand_shape %1871 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1887 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_794 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_795 = tensor.collapse_shape %1887 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1878 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_793 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_795 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1889 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_796 = tensor.collapse_shape %1888 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_797 = tensor.collapse_shape %1891 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1892 = linalg.batch_matmul ins(%collapsed_796, %collapsed_797 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_798 = tensor.reshape %1892(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_798 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1893, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1894 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1896:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1895 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_799 = tensor.expand_shape %1896#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1897 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1895, %expanded_799 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1897 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1898 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1900 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1898, %1899 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1900 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_800 = tensor.reshape %1901(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_801 = tensor.collapse_shape %1890 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1902 = linalg.batch_matmul ins(%reshape_800, %collapsed_801 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_802 = tensor.expand_shape %1902 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_802 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1904 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_803 = tensor.collapse_shape %1903 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1905 = linalg.matmul ins(%collapsed_803, %1904 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1906 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1905 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_804 = tensor.expand_shape %1906 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1853, %expanded_804 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1907 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1908 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1909 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1910 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1911 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1912 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1914 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1908, %1913 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1914, %__auto.blk.23.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1915 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1917 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_805 = tensor.collapse_shape %1916 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1918 = linalg.matmul ins(%collapsed_805, %1917 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1919 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1918 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_806 = tensor.expand_shape %1919 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1920 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_806 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1920, %expanded_806 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1922 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1923 = linalg.matmul ins(%collapsed_805, %1922 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1924 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1923 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_807 = tensor.expand_shape %1924 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1921, %expanded_807 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1926 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_808 = tensor.collapse_shape %1925 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %1927 = linalg.matmul ins(%collapsed_808, %1926 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1928 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1927 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_809 = tensor.expand_shape %1928 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1907, %expanded_809 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1929 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1930 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1931 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1932 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1933 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1935 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1934 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1930, %1935 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1936, %__auto.blk.24.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1938 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1937 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1939 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_810 = tensor.collapse_shape %1938 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1940 = linalg.matmul ins(%collapsed_810, %1939 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1941 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1940 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %1942 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1943 = linalg.matmul ins(%collapsed_810, %1942 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1944 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1943 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %1945 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1946 = linalg.matmul ins(%collapsed_810, %1945 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %1947 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1946 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_811 = tensor.expand_shape %1941 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_812 = tensor.expand_shape %1944 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_813 = tensor.reshape %expanded_811(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %1948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_813[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_813[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_814 = tensor.reshape %expanded_812(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %1949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_814[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_814[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %1950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1948, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %1951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1950 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_815 = tensor.collapse_shape %1951 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %1952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1949, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %1953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1952 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_816 = tensor.collapse_shape %1953 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %1954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_815 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %1955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_816 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %1956 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c48_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_817 = tensor.expand_shape %1955 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_818 = tensor.collapse_shape %1956 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_819 = tensor.collapse_shape %expanded_817 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_820 = tensor.expand_shape %collapsed_818 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_821 = tensor.expand_shape %collapsed_819 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %1957 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_820 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1958 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_821, %1957 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1885 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %1959 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1956 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_822 = tensor.collapse_shape %1959 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_823 = tensor.expand_shape %collapsed_822 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_824 = tensor.expand_shape %1947 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %1960 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_823 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %1961 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_824, %1960 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1958 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_825 = tensor.expand_shape %1955 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1962 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_825 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_826 = tensor.collapse_shape %1962 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_827 = tensor.expand_shape %1947 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %1963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_827 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_828 = tensor.collapse_shape %1963 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1964 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1954 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1965 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_826 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_828 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1965 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_829 = tensor.collapse_shape %1964 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_830 = tensor.collapse_shape %1967 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1968 = linalg.batch_matmul ins(%collapsed_829, %collapsed_830 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_831 = tensor.reshape %1968(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %1969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_831 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %1970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1969, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %1971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1970 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1972:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1971 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_832 = tensor.expand_shape %1972#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %1973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1971, %expanded_832 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1973 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1974 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %1976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1974, %1975 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %1977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1976 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_833 = tensor.reshape %1977(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_834 = tensor.collapse_shape %1966 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1978 = linalg.batch_matmul ins(%reshape_833, %collapsed_834 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_835 = tensor.expand_shape %1978 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %1979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_835 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %1980 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_836 = tensor.collapse_shape %1979 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %1981 = linalg.matmul ins(%collapsed_836, %1980 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %1982 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1981 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_837 = tensor.expand_shape %1982 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %1983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1929, %expanded_837 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1984 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1983 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1985 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1984 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1985 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1986 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1987 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1988 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %1990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1984, %1989 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1990, %__auto.blk.24.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %1992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1991 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %1993 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_838 = tensor.collapse_shape %1992 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %1994 = linalg.matmul ins(%collapsed_838, %1993 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %1995 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1994 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_839 = tensor.expand_shape %1995 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %1996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_839 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %1997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1996, %expanded_839 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %1998 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1999 = linalg.matmul ins(%collapsed_838, %1998 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2000 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1999 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_840 = tensor.expand_shape %2000 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1997, %expanded_840 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2002 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_841 = tensor.collapse_shape %2001 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2003 = linalg.matmul ins(%collapsed_841, %2002 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2004 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2003 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_842 = tensor.expand_shape %2004 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1983, %expanded_842 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2005 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2006 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2007 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2008 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2009 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2011 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2010 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2006, %2011 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2012, %__auto.blk.25.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2013 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2015 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_843 = tensor.collapse_shape %2014 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2016 = linalg.matmul ins(%collapsed_843, %2015 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2017 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2016 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2018 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2019 = linalg.matmul ins(%collapsed_843, %2018 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2020 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2019 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2021 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2022 = linalg.matmul ins(%collapsed_843, %2021 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2023 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2022 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_844 = tensor.expand_shape %2017 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_845 = tensor.expand_shape %2020 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_846 = tensor.reshape %expanded_844(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_846[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_846[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_847 = tensor.reshape %expanded_845(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_847[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_847[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2024, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2026 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_848 = tensor.collapse_shape %2027 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2028 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2025, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2028 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_849 = tensor.collapse_shape %2029 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_848 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_849 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2032 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c50_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_850 = tensor.expand_shape %2031 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_851 = tensor.collapse_shape %2032 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_852 = tensor.collapse_shape %expanded_850 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_853 = tensor.expand_shape %collapsed_851 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_854 = tensor.expand_shape %collapsed_852 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2033 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_853 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2034 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_854, %2033 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%1961 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2035 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2032 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_855 = tensor.collapse_shape %2035 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_856 = tensor.expand_shape %collapsed_855 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_857 = tensor.expand_shape %2023 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2036 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_856 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2037 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_857, %2036 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2034 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_858 = tensor.expand_shape %2031 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2038 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_858 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_859 = tensor.collapse_shape %2038 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_860 = tensor.expand_shape %2023 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_860 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_861 = tensor.collapse_shape %2039 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2040 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2030 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_859 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_861 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2041 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_862 = tensor.collapse_shape %2040 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_863 = tensor.collapse_shape %2043 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2044 = linalg.batch_matmul ins(%collapsed_862, %collapsed_863 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_864 = tensor.reshape %2044(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_864 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2045, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2046 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2048:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2047 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_865 = tensor.expand_shape %2048#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2047, %expanded_865 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2049 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2050 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2050, %2051 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2052 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_866 = tensor.reshape %2053(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_867 = tensor.collapse_shape %2042 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2054 = linalg.batch_matmul ins(%reshape_866, %collapsed_867 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_868 = tensor.expand_shape %2054 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_868 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2056 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_869 = tensor.collapse_shape %2055 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2057 = linalg.matmul ins(%collapsed_869, %2056 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2058 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2057 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_870 = tensor.expand_shape %2058 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2005, %expanded_870 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2060 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2059 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2060 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2062 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2061 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2062 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2063 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2064 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2060, %2065 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2066, %__auto.blk.25.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2067 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2069 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_871 = tensor.collapse_shape %2068 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2070 = linalg.matmul ins(%collapsed_871, %2069 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2071 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2070 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_872 = tensor.expand_shape %2071 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_872 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2072, %expanded_872 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2074 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2075 = linalg.matmul ins(%collapsed_871, %2074 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2076 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2075 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_873 = tensor.expand_shape %2076 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2073, %expanded_873 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2078 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_874 = tensor.collapse_shape %2077 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2079 = linalg.matmul ins(%collapsed_874, %2078 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2080 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2079 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_875 = tensor.expand_shape %2080 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2059, %expanded_875 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2082 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2081 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2083 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2082 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2083 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2084 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2085 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2086 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2082, %2087 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2088, %__auto.blk.26.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2089 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2091 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_876 = tensor.collapse_shape %2090 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2092 = linalg.matmul ins(%collapsed_876, %2091 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2093 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2092 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2094 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2095 = linalg.matmul ins(%collapsed_876, %2094 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2096 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2095 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2097 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2098 = linalg.matmul ins(%collapsed_876, %2097 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2099 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2098 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_877 = tensor.expand_shape %2093 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_878 = tensor.expand_shape %2096 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_879 = tensor.reshape %expanded_877(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_879[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_879[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_880 = tensor.reshape %expanded_878(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_880[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_880[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2100, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2102 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_881 = tensor.collapse_shape %2103 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2101, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2104 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_882 = tensor.collapse_shape %2105 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2106 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_881 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_882 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2108 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c52_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_883 = tensor.expand_shape %2107 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_884 = tensor.collapse_shape %2108 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_885 = tensor.collapse_shape %expanded_883 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_886 = tensor.expand_shape %collapsed_884 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_887 = tensor.expand_shape %collapsed_885 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2109 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_886 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2110 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_887, %2109 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2037 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2111 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2108 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_888 = tensor.collapse_shape %2111 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_889 = tensor.expand_shape %collapsed_888 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_890 = tensor.expand_shape %2099 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2112 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_889 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2113 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_890, %2112 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2110 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_891 = tensor.expand_shape %2107 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_891 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_892 = tensor.collapse_shape %2114 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_893 = tensor.expand_shape %2099 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_893 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_894 = tensor.collapse_shape %2115 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2116 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2106 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_892 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_894 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2117 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_895 = tensor.collapse_shape %2116 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_896 = tensor.collapse_shape %2119 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2120 = linalg.batch_matmul ins(%collapsed_895, %collapsed_896 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_897 = tensor.reshape %2120(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_897 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2121, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2122 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2124:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2123 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_898 = tensor.expand_shape %2124#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2123, %expanded_898 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2125 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2126 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2126, %2127 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2128 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_899 = tensor.reshape %2129(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_900 = tensor.collapse_shape %2118 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2130 = linalg.batch_matmul ins(%reshape_899, %collapsed_900 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_901 = tensor.expand_shape %2130 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_901 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2132 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_902 = tensor.collapse_shape %2131 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2133 = linalg.matmul ins(%collapsed_902, %2132 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2134 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2133 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_903 = tensor.expand_shape %2134 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2081, %expanded_903 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2136 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2135 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2136 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2137 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2138 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2139 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2140 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2136, %2141 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142, %__auto.blk.26.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2143 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2145 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_904 = tensor.collapse_shape %2144 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2146 = linalg.matmul ins(%collapsed_904, %2145 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2147 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2146 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_905 = tensor.expand_shape %2147 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_905 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2148, %expanded_905 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2150 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2151 = linalg.matmul ins(%collapsed_904, %2150 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2152 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2151 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_906 = tensor.expand_shape %2152 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2149, %expanded_906 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2154 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_907 = tensor.collapse_shape %2153 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2155 = linalg.matmul ins(%collapsed_907, %2154 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2156 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2155 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_908 = tensor.expand_shape %2156 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2135, %expanded_908 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2158 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2157 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2158 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2159 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2160 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2161 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2162 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2158, %2163 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2164, %__auto.blk.27.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2165 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2167 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_909 = tensor.collapse_shape %2166 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2168 = linalg.matmul ins(%collapsed_909, %2167 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2169 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2168 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2170 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2171 = linalg.matmul ins(%collapsed_909, %2170 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2172 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2171 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2173 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2174 = linalg.matmul ins(%collapsed_909, %2173 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2175 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2174 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_910 = tensor.expand_shape %2169 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_911 = tensor.expand_shape %2172 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_912 = tensor.reshape %expanded_910(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_912[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_912[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_913 = tensor.reshape %expanded_911(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_913[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_913[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2176, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2178 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_914 = tensor.collapse_shape %2179 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2177, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2180 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_915 = tensor.collapse_shape %2181 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_914 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_915 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2184 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c54_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_916 = tensor.expand_shape %2183 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_917 = tensor.collapse_shape %2184 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_918 = tensor.collapse_shape %expanded_916 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_919 = tensor.expand_shape %collapsed_917 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_920 = tensor.expand_shape %collapsed_918 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2185 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_919 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2186 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_920, %2185 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2113 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2187 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2184 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_921 = tensor.collapse_shape %2187 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_922 = tensor.expand_shape %collapsed_921 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_923 = tensor.expand_shape %2175 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2188 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_922 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2189 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_923, %2188 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2186 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_924 = tensor.expand_shape %2183 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_924 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_925 = tensor.collapse_shape %2190 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_926 = tensor.expand_shape %2175 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_926 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_927 = tensor.collapse_shape %2191 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2182 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_925 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_927 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2193 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_928 = tensor.collapse_shape %2192 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_929 = tensor.collapse_shape %2195 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2196 = linalg.batch_matmul ins(%collapsed_928, %collapsed_929 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_930 = tensor.reshape %2196(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_930 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2197, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2198 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2200:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2199 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_931 = tensor.expand_shape %2200#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2199, %expanded_931 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2201 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2202 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2202, %2203 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2204 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_932 = tensor.reshape %2205(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_933 = tensor.collapse_shape %2194 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2206 = linalg.batch_matmul ins(%reshape_932, %collapsed_933 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_934 = tensor.expand_shape %2206 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_934 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2208 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_935 = tensor.collapse_shape %2207 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2209 = linalg.matmul ins(%collapsed_935, %2208 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2210 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2209 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_936 = tensor.expand_shape %2210 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2157, %expanded_936 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2211 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2212 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2214 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2213 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2214 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2215 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2216 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2212, %2217 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2218, %__auto.blk.27.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2219 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2221 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_937 = tensor.collapse_shape %2220 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2222 = linalg.matmul ins(%collapsed_937, %2221 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2223 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2222 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_938 = tensor.expand_shape %2223 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_938 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2224, %expanded_938 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2226 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2227 = linalg.matmul ins(%collapsed_937, %2226 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2228 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2227 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_939 = tensor.expand_shape %2228 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2225, %expanded_939 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2230 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_940 = tensor.collapse_shape %2229 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2231 = linalg.matmul ins(%collapsed_940, %2230 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2232 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2231 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_941 = tensor.expand_shape %2232 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2211, %expanded_941 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2234 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2233 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2234 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2235 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2236 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2237 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2238 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2234, %2239 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2240, %__auto.blk.28.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2241 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2243 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_942 = tensor.collapse_shape %2242 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2244 = linalg.matmul ins(%collapsed_942, %2243 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2245 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2244 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2246 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2247 = linalg.matmul ins(%collapsed_942, %2246 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2248 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2247 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2249 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2250 = linalg.matmul ins(%collapsed_942, %2249 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2251 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2250 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_943 = tensor.expand_shape %2245 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_944 = tensor.expand_shape %2248 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_945 = tensor.reshape %expanded_943(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_945[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_945[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_946 = tensor.reshape %expanded_944(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_946[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_946[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2254 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2252, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2254 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_947 = tensor.collapse_shape %2255 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2256 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2253, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2256 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_948 = tensor.collapse_shape %2257 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_947 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_948 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2260 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c56_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_949 = tensor.expand_shape %2259 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_950 = tensor.collapse_shape %2260 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_951 = tensor.collapse_shape %expanded_949 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_952 = tensor.expand_shape %collapsed_950 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_953 = tensor.expand_shape %collapsed_951 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2261 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_952 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2262 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_953, %2261 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2189 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2263 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2260 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_954 = tensor.collapse_shape %2263 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_955 = tensor.expand_shape %collapsed_954 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_956 = tensor.expand_shape %2251 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2264 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_955 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2265 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_956, %2264 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2262 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_957 = tensor.expand_shape %2259 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_957 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_958 = tensor.collapse_shape %2266 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_959 = tensor.expand_shape %2251 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_959 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_960 = tensor.collapse_shape %2267 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2258 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_958 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_960 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2269 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_961 = tensor.collapse_shape %2268 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_962 = tensor.collapse_shape %2271 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2272 = linalg.batch_matmul ins(%collapsed_961, %collapsed_962 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_963 = tensor.reshape %2272(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_963 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2274 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2273, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2274 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2276:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2275 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_964 = tensor.expand_shape %2276#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2275, %expanded_964 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2278 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2277 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2278 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2278, %2279 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2280 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_965 = tensor.reshape %2281(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_966 = tensor.collapse_shape %2270 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2282 = linalg.batch_matmul ins(%reshape_965, %collapsed_966 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_967 = tensor.expand_shape %2282 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_967 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2284 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_968 = tensor.collapse_shape %2283 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2285 = linalg.matmul ins(%collapsed_968, %2284 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2286 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2285 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_969 = tensor.expand_shape %2286 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2233, %expanded_969 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2287 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2288 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2289 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2290 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2291 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2292 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2288, %2293 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2295 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2294, %__auto.blk.28.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2296 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2295 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2297 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_970 = tensor.collapse_shape %2296 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2298 = linalg.matmul ins(%collapsed_970, %2297 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2299 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2298 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_971 = tensor.expand_shape %2299 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_971 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2300, %expanded_971 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2302 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2303 = linalg.matmul ins(%collapsed_970, %2302 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2304 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2303 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_972 = tensor.expand_shape %2304 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2301, %expanded_972 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2306 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_973 = tensor.collapse_shape %2305 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2307 = linalg.matmul ins(%collapsed_973, %2306 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2308 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2307 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_974 = tensor.expand_shape %2308 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2287, %expanded_974 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2309 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2310 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2312 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2311 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2312 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2313 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2314 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2310, %2315 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2316, %__auto.blk.29.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2317 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2319 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_975 = tensor.collapse_shape %2318 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2320 = linalg.matmul ins(%collapsed_975, %2319 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2321 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2320 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2322 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2323 = linalg.matmul ins(%collapsed_975, %2322 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2324 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2323 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2325 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2326 = linalg.matmul ins(%collapsed_975, %2325 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2327 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2326 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_976 = tensor.expand_shape %2321 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_977 = tensor.expand_shape %2324 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_978 = tensor.reshape %expanded_976(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_978[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_978[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_979 = tensor.reshape %expanded_977(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_979[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_979[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2328, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2330 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_980 = tensor.collapse_shape %2331 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2332 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2329, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2332 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_981 = tensor.collapse_shape %2333 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_980 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_981 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2336 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c58_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_982 = tensor.expand_shape %2335 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_983 = tensor.collapse_shape %2336 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_984 = tensor.collapse_shape %expanded_982 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_985 = tensor.expand_shape %collapsed_983 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_986 = tensor.expand_shape %collapsed_984 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2337 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_985 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2338 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_986, %2337 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2265 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2339 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2336 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_987 = tensor.collapse_shape %2339 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_988 = tensor.expand_shape %collapsed_987 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_989 = tensor.expand_shape %2327 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2340 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_988 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2341 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_989, %2340 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2338 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_990 = tensor.expand_shape %2335 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_990 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_991 = tensor.collapse_shape %2342 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_992 = tensor.expand_shape %2327 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_992 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_993 = tensor.collapse_shape %2343 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2334 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_991 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_993 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2345 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_994 = tensor.collapse_shape %2344 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_995 = tensor.collapse_shape %2347 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2348 = linalg.batch_matmul ins(%collapsed_994, %collapsed_995 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_996 = tensor.reshape %2348(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_996 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2349, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2350 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2352:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2351 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_997 = tensor.expand_shape %2352#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2351, %expanded_997 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2354 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2353 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2354 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2354, %2355 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2356 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_998 = tensor.reshape %2357(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_999 = tensor.collapse_shape %2346 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2358 = linalg.batch_matmul ins(%reshape_998, %collapsed_999 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_1000 = tensor.expand_shape %2358 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1000 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2360 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1001 = tensor.collapse_shape %2359 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2361 = linalg.matmul ins(%collapsed_1001, %2360 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2362 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2361 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1002 = tensor.expand_shape %2362 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2309, %expanded_1002 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2363 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2364 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2365 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2366 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2367 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2368 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2364, %2369 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2370, %__auto.blk.29.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2372 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2371 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2373 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1003 = tensor.collapse_shape %2372 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2374 = linalg.matmul ins(%collapsed_1003, %2373 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2375 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2374 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1004 = tensor.expand_shape %2375 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2376 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1004 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2376, %expanded_1004 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2378 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2379 = linalg.matmul ins(%collapsed_1003, %2378 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2380 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2379 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1005 = tensor.expand_shape %2380 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2377, %expanded_1005 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2382 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1006 = tensor.collapse_shape %2381 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2383 = linalg.matmul ins(%collapsed_1006, %2382 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2384 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2383 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1007 = tensor.expand_shape %2384 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2363, %expanded_1007 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2385 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2386 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2387 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2388 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2389 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2390 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2386, %2391 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2393 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2392, %__auto.blk.30.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2394 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2393 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2395 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1008 = tensor.collapse_shape %2394 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2396 = linalg.matmul ins(%collapsed_1008, %2395 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2397 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2396 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2398 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2399 = linalg.matmul ins(%collapsed_1008, %2398 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2400 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2399 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2401 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2402 = linalg.matmul ins(%collapsed_1008, %2401 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2403 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2402 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_1009 = tensor.expand_shape %2397 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_1010 = tensor.expand_shape %2400 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_1011 = tensor.reshape %expanded_1009(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_1011[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_1011[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_1012 = tensor.reshape %expanded_1010(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_1012[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_1012[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2404, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2406 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_1013 = tensor.collapse_shape %2407 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2408 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2405, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2408 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_1014 = tensor.collapse_shape %2409 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2410 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1013 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1014 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2412 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c60_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_1015 = tensor.expand_shape %2411 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1016 = tensor.collapse_shape %2412 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1017 = tensor.collapse_shape %expanded_1015 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_1018 = tensor.expand_shape %collapsed_1016 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_1019 = tensor.expand_shape %collapsed_1017 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2413 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_1018 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2414 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_1019, %2413 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2341 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2415 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2412 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_1020 = tensor.collapse_shape %2415 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_1021 = tensor.expand_shape %collapsed_1020 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_1022 = tensor.expand_shape %2403 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2416 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_1021 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2417 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_1022, %2416 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2414 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1023 = tensor.expand_shape %2411 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1023 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1024 = tensor.collapse_shape %2418 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1025 = tensor.expand_shape %2403 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1025 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1026 = tensor.collapse_shape %2419 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2410 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1024 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1026 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2421 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1027 = tensor.collapse_shape %2420 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_1028 = tensor.collapse_shape %2423 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2424 = linalg.batch_matmul ins(%collapsed_1027, %collapsed_1028 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_1029 = tensor.reshape %2424(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_1029 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2425, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2427 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2426 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2428:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2427 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_1030 = tensor.expand_shape %2428#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2427, %expanded_1030 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2430 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2429 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2430 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2430, %2431 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2432 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_1031 = tensor.reshape %2433(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_1032 = tensor.collapse_shape %2422 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2434 = linalg.batch_matmul ins(%reshape_1031, %collapsed_1032 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_1033 = tensor.expand_shape %2434 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1033 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2436 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1034 = tensor.collapse_shape %2435 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2437 = linalg.matmul ins(%collapsed_1034, %2436 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2438 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2437 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1035 = tensor.expand_shape %2438 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2385, %expanded_1035 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2440 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2439 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2440 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2441 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2442 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2443 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2444 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2440, %2445 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2446, %__auto.blk.30.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2447 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2449 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1036 = tensor.collapse_shape %2448 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2450 = linalg.matmul ins(%collapsed_1036, %2449 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2451 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2450 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1037 = tensor.expand_shape %2451 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2452 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1037 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2452, %expanded_1037 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2454 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2455 = linalg.matmul ins(%collapsed_1036, %2454 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2456 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2455 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1038 = tensor.expand_shape %2456 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2453, %expanded_1038 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2458 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1039 = tensor.collapse_shape %2457 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2459 = linalg.matmul ins(%collapsed_1039, %2458 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2460 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2459 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1040 = tensor.expand_shape %2460 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2439, %expanded_1040 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2461 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2462 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2463 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2464 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2465 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2466 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2462, %2467 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2468, %__auto.blk.31.attn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2470 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2469 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2471 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_q.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1041 = tensor.collapse_shape %2470 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2472 = linalg.matmul ins(%collapsed_1041, %2471 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2473 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2472 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %2474 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_k.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2475 = linalg.matmul ins(%collapsed_1041, %2474 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2476 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2475 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %2477 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_v.weight : tensor<1024x4096xf16>) outs(%55 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2478 = linalg.matmul ins(%collapsed_1041, %2477 : tensor<?x4096xf16>, tensor<4096x1024xf16>) outs(%58 : tensor<?x1024xf32>) -> tensor<?x1024xf32>
    %2479 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2478 : tensor<?x1024xf32>) outs(%60 : tensor<?x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x1024xf16>
    %expanded_1042 = tensor.expand_shape %2473 [[0, 1], [2, 3]] output_shape [4, %dim, 32, 128] : tensor<?x4096xf16> into tensor<4x?x32x128xf16>
    %expanded_1043 = tensor.expand_shape %2476 [[0, 1], [2, 3]] output_shape [4, %dim, 8, 128] : tensor<?x1024xf16> into tensor<4x?x8x128xf16>
    %reshape_1044 = tensor.reshape %expanded_1042(%from_elements) : (tensor<4x?x32x128xf16>, tensor<5xi64>) -> tensor<4x?x32x64x2xf16>
    %2480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%70 : tensor<4x?x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_1044[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x32x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_1044[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x32x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x32x64xcomplex<f16>>
    %reshape_1045 = tensor.reshape %expanded_1043(%from_elements_13) : (tensor<4x?x8x128xf16>, tensor<5xi64>) -> tensor<4x?x8x64x2xf16>
    %2481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%75 : tensor<4x?x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %2559 = linalg.index 0 : index
      %2560 = linalg.index 1 : index
      %2561 = linalg.index 2 : index
      %2562 = linalg.index 3 : index
      %extracted = tensor.extract %reshape_1045[%2559, %2560, %2561, %2562, %c0] : tensor<4x?x8x64x2xf16>
      %extracted_1081 = tensor.extract %reshape_1045[%2559, %2560, %2561, %2562, %c1] : tensor<4x?x8x64x2xf16>
      %2563 = complex.create %extracted, %extracted_1081 : complex<f16>
      linalg.yield %2563 : complex<f16>
    } -> tensor<4x?x8x64xcomplex<f16>>
    %2482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2480, %expanded_16 : tensor<4x?x32x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%87 : tensor<4x?x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x32x64xcomplex<f32>>
    %2483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2482 : tensor<4x?x32x64xcomplex<f32>>) outs(%89 : tensor<4x?x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x32x64x2xf32>
    %collapsed_1046 = tensor.collapse_shape %2483 [[0], [1], [2], [3, 4]] : tensor<4x?x32x64x2xf32> into tensor<4x?x32x128xf32>
    %2484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2481, %expanded_16 : tensor<4x?x8x64xcomplex<f16>>, tensor<1x?x1x64xcomplex<f32>>) outs(%91 : tensor<4x?x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_1081: complex<f32>, %out: complex<f32>):
      %2559 = complex.re %in : complex<f16>
      %2560 = complex.im %in : complex<f16>
      %2561 = arith.extf %2559 : f16 to f32
      %2562 = arith.extf %2560 : f16 to f32
      %2563 = complex.create %2561, %2562 : complex<f32>
      %2564 = complex.mul %2563, %in_1081 : complex<f32>
      linalg.yield %2564 : complex<f32>
    } -> tensor<4x?x8x64xcomplex<f32>>
    %2485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2484 : tensor<4x?x8x64xcomplex<f32>>) outs(%93 : tensor<4x?x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %2559 = complex.re %in : complex<f32>
      %2560 = complex.im %in : complex<f32>
      %2561 = linalg.index 4 : index
      %2562 = arith.cmpi eq, %2561, %c0 : index
      %2563 = arith.select %2562, %2559, %2560 : f32
      linalg.yield %2563 : f32
    } -> tensor<4x?x8x64x2xf32>
    %collapsed_1047 = tensor.collapse_shape %2485 [[0], [1], [2], [3, 4]] : tensor<4x?x8x64x2xf32> into tensor<4x?x8x128xf32>
    %2486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1046 : tensor<4x?x32x128xf32>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x32x128xf16>
    %2487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1047 : tensor<4x?x8x128xf32>) outs(%97 : tensor<4x?x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x8x128xf16>
    %2488 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%100 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c62_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %expanded_1048 = tensor.expand_shape %2487 [[0], [1, 2], [3], [4]] output_shape [4, %101, 16, 8, 128] : tensor<4x?x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1049 = tensor.collapse_shape %2488 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1050 = tensor.collapse_shape %expanded_1048 [[0, 1], [2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<?x16x8x128xf16>
    %expanded_1051 = tensor.expand_shape %collapsed_1049 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_1052 = tensor.expand_shape %collapsed_1050 [[0], [1, 2], [3], [4]] output_shape [%103, 1, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x1x16x8x128xf16>
    %2489 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_1051 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2490 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_1052, %2489 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2417 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %2491 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2488 : tensor<4x?xi64>) outs(%99 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %2559 = arith.addi %in, %c1_i64 : i64
      linalg.yield %2559 : i64
    } -> tensor<4x?xi64>
    %collapsed_1053 = tensor.collapse_shape %2491 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %expanded_1054 = tensor.expand_shape %collapsed_1053 [[0, 1]] output_shape [%102, 1] : tensor<?xi64> into tensor<?x1xi64>
    %expanded_1055 = tensor.expand_shape %2479 [[0, 1, 2], [3, 4]] output_shape [%108, 1, 16, 8, 128] : tensor<?x1024xf16> into tensor<?x1x16x8x128xf16>
    %2492 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_1054 : tensor<?x1xi64>) outs(%104 : tensor<?x1xi32>) {
    ^bb0(%in: i64, %out: i32):
      %2559 = arith.trunci %in : i64 to i32
      linalg.yield %2559 : i32
    } -> tensor<?x1xi32>
    %2493 = iree_linalg_ext.scatter dimension_map = [0] unique_indices(false) ins(%expanded_1055, %2492 : tensor<?x1x16x8x128xf16>, tensor<?x1xi32>) outs(%2490 : tensor<?x16x8x128xf16>) {
    ^bb0(%arg6: f16, %arg7: f16):
      iree_linalg_ext.yield %arg6 : f16
    } -> tensor<?x16x8x128xf16>
    %dim_1056 = tensor.dim %2493, %c0 : tensor<?x16x8x128xf16>
    %2494 = arith.divui %dim_1056, %c64 : index
    %expanded_1057 = tensor.expand_shape %2493 [[0, 1, 2], [3], [4], [5]] output_shape [%2494, 32, 2, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<?x32x2x16x8x128xf16>
    %collapsed_1058 = tensor.collapse_shape %expanded_1057 [[0], [1, 2, 3, 4, 5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x1048576xf16>
    %expanded_1059 = tensor.expand_shape %2487 [[0], [1], [2], [3, 4]] output_shape [4, %69, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2495 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1059 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1060 = tensor.collapse_shape %2495 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1061 = tensor.expand_shape %2479 [[0, 1], [2, 3, 4]] output_shape [4, %dim, 8, 1, 128] : tensor<?x1024xf16> into tensor<4x?x8x1x128xf16>
    %2496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1061 : tensor<4x?x8x1x128xf16>) outs(%111 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1062 = tensor.collapse_shape %2496 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2486 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1060 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1062 : tensor<4x?x32x128xf16>) outs(%114 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2500 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2498 : tensor<4x32x?x128xf16>) outs(%118 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1063 = tensor.collapse_shape %2497 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %collapsed_1064 = tensor.collapse_shape %2500 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2501 = linalg.batch_matmul ins(%collapsed_1063, %collapsed_1064 : tensor<128x?x128xf16>, tensor<128x128x?xf16>) outs(%121 : tensor<128x?x?xf16>) -> tensor<128x?x?xf16>
    %reshape_1065 = tensor.reshape %2501(%from_elements_37) : (tensor<128x?x?xf16>, tensor<4xi64>) -> tensor<4x32x?x?xf16>
    %2502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%reshape_1065 : tensor<4x32x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.truncf %cst_5 : f32 to f16
      %2560 = arith.divf %in, %2559 : f16
      linalg.yield %2560 : f16
    } -> tensor<4x32x?x?xf16>
    %2503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2502, %32 : tensor<4x32x?x?xf16>, tensor<4x1x?x?xf16>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %2504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2503 : tensor<4x32x?x?xf16>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2505:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2504 : tensor<4x32x?x?xf32>) outs(%131, %129 : tensor<4x32x?xf32>, tensor<4x32x?xi64>) {
    ^bb0(%in: f32, %out: f32, %out_1081: i64):
      %2559 = linalg.index 3 : index
      %2560 = arith.index_cast %2559 : index to i64
      %2561 = arith.maximumf %in, %out : f32
      %2562 = arith.cmpf ogt, %in, %out : f32
      %2563 = arith.select %2562, %2560, %out_1081 : i64
      linalg.yield %2561, %2563 : f32, i64
    } -> (tensor<4x32x?xf32>, tensor<4x32x?xi64>)
    %expanded_1066 = tensor.expand_shape %2505#0 [[0], [1], [2, 3]] output_shape [4, 32, %69, 1] : tensor<4x32x?xf32> into tensor<4x32x?x1xf32>
    %2506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2504, %expanded_1066 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.subf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2506 : tensor<4x32x?x?xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.exp %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2508 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2507 : tensor<4x32x?x?xf32>) outs(%136 : tensor<4x32x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x1xf32>
    %2509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2507, %2508 : tensor<4x32x?x?xf32>, tensor<4x32x?x1xf32>) outs(%126 : tensor<4x32x?x?xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.divf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x32x?x?xf32>
    %2510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2509 : tensor<4x32x?x?xf32>) outs(%123 : tensor<4x32x?x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x32x?x?xf16>
    %reshape_1067 = tensor.reshape %2510(%from_elements_40) : (tensor<4x32x?x?xf16>, tensor<3xi64>) -> tensor<128x?x?xf16>
    %collapsed_1068 = tensor.collapse_shape %2499 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2511 = linalg.batch_matmul ins(%reshape_1067, %collapsed_1068 : tensor<128x?x?xf16>, tensor<128x?x128xf16>) outs(%141 : tensor<128x?x128xf16>) -> tensor<128x?x128xf16>
    %expanded_1069 = tensor.expand_shape %2511 [[0, 1], [2], [3]] output_shape [4, 32, %69, 128] : tensor<128x?x128xf16> into tensor<4x32x?x128xf16>
    %2512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1069 : tensor<4x32x?x128xf16>) outs(%95 : tensor<4x?x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x32x128xf16>
    %2513 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_output.weight : tensor<4096x4096xf16>) outs(%47 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1070 = tensor.collapse_shape %2512 [[0, 1], [2, 3]] : tensor<4x?x32x128xf16> into tensor<?x4096xf16>
    %2514 = linalg.matmul ins(%collapsed_1070, %2513 : tensor<?x4096xf16>, tensor<4096x4096xf16>) outs(%147 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2515 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2514 : tensor<?x4096xf32>) outs(%149 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1071 = tensor.expand_shape %2515 [[0, 1], [2]] output_shape [4, %151, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2461, %expanded_1071 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2516 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2517 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2518 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2519 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2520 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2521 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2517, %2522 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2524 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2523, %__auto.blk.31.ffn_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2524 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2526 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_gate.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1072 = tensor.collapse_shape %2525 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2527 = linalg.matmul ins(%collapsed_1072, %2526 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2528 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2527 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1073 = tensor.expand_shape %2528 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1073 : tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %2559 = arith.negf %in : f16
      %2560 = math.exp %2559 : f16
      %2561 = arith.addf %2560, %cst_4 : f16
      %2562 = arith.divf %cst_4, %2561 : f16
      linalg.yield %2562 : f16
    } -> tensor<4x?x14336xf16>
    %2530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2529, %expanded_1073 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2531 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_up.weight : tensor<14336x4096xf16>) outs(%162 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2532 = linalg.matmul ins(%collapsed_1072, %2531 : tensor<?x4096xf16>, tensor<4096x14336xf16>) outs(%165 : tensor<?x14336xf32>) -> tensor<?x14336xf32>
    %2533 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2532 : tensor<?x14336xf32>) outs(%167 : tensor<?x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x14336xf16>
    %expanded_1074 = tensor.expand_shape %2533 [[0, 1], [2]] output_shape [4, %169, 14336] : tensor<?x14336xf16> into tensor<4x?x14336xf16>
    %2534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2530, %expanded_1074 : tensor<4x?x14336xf16>, tensor<4x?x14336xf16>) outs(%170 : tensor<4x?x14336xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.mulf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x14336xf16>
    %2535 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_down.weight : tensor<4096x14336xf16>) outs(%177 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1075 = tensor.collapse_shape %2534 [[0, 1], [2]] : tensor<4x?x14336xf16> into tensor<?x14336xf16>
    %2536 = linalg.matmul ins(%collapsed_1075, %2535 : tensor<?x14336xf16>, tensor<14336x4096xf16>) outs(%51 : tensor<?x4096xf32>) -> tensor<?x4096xf32>
    %2537 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2536 : tensor<?x4096xf32>) outs(%53 : tensor<?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x4096xf16>
    %expanded_1076 = tensor.expand_shape %2537 [[0, 1], [2]] output_shape [4, %169, 4096] : tensor<?x4096xf16> into tensor<4x?x4096xf16>
    %2538 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2516, %expanded_1076 : tensor<4x?x4096xf16>, tensor<4x?x4096xf16>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f16, %in_1081: f16, %out: f16):
      %2559 = arith.addf %in, %in_1081 : f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2538 : tensor<4x?x4096xf16>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %2559 = arith.extf %in : f16 to f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2539 : tensor<4x?x4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.powf %in, %cst_6 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2540 : tensor<4x?x4096xf32>) outs(%39 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %out : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2541 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.divf %in, %cst_7 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2542 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = arith.addf %in, %cst_8 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2543 : tensor<4x?x1xf32>) outs(%38 : tensor<4x?x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %2559 = math.rsqrt %in : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x1xf32>
    %2545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2539, %2544 : tensor<4x?x4096xf32>, tensor<4x?x1xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2545, %__auto.output_norm.weight : tensor<4x?x4096xf32>, tensor<4096xf32>) outs(%35 : tensor<4x?x4096xf32>) {
    ^bb0(%in: f32, %in_1081: f32, %out: f32):
      %2559 = arith.mulf %in, %in_1081 : f32
      linalg.yield %2559 : f32
    } -> tensor<4x?x4096xf32>
    %2547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2546 : tensor<4x?x4096xf32>) outs(%33 : tensor<4x?x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<4x?x4096xf16>
    %2548 = tensor.empty() : tensor<4096x128256xf16>
    %2549 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.output.weight : tensor<128256x4096xf16>) outs(%2548 : tensor<4096x128256xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x128256xf16>
    %collapsed_1077 = tensor.collapse_shape %2547 [[0, 1], [2]] : tensor<4x?x4096xf16> into tensor<?x4096xf16>
    %2550 = tensor.empty(%49) : tensor<?x128256xf32>
    %2551 = linalg.fill ins(%cst_1 : f32) outs(%2550 : tensor<?x128256xf32>) -> tensor<?x128256xf32>
    %2552 = linalg.matmul ins(%collapsed_1077, %2549 : tensor<?x4096xf16>, tensor<4096x128256xf16>) outs(%2551 : tensor<?x128256xf32>) -> tensor<?x128256xf32>
    %2553 = tensor.empty(%49) : tensor<?x128256xf16>
    %2554 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2552 : tensor<?x128256xf32>) outs(%2553 : tensor<?x128256xf16>) {
    ^bb0(%in: f32, %out: f16):
      %2559 = arith.truncf %in : f32 to f16
      linalg.yield %2559 : f16
    } -> tensor<?x128256xf16>
    %expanded_1078 = tensor.expand_shape %2554 [[0, 1], [2]] output_shape [4, %169, 128256] : tensor<?x128256xf16> into tensor<4x?x128256xf16>
    %dim_1079 = tensor.dim %2493, %c0 : tensor<?x16x8x128xf16>
    %2555 = affine.apply affine_map<()[s0] -> (s0 floordiv 64)>()[%dim_1079]
    %2556 = hal.tensor.alias wait(%arg4) => %collapsed_1058 : tensor<?x1048576xf16>{%2555} to %arg3 : !hal.buffer_view
    %2557:2 = hal.tensor.barrier join(%2556, %expanded_1078 : tensor<?x1048576xf16>, tensor<4x?x128256xf16>) => %arg5 : !hal.fence
    %dim_1080 = tensor.dim %2557#1, %c1 : tensor<4x?x128256xf16>
    %2558 = hal.tensor.export %2557#1 : tensor<4x?x128256xf16>{%dim_1080} -> !hal.buffer_view
    util.return %2558 : !hal.buffer_view
  }
  util.func public @prefill_bs4(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view, %arg3: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = util.null : !hal.fence
    %c-1_i32 = arith.constant -1 : i32
    %c0 = arith.constant 0 : index
    %device_0 = hal.devices.get %c0 : !hal.device
    %fence = hal.fence.create device(%device_0 : !hal.device) flags("None") : !hal.fence
    %1 = util.call @prefill_bs4$async(%arg0, %arg1, %arg2, %arg3, %0, %fence) : (!hal.buffer_view, !hal.buffer_view, !hal.buffer_view, !hal.buffer_view, !hal.fence, !hal.fence) -> !hal.buffer_view
    %status = hal.fence.await until([%fence]) timeout_millis(%c-1_i32) : i32
    util.return %1 : !hal.buffer_view
  }
  util.func public @decode_bs4$async(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view, %arg3: !hal.buffer_view, %arg4: !hal.buffer_view, %arg5: !hal.fence, %arg6: !hal.fence) -> !hal.buffer_view attributes {inlining_policy = #util.inline.never, iree.abi.model = "coarse-fences", iree.abi.stub} {
    %cst = arith.constant dense<31> : tensor<1x1xi64>
    %cst_0 = arith.constant dense<30> : tensor<1x1xi64>
    %cst_1 = arith.constant dense<29> : tensor<1x1xi64>
    %cst_2 = arith.constant dense<28> : tensor<1x1xi64>
    %cst_3 = arith.constant dense<27> : tensor<1x1xi64>
    %cst_4 = arith.constant dense<26> : tensor<1x1xi64>
    %cst_5 = arith.constant dense<25> : tensor<1x1xi64>
    %cst_6 = arith.constant dense<24> : tensor<1x1xi64>
    %cst_7 = arith.constant dense<23> : tensor<1x1xi64>
    %cst_8 = arith.constant dense<22> : tensor<1x1xi64>
    %cst_9 = arith.constant dense<21> : tensor<1x1xi64>
    %cst_10 = arith.constant dense<20> : tensor<1x1xi64>
    %cst_11 = arith.constant dense<19> : tensor<1x1xi64>
    %cst_12 = arith.constant dense<18> : tensor<1x1xi64>
    %cst_13 = arith.constant dense<17> : tensor<1x1xi64>
    %cst_14 = arith.constant dense<16> : tensor<1x1xi64>
    %cst_15 = arith.constant dense<15> : tensor<1x1xi64>
    %cst_16 = arith.constant dense<14> : tensor<1x1xi64>
    %cst_17 = arith.constant dense<13> : tensor<1x1xi64>
    %cst_18 = arith.constant dense<12> : tensor<1x1xi64>
    %cst_19 = arith.constant dense<11> : tensor<1x1xi64>
    %cst_20 = arith.constant dense<10> : tensor<1x1xi64>
    %cst_21 = arith.constant dense<9> : tensor<1x1xi64>
    %cst_22 = arith.constant dense<8> : tensor<1x1xi64>
    %cst_23 = arith.constant dense<7> : tensor<1x1xi64>
    %cst_24 = arith.constant dense<6> : tensor<1x1xi64>
    %cst_25 = arith.constant dense<5> : tensor<1x1xi64>
    %cst_26 = arith.constant dense<4> : tensor<1x1xi64>
    %cst_27 = arith.constant dense<3> : tensor<1x1xi64>
    %cst_28 = arith.constant dense<2> : tensor<1x1xi64>
    %cst_29 = arith.constant dense<1> : tensor<1x1xi64>
    %cst_30 = arith.constant dense<0> : tensor<1x1xi64>
    %c1_i64 = arith.constant 1 : i64
    %c16_i64 = arith.constant 16 : i64
    %c0_i64 = arith.constant 0 : i64
    %cst_31 = arith.constant dense<0xFF800000> : tensor<f32>
    %cst_32 = arith.constant dense<0> : tensor<i64>
    %c62_i64 = arith.constant 62 : i64
    %c60_i64 = arith.constant 60 : i64
    %c58_i64 = arith.constant 58 : i64
    %c56_i64 = arith.constant 56 : i64
    %c54_i64 = arith.constant 54 : i64
    %c52_i64 = arith.constant 52 : i64
    %c50_i64 = arith.constant 50 : i64
    %c48_i64 = arith.constant 48 : i64
    %c46_i64 = arith.constant 46 : i64
    %c44_i64 = arith.constant 44 : i64
    %c42_i64 = arith.constant 42 : i64
    %c40_i64 = arith.constant 40 : i64
    %c38_i64 = arith.constant 38 : i64
    %c36_i64 = arith.constant 36 : i64
    %c34_i64 = arith.constant 34 : i64
    %c30_i64 = arith.constant 30 : i64
    %c28_i64 = arith.constant 28 : i64
    %c26_i64 = arith.constant 26 : i64
    %c24_i64 = arith.constant 24 : i64
    %c22_i64 = arith.constant 22 : i64
    %c20_i64 = arith.constant 20 : i64
    %c18_i64 = arith.constant 18 : i64
    %c14_i64 = arith.constant 14 : i64
    %c12_i64 = arith.constant 12 : i64
    %c10_i64 = arith.constant 10 : i64
    %c64_i64 = arith.constant 64 : i64
    %c32_i64 = arith.constant 32 : i64
    %c6_i64 = arith.constant 6 : i64
    %c8_i64 = arith.constant 8 : i64
    %c8192_i64 = arith.constant 8192 : i64
    %c4_i64 = arith.constant 4 : i64
    %c2_i64 = arith.constant 2 : i64
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c128256 = arith.constant 128256 : index
    %cst_33 = arith.constant 0.000000e+00 : f32
    %c4 = arith.constant 4 : index
    %c-1 = arith.constant -1 : index
    %c8192 = arith.constant 8192 : index
    %cst_34 = arith.constant 0.000000e+00 : f16
    %cst_35 = arith.constant 0xFF800000 : f32
    %cst_36 = arith.constant 1.000000e+00 : f16
    %cst_37 = arith.constant 11.3137083 : f32
    %cst_38 = arith.constant 2.000000e+00 : f32
    %cst_39 = arith.constant 4.096000e+03 : f32
    %cst_40 = arith.constant 9.99999974E-6 : f32
    %cst_41 = arith.constant 1.600000e+01 : f32
    %0 = hal.tensor.import wait(%arg5) => %arg0 : !hal.buffer_view -> tensor<4x1xi64>
    %1 = hal.tensor.import wait(%arg5) => %arg1 : !hal.buffer_view -> tensor<4xi64>
    %2 = hal.tensor.import wait(%arg5) => %arg2 : !hal.buffer_view -> tensor<4xi64>
    %3 = hal.buffer_view.dim<%arg3 : !hal.buffer_view>[1] : index
    %4 = hal.tensor.import wait(%arg5) => %arg3 : !hal.buffer_view -> tensor<4x?xi64>{%3}
    %__auto.constant_8192_64_torch.complex64 = util.global.load @__auto.constant_8192_64_torch.complex64 : tensor<8192x64xcomplex<f32>>
    %__auto.token_embd.weight = util.global.load @__auto.token_embd.weight : tensor<128256x4096xf16>
    %__auto.blk.0.attn_norm.weight = util.global.load @__auto.blk.0.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.0.attn_q.weight = util.global.load @__auto.blk.0.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.0.attn_k.weight = util.global.load @__auto.blk.0.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.0.attn_v.weight = util.global.load @__auto.blk.0.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.0.attn_output.weight = util.global.load @__auto.blk.0.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.0.ffn_norm.weight = util.global.load @__auto.blk.0.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.0.ffn_gate.weight = util.global.load @__auto.blk.0.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.0.ffn_up.weight = util.global.load @__auto.blk.0.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.0.ffn_down.weight = util.global.load @__auto.blk.0.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.1.attn_norm.weight = util.global.load @__auto.blk.1.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.1.attn_q.weight = util.global.load @__auto.blk.1.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.1.attn_k.weight = util.global.load @__auto.blk.1.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.1.attn_v.weight = util.global.load @__auto.blk.1.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.1.attn_output.weight = util.global.load @__auto.blk.1.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.1.ffn_norm.weight = util.global.load @__auto.blk.1.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.1.ffn_gate.weight = util.global.load @__auto.blk.1.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.1.ffn_up.weight = util.global.load @__auto.blk.1.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.1.ffn_down.weight = util.global.load @__auto.blk.1.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.2.attn_norm.weight = util.global.load @__auto.blk.2.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.2.attn_q.weight = util.global.load @__auto.blk.2.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.2.attn_k.weight = util.global.load @__auto.blk.2.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.2.attn_v.weight = util.global.load @__auto.blk.2.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.2.attn_output.weight = util.global.load @__auto.blk.2.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.2.ffn_norm.weight = util.global.load @__auto.blk.2.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.2.ffn_gate.weight = util.global.load @__auto.blk.2.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.2.ffn_up.weight = util.global.load @__auto.blk.2.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.2.ffn_down.weight = util.global.load @__auto.blk.2.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.3.attn_norm.weight = util.global.load @__auto.blk.3.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.3.attn_q.weight = util.global.load @__auto.blk.3.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.3.attn_k.weight = util.global.load @__auto.blk.3.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.3.attn_v.weight = util.global.load @__auto.blk.3.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.3.attn_output.weight = util.global.load @__auto.blk.3.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.3.ffn_norm.weight = util.global.load @__auto.blk.3.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.3.ffn_gate.weight = util.global.load @__auto.blk.3.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.3.ffn_up.weight = util.global.load @__auto.blk.3.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.3.ffn_down.weight = util.global.load @__auto.blk.3.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.4.attn_norm.weight = util.global.load @__auto.blk.4.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.4.attn_q.weight = util.global.load @__auto.blk.4.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.4.attn_k.weight = util.global.load @__auto.blk.4.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.4.attn_v.weight = util.global.load @__auto.blk.4.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.4.attn_output.weight = util.global.load @__auto.blk.4.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.4.ffn_norm.weight = util.global.load @__auto.blk.4.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.4.ffn_gate.weight = util.global.load @__auto.blk.4.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.4.ffn_up.weight = util.global.load @__auto.blk.4.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.4.ffn_down.weight = util.global.load @__auto.blk.4.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.5.attn_norm.weight = util.global.load @__auto.blk.5.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.5.attn_q.weight = util.global.load @__auto.blk.5.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.5.attn_k.weight = util.global.load @__auto.blk.5.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.5.attn_v.weight = util.global.load @__auto.blk.5.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.5.attn_output.weight = util.global.load @__auto.blk.5.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.5.ffn_norm.weight = util.global.load @__auto.blk.5.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.5.ffn_gate.weight = util.global.load @__auto.blk.5.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.5.ffn_up.weight = util.global.load @__auto.blk.5.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.5.ffn_down.weight = util.global.load @__auto.blk.5.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.6.attn_norm.weight = util.global.load @__auto.blk.6.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.6.attn_q.weight = util.global.load @__auto.blk.6.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.6.attn_k.weight = util.global.load @__auto.blk.6.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.6.attn_v.weight = util.global.load @__auto.blk.6.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.6.attn_output.weight = util.global.load @__auto.blk.6.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.6.ffn_norm.weight = util.global.load @__auto.blk.6.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.6.ffn_gate.weight = util.global.load @__auto.blk.6.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.6.ffn_up.weight = util.global.load @__auto.blk.6.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.6.ffn_down.weight = util.global.load @__auto.blk.6.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.7.attn_norm.weight = util.global.load @__auto.blk.7.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.7.attn_q.weight = util.global.load @__auto.blk.7.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.7.attn_k.weight = util.global.load @__auto.blk.7.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.7.attn_v.weight = util.global.load @__auto.blk.7.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.7.attn_output.weight = util.global.load @__auto.blk.7.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.7.ffn_norm.weight = util.global.load @__auto.blk.7.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.7.ffn_gate.weight = util.global.load @__auto.blk.7.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.7.ffn_up.weight = util.global.load @__auto.blk.7.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.7.ffn_down.weight = util.global.load @__auto.blk.7.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.8.attn_norm.weight = util.global.load @__auto.blk.8.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.8.attn_q.weight = util.global.load @__auto.blk.8.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.8.attn_k.weight = util.global.load @__auto.blk.8.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.8.attn_v.weight = util.global.load @__auto.blk.8.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.8.attn_output.weight = util.global.load @__auto.blk.8.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.8.ffn_norm.weight = util.global.load @__auto.blk.8.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.8.ffn_gate.weight = util.global.load @__auto.blk.8.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.8.ffn_up.weight = util.global.load @__auto.blk.8.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.8.ffn_down.weight = util.global.load @__auto.blk.8.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.9.attn_norm.weight = util.global.load @__auto.blk.9.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.9.attn_q.weight = util.global.load @__auto.blk.9.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.9.attn_k.weight = util.global.load @__auto.blk.9.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.9.attn_v.weight = util.global.load @__auto.blk.9.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.9.attn_output.weight = util.global.load @__auto.blk.9.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.9.ffn_norm.weight = util.global.load @__auto.blk.9.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.9.ffn_gate.weight = util.global.load @__auto.blk.9.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.9.ffn_up.weight = util.global.load @__auto.blk.9.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.9.ffn_down.weight = util.global.load @__auto.blk.9.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.10.attn_norm.weight = util.global.load @__auto.blk.10.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.10.attn_q.weight = util.global.load @__auto.blk.10.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.10.attn_k.weight = util.global.load @__auto.blk.10.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.10.attn_v.weight = util.global.load @__auto.blk.10.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.10.attn_output.weight = util.global.load @__auto.blk.10.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.10.ffn_norm.weight = util.global.load @__auto.blk.10.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.10.ffn_gate.weight = util.global.load @__auto.blk.10.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.10.ffn_up.weight = util.global.load @__auto.blk.10.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.10.ffn_down.weight = util.global.load @__auto.blk.10.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.11.attn_norm.weight = util.global.load @__auto.blk.11.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.11.attn_q.weight = util.global.load @__auto.blk.11.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.11.attn_k.weight = util.global.load @__auto.blk.11.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.11.attn_v.weight = util.global.load @__auto.blk.11.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.11.attn_output.weight = util.global.load @__auto.blk.11.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.11.ffn_norm.weight = util.global.load @__auto.blk.11.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.11.ffn_gate.weight = util.global.load @__auto.blk.11.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.11.ffn_up.weight = util.global.load @__auto.blk.11.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.11.ffn_down.weight = util.global.load @__auto.blk.11.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.12.attn_norm.weight = util.global.load @__auto.blk.12.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.12.attn_q.weight = util.global.load @__auto.blk.12.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.12.attn_k.weight = util.global.load @__auto.blk.12.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.12.attn_v.weight = util.global.load @__auto.blk.12.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.12.attn_output.weight = util.global.load @__auto.blk.12.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.12.ffn_norm.weight = util.global.load @__auto.blk.12.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.12.ffn_gate.weight = util.global.load @__auto.blk.12.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.12.ffn_up.weight = util.global.load @__auto.blk.12.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.12.ffn_down.weight = util.global.load @__auto.blk.12.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.13.attn_norm.weight = util.global.load @__auto.blk.13.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.13.attn_q.weight = util.global.load @__auto.blk.13.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.13.attn_k.weight = util.global.load @__auto.blk.13.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.13.attn_v.weight = util.global.load @__auto.blk.13.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.13.attn_output.weight = util.global.load @__auto.blk.13.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.13.ffn_norm.weight = util.global.load @__auto.blk.13.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.13.ffn_gate.weight = util.global.load @__auto.blk.13.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.13.ffn_up.weight = util.global.load @__auto.blk.13.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.13.ffn_down.weight = util.global.load @__auto.blk.13.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.14.attn_norm.weight = util.global.load @__auto.blk.14.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.14.attn_q.weight = util.global.load @__auto.blk.14.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.14.attn_k.weight = util.global.load @__auto.blk.14.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.14.attn_v.weight = util.global.load @__auto.blk.14.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.14.attn_output.weight = util.global.load @__auto.blk.14.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.14.ffn_norm.weight = util.global.load @__auto.blk.14.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.14.ffn_gate.weight = util.global.load @__auto.blk.14.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.14.ffn_up.weight = util.global.load @__auto.blk.14.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.14.ffn_down.weight = util.global.load @__auto.blk.14.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.15.attn_norm.weight = util.global.load @__auto.blk.15.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.15.attn_q.weight = util.global.load @__auto.blk.15.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.15.attn_k.weight = util.global.load @__auto.blk.15.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.15.attn_v.weight = util.global.load @__auto.blk.15.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.15.attn_output.weight = util.global.load @__auto.blk.15.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.15.ffn_norm.weight = util.global.load @__auto.blk.15.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.15.ffn_gate.weight = util.global.load @__auto.blk.15.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.15.ffn_up.weight = util.global.load @__auto.blk.15.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.15.ffn_down.weight = util.global.load @__auto.blk.15.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.16.attn_norm.weight = util.global.load @__auto.blk.16.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.16.attn_q.weight = util.global.load @__auto.blk.16.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.16.attn_k.weight = util.global.load @__auto.blk.16.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.16.attn_v.weight = util.global.load @__auto.blk.16.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.16.attn_output.weight = util.global.load @__auto.blk.16.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.16.ffn_norm.weight = util.global.load @__auto.blk.16.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.16.ffn_gate.weight = util.global.load @__auto.blk.16.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.16.ffn_up.weight = util.global.load @__auto.blk.16.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.16.ffn_down.weight = util.global.load @__auto.blk.16.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.17.attn_norm.weight = util.global.load @__auto.blk.17.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.17.attn_q.weight = util.global.load @__auto.blk.17.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.17.attn_k.weight = util.global.load @__auto.blk.17.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.17.attn_v.weight = util.global.load @__auto.blk.17.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.17.attn_output.weight = util.global.load @__auto.blk.17.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.17.ffn_norm.weight = util.global.load @__auto.blk.17.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.17.ffn_gate.weight = util.global.load @__auto.blk.17.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.17.ffn_up.weight = util.global.load @__auto.blk.17.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.17.ffn_down.weight = util.global.load @__auto.blk.17.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.18.attn_norm.weight = util.global.load @__auto.blk.18.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.18.attn_q.weight = util.global.load @__auto.blk.18.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.18.attn_k.weight = util.global.load @__auto.blk.18.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.18.attn_v.weight = util.global.load @__auto.blk.18.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.18.attn_output.weight = util.global.load @__auto.blk.18.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.18.ffn_norm.weight = util.global.load @__auto.blk.18.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.18.ffn_gate.weight = util.global.load @__auto.blk.18.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.18.ffn_up.weight = util.global.load @__auto.blk.18.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.18.ffn_down.weight = util.global.load @__auto.blk.18.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.19.attn_norm.weight = util.global.load @__auto.blk.19.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.19.attn_q.weight = util.global.load @__auto.blk.19.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.19.attn_k.weight = util.global.load @__auto.blk.19.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.19.attn_v.weight = util.global.load @__auto.blk.19.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.19.attn_output.weight = util.global.load @__auto.blk.19.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.19.ffn_norm.weight = util.global.load @__auto.blk.19.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.19.ffn_gate.weight = util.global.load @__auto.blk.19.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.19.ffn_up.weight = util.global.load @__auto.blk.19.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.19.ffn_down.weight = util.global.load @__auto.blk.19.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.20.attn_norm.weight = util.global.load @__auto.blk.20.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.20.attn_q.weight = util.global.load @__auto.blk.20.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.20.attn_k.weight = util.global.load @__auto.blk.20.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.20.attn_v.weight = util.global.load @__auto.blk.20.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.20.attn_output.weight = util.global.load @__auto.blk.20.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.20.ffn_norm.weight = util.global.load @__auto.blk.20.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.20.ffn_gate.weight = util.global.load @__auto.blk.20.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.20.ffn_up.weight = util.global.load @__auto.blk.20.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.20.ffn_down.weight = util.global.load @__auto.blk.20.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.21.attn_norm.weight = util.global.load @__auto.blk.21.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.21.attn_q.weight = util.global.load @__auto.blk.21.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.21.attn_k.weight = util.global.load @__auto.blk.21.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.21.attn_v.weight = util.global.load @__auto.blk.21.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.21.attn_output.weight = util.global.load @__auto.blk.21.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.21.ffn_norm.weight = util.global.load @__auto.blk.21.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.21.ffn_gate.weight = util.global.load @__auto.blk.21.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.21.ffn_up.weight = util.global.load @__auto.blk.21.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.21.ffn_down.weight = util.global.load @__auto.blk.21.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.22.attn_norm.weight = util.global.load @__auto.blk.22.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.22.attn_q.weight = util.global.load @__auto.blk.22.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.22.attn_k.weight = util.global.load @__auto.blk.22.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.22.attn_v.weight = util.global.load @__auto.blk.22.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.22.attn_output.weight = util.global.load @__auto.blk.22.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.22.ffn_norm.weight = util.global.load @__auto.blk.22.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.22.ffn_gate.weight = util.global.load @__auto.blk.22.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.22.ffn_up.weight = util.global.load @__auto.blk.22.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.22.ffn_down.weight = util.global.load @__auto.blk.22.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.23.attn_norm.weight = util.global.load @__auto.blk.23.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.23.attn_q.weight = util.global.load @__auto.blk.23.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.23.attn_k.weight = util.global.load @__auto.blk.23.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.23.attn_v.weight = util.global.load @__auto.blk.23.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.23.attn_output.weight = util.global.load @__auto.blk.23.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.23.ffn_norm.weight = util.global.load @__auto.blk.23.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.23.ffn_gate.weight = util.global.load @__auto.blk.23.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.23.ffn_up.weight = util.global.load @__auto.blk.23.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.23.ffn_down.weight = util.global.load @__auto.blk.23.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.24.attn_norm.weight = util.global.load @__auto.blk.24.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.24.attn_q.weight = util.global.load @__auto.blk.24.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.24.attn_k.weight = util.global.load @__auto.blk.24.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.24.attn_v.weight = util.global.load @__auto.blk.24.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.24.attn_output.weight = util.global.load @__auto.blk.24.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.24.ffn_norm.weight = util.global.load @__auto.blk.24.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.24.ffn_gate.weight = util.global.load @__auto.blk.24.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.24.ffn_up.weight = util.global.load @__auto.blk.24.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.24.ffn_down.weight = util.global.load @__auto.blk.24.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.25.attn_norm.weight = util.global.load @__auto.blk.25.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.25.attn_q.weight = util.global.load @__auto.blk.25.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.25.attn_k.weight = util.global.load @__auto.blk.25.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.25.attn_v.weight = util.global.load @__auto.blk.25.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.25.attn_output.weight = util.global.load @__auto.blk.25.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.25.ffn_norm.weight = util.global.load @__auto.blk.25.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.25.ffn_gate.weight = util.global.load @__auto.blk.25.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.25.ffn_up.weight = util.global.load @__auto.blk.25.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.25.ffn_down.weight = util.global.load @__auto.blk.25.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.26.attn_norm.weight = util.global.load @__auto.blk.26.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.26.attn_q.weight = util.global.load @__auto.blk.26.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.26.attn_k.weight = util.global.load @__auto.blk.26.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.26.attn_v.weight = util.global.load @__auto.blk.26.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.26.attn_output.weight = util.global.load @__auto.blk.26.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.26.ffn_norm.weight = util.global.load @__auto.blk.26.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.26.ffn_gate.weight = util.global.load @__auto.blk.26.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.26.ffn_up.weight = util.global.load @__auto.blk.26.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.26.ffn_down.weight = util.global.load @__auto.blk.26.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.27.attn_norm.weight = util.global.load @__auto.blk.27.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.27.attn_q.weight = util.global.load @__auto.blk.27.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.27.attn_k.weight = util.global.load @__auto.blk.27.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.27.attn_v.weight = util.global.load @__auto.blk.27.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.27.attn_output.weight = util.global.load @__auto.blk.27.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.27.ffn_norm.weight = util.global.load @__auto.blk.27.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.27.ffn_gate.weight = util.global.load @__auto.blk.27.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.27.ffn_up.weight = util.global.load @__auto.blk.27.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.27.ffn_down.weight = util.global.load @__auto.blk.27.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.28.attn_norm.weight = util.global.load @__auto.blk.28.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.28.attn_q.weight = util.global.load @__auto.blk.28.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.28.attn_k.weight = util.global.load @__auto.blk.28.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.28.attn_v.weight = util.global.load @__auto.blk.28.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.28.attn_output.weight = util.global.load @__auto.blk.28.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.28.ffn_norm.weight = util.global.load @__auto.blk.28.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.28.ffn_gate.weight = util.global.load @__auto.blk.28.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.28.ffn_up.weight = util.global.load @__auto.blk.28.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.28.ffn_down.weight = util.global.load @__auto.blk.28.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.29.attn_norm.weight = util.global.load @__auto.blk.29.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.29.attn_q.weight = util.global.load @__auto.blk.29.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.29.attn_k.weight = util.global.load @__auto.blk.29.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.29.attn_v.weight = util.global.load @__auto.blk.29.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.29.attn_output.weight = util.global.load @__auto.blk.29.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.29.ffn_norm.weight = util.global.load @__auto.blk.29.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.29.ffn_gate.weight = util.global.load @__auto.blk.29.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.29.ffn_up.weight = util.global.load @__auto.blk.29.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.29.ffn_down.weight = util.global.load @__auto.blk.29.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.30.attn_norm.weight = util.global.load @__auto.blk.30.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.30.attn_q.weight = util.global.load @__auto.blk.30.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.30.attn_k.weight = util.global.load @__auto.blk.30.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.30.attn_v.weight = util.global.load @__auto.blk.30.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.30.attn_output.weight = util.global.load @__auto.blk.30.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.30.ffn_norm.weight = util.global.load @__auto.blk.30.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.30.ffn_gate.weight = util.global.load @__auto.blk.30.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.30.ffn_up.weight = util.global.load @__auto.blk.30.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.30.ffn_down.weight = util.global.load @__auto.blk.30.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.blk.31.attn_norm.weight = util.global.load @__auto.blk.31.attn_norm.weight : tensor<4096xf32>
    %__auto.blk.31.attn_q.weight = util.global.load @__auto.blk.31.attn_q.weight : tensor<4096x4096xf16>
    %__auto.blk.31.attn_k.weight = util.global.load @__auto.blk.31.attn_k.weight : tensor<1024x4096xf16>
    %__auto.blk.31.attn_v.weight = util.global.load @__auto.blk.31.attn_v.weight : tensor<1024x4096xf16>
    %__auto.blk.31.attn_output.weight = util.global.load @__auto.blk.31.attn_output.weight : tensor<4096x4096xf16>
    %__auto.blk.31.ffn_norm.weight = util.global.load @__auto.blk.31.ffn_norm.weight : tensor<4096xf32>
    %__auto.blk.31.ffn_gate.weight = util.global.load @__auto.blk.31.ffn_gate.weight : tensor<14336x4096xf16>
    %__auto.blk.31.ffn_up.weight = util.global.load @__auto.blk.31.ffn_up.weight : tensor<14336x4096xf16>
    %__auto.blk.31.ffn_down.weight = util.global.load @__auto.blk.31.ffn_down.weight : tensor<4096x14336xf16>
    %__auto.output_norm.weight = util.global.load @__auto.output_norm.weight : tensor<4096xf32>
    %__auto.output.weight = util.global.load @__auto.output.weight : tensor<128256x4096xf16>
    %5 = hal.buffer_view.dim<%arg4 : !hal.buffer_view>[0] : index
    %6 = hal.tensor.import wait(%arg5) => %arg4 : !hal.buffer_view -> tensor<?x1048576xf16>{%5}
    %dim = tensor.dim %4, %c1 : tensor<4x?xi64>
    %7 = arith.index_cast %dim : index to i64
    %8 = arith.muli %7, %c16_i64 : i64
    %9 = arith.index_cast %8 : i64 to index
    %10 = tensor.empty(%9) : tensor<?xi64>
    %11 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} outs(%10 : tensor<?xi64>) {
    ^bb0(%out: i64):
      %3261 = linalg.index 0 : index
      %3262 = arith.index_cast %3261 : index to i64
      linalg.yield %3262 : i64
    } -> tensor<?xi64>
    %expanded = tensor.expand_shape %1 [[0, 1]] output_shape [4, 1] : tensor<4xi64> into tensor<4x1xi64>
    %12 = tensor.empty(%9) : tensor<4x?xi1>
    %13 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d1)>, affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%11, %expanded : tensor<?xi64>, tensor<4x1xi64>) outs(%12 : tensor<4x?xi1>) {
    ^bb0(%in: i64, %in_2061: i64, %out: i1):
      %3261 = arith.cmpi sge, %in, %in_2061 : i64
      linalg.yield %3261 : i1
    } -> tensor<4x?xi1>
    %14 = tensor.empty() : tensor<f16>
    %15 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%cst_32 : tensor<i64>) outs(%14 : tensor<f16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.sitofp %in : i64 to f16
      linalg.yield %3261 : f16
    } -> tensor<f16>
    %16 = arith.index_cast %8 : i64 to index
    %17 = tensor.empty(%16) : tensor<4x?xf16>
    %18 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> ()>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%15 : tensor<f16>) outs(%17 : tensor<4x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?xf16>
    %19 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%cst_31 : tensor<f32>) outs(%14 : tensor<f16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<f16>
    %20 = tensor.empty(%9) : tensor<4x?xf16>
    %21 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> ()>, affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%13, %19, %18 : tensor<4x?xi1>, tensor<f16>, tensor<4x?xf16>) outs(%20 : tensor<4x?xf16>) {
    ^bb0(%in: i1, %in_2061: f16, %in_2062: f16, %out: f16):
      %3261 = arith.select %in, %in_2061, %in_2062 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x?xf16>
    %22 = tensor.empty() : tensor<1xi64>
    %23 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} outs(%22 : tensor<1xi64>) {
    ^bb0(%out: i64):
      %3261 = linalg.index 0 : index
      %3262 = arith.index_cast %3261 : index to i64
      linalg.yield %3262 : i64
    } -> tensor<1xi64>
    %expanded_42 = tensor.expand_shape %23 [[0, 1]] output_shape [1, 1] : tensor<1xi64> into tensor<1x1xi64>
    %expanded_43 = tensor.expand_shape %2 [[0, 1]] output_shape [4, 1] : tensor<4xi64> into tensor<4x1xi64>
    %24 = tensor.empty() : tensor<4x1xi64>
    %25 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, 0)>, affine_map<(d0, d1) -> (d0, 0)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%expanded_42, %expanded_43 : tensor<1x1xi64>, tensor<4x1xi64>) outs(%24 : tensor<4x1xi64>) {
    ^bb0(%in: i64, %in_2061: i64, %out: i64):
      %3261 = arith.addi %in, %in_2061 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x1xi64>
    %26 = tensor.empty() : tensor<4x1x64xcomplex<f32>>
    %27 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%25 : tensor<4x1xi64>) outs(%26 : tensor<4x1x64xcomplex<f32>>) {
    ^bb0(%in: i64, %out: complex<f32>):
      %3261 = arith.cmpi slt, %in, %c0_i64 : i64
      %3262 = arith.addi %in, %c8192_i64 : i64
      %3263 = arith.select %3261, %3262, %in : i64
      %3264 = arith.index_cast %3263 : i64 to index
      %3265 = linalg.index 2 : index
      %extracted = tensor.extract %__auto.constant_8192_64_torch.complex64[%3264, %3265] : tensor<8192x64xcomplex<f32>>
      linalg.yield %extracted : complex<f32>
    } -> tensor<4x1x64xcomplex<f32>>
    %expanded_44 = tensor.expand_shape %27 [[0], [1], [2, 3]] output_shape [4, 1, 1, 64] : tensor<4x1x64xcomplex<f32>> into tensor<4x1x1x64xcomplex<f32>>
    %28 = tensor.empty() : tensor<4x1x4096xf16>
    %29 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%0 : tensor<4x1xi64>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 2 : index
      %3263 = arith.cmpi slt, %3261, %c128256 : index
      cf.assert %3263, "index must be smaller than dim size"
      %3264 = arith.cmpi sge, %in, %c0_i64 : i64
      cf.assert %3264, "index must be larger or equal to 0"
      %extracted = tensor.extract %__auto.token_embd.weight[%3261, %3262] : tensor<128256x4096xf16>
      linalg.yield %extracted : f16
    } -> tensor<4x1x4096xf16>
    %30 = tensor.empty() : tensor<4x1x4096xf32>
    %31 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%29 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %32 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%31 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %33 = tensor.empty() : tensor<4x1x1xf32>
    %34 = linalg.fill ins(%cst_33 : f32) outs(%33 : tensor<4x1x1xf32>) -> tensor<4x1x1xf32>
    %35 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%32 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %36 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%35 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %37 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%36 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %38 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%37 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %39 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%31, %38 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %40 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%39, %__auto.blk.0.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %41 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%40 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %42 = tensor.empty() : tensor<4096x4096xf16>
    %43 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed = tensor.collapse_shape %41 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %44 = tensor.empty() : tensor<4x4096xf32>
    %45 = linalg.fill ins(%cst_33 : f32) outs(%44 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %46 = linalg.matmul ins(%collapsed, %43 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %47 = tensor.empty() : tensor<4x4096xf16>
    %48 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%46 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %49 = tensor.empty() : tensor<4096x1024xf16>
    %50 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %51 = tensor.empty() : tensor<4x1024xf32>
    %52 = linalg.fill ins(%cst_33 : f32) outs(%51 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %53 = linalg.matmul ins(%collapsed, %50 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %54 = tensor.empty() : tensor<4x1024xf16>
    %55 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%53 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %56 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %57 = linalg.matmul ins(%collapsed, %56 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %58 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%57 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_45 = tensor.expand_shape %58 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_46 = tensor.expand_shape %48 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %59 = tensor.empty() : tensor<4x1x32x64xcomplex<f16>>
    %60 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_46[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_46[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_47 = tensor.expand_shape %55 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %61 = tensor.empty() : tensor<4x1x8x64xcomplex<f16>>
    %62 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_47[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_47[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %63 = tensor.empty() : tensor<4x1x32x64xcomplex<f32>>
    %64 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%60, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %65 = tensor.empty() : tensor<4x1x32x64x2xf32>
    %66 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%64 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_48 = tensor.collapse_shape %66 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %67 = tensor.empty() : tensor<4x1x8x64xcomplex<f32>>
    %68 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%62, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %69 = tensor.empty() : tensor<4x1x8x64x2xf32>
    %70 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%68 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_49 = tensor.collapse_shape %70 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %71 = tensor.empty() : tensor<4x1x32x128xf16>
    %72 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_48 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %73 = tensor.empty() : tensor<4x1x8x128xf16>
    %74 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_49 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %75 = tensor.empty() : tensor<4xi64>
    %76 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%2 : tensor<4xi64>) outs(%75 : tensor<4xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4xi64>
    %dim_50 = tensor.dim %6, %c0 : tensor<?x1048576xf16>
    %expanded_51 = tensor.expand_shape %6 [[0], [1, 2, 3, 4, 5]] output_shape [%dim_50, 32, 2, 16, 8, 128] : tensor<?x1048576xf16> into tensor<?x32x2x16x8x128xf16>
    %extracted_slice = tensor.extract_slice %76[0] [1] [1] : tensor<4xi64> to tensor<1xi64>
    %collapsed_52 = tensor.collapse_shape %extracted_slice [] : tensor<1xi64> into tensor<i64>
    %extracted_slice_53 = tensor.extract_slice %4[0, 0] [1, %dim] [1, 1] : tensor<4x?xi64> to tensor<1x?xi64>
    %collapsed_54 = tensor.collapse_shape %extracted_slice_53 [[0, 1]] : tensor<1x?xi64> into tensor<?xi64>
    %77 = tensor.empty() : tensor<i64>
    %78 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_52 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.sitofp %in : i64 to f32
      %3262 = arith.divf %3261, %cst_41 : f32
      %3263 = math.floor %3262 : f32
      %3264 = arith.fptosi %3263 : f32 to i64
      linalg.yield %3264 : i64
    } -> tensor<i64>
    %expanded_55 = tensor.expand_shape %78 [] output_shape [1] : tensor<i64> into tensor<1xi64>
    %79 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%expanded_55 : tensor<1xi64>) outs(%22 : tensor<1xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.index_cast %in : i64 to index
      %extracted = tensor.extract %collapsed_54[%3261] : tensor<?xi64>
      linalg.yield %extracted : i64
    } -> tensor<1xi64>
    %80 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_52 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.remsi %in, %c16_i64 : i64
      %3262 = arith.cmpi ne, %3261, %c0_i64 : i64
      %3263 = arith.cmpi slt, %3261, %c0_i64 : i64
      %3264 = arith.andi %3262, %3263 : i1
      %3265 = arith.addi %3261, %c16_i64 : i64
      %3266 = arith.select %3264, %3265, %3261 : i64
      linalg.yield %3266 : i64
    } -> tensor<i64>
    %extracted_slice_56 = tensor.extract_slice %74[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_57 = tensor.collapse_shape %extracted_slice_56 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %81 = tensor.empty() : tensor<1x8x128xf16>
    %82 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_57 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %expanded_58 = tensor.expand_shape %79 [[0, 1]] output_shape [1, 1] : tensor<1xi64> into tensor<1x1xi64>
    %expanded_59 = tensor.expand_shape %80 [] output_shape [1, 1] : tensor<i64> into tensor<1x1xi64>
    %concat = tensor.concat dim(1) %expanded_58, %cst_30, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_60 = tensor.expand_shape %82 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %83 = tensor.empty() : tensor<1x4xi32>
    %84 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %85 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_60, %84 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%expanded_51 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_61 = tensor.extract_slice %expanded_45[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_62 = tensor.collapse_shape %extracted_slice_61 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %86 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_62 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_63 = tensor.concat dim(1) %expanded_58, %cst_30, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_64 = tensor.expand_shape %86 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %87 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_63 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %88 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_64, %87 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%85 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_65 = tensor.extract_slice %76[1] [1] [1] : tensor<4xi64> to tensor<1xi64>
    %collapsed_66 = tensor.collapse_shape %extracted_slice_65 [] : tensor<1xi64> into tensor<i64>
    %extracted_slice_67 = tensor.extract_slice %4[1, 0] [1, %dim] [1, 1] : tensor<4x?xi64> to tensor<1x?xi64>
    %collapsed_68 = tensor.collapse_shape %extracted_slice_67 [[0, 1]] : tensor<1x?xi64> into tensor<?xi64>
    %89 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_66 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.sitofp %in : i64 to f32
      %3262 = arith.divf %3261, %cst_41 : f32
      %3263 = math.floor %3262 : f32
      %3264 = arith.fptosi %3263 : f32 to i64
      linalg.yield %3264 : i64
    } -> tensor<i64>
    %expanded_69 = tensor.expand_shape %89 [] output_shape [1] : tensor<i64> into tensor<1xi64>
    %90 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%expanded_69 : tensor<1xi64>) outs(%22 : tensor<1xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.index_cast %in : i64 to index
      %extracted = tensor.extract %collapsed_68[%3261] : tensor<?xi64>
      linalg.yield %extracted : i64
    } -> tensor<1xi64>
    %91 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_66 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.remsi %in, %c16_i64 : i64
      %3262 = arith.cmpi ne, %3261, %c0_i64 : i64
      %3263 = arith.cmpi slt, %3261, %c0_i64 : i64
      %3264 = arith.andi %3262, %3263 : i1
      %3265 = arith.addi %3261, %c16_i64 : i64
      %3266 = arith.select %3264, %3265, %3261 : i64
      linalg.yield %3266 : i64
    } -> tensor<i64>
    %extracted_slice_70 = tensor.extract_slice %74[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_71 = tensor.collapse_shape %extracted_slice_70 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %92 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_71 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %expanded_72 = tensor.expand_shape %90 [[0, 1]] output_shape [1, 1] : tensor<1xi64> into tensor<1x1xi64>
    %expanded_73 = tensor.expand_shape %91 [] output_shape [1, 1] : tensor<i64> into tensor<1x1xi64>
    %concat_74 = tensor.concat dim(1) %expanded_72, %cst_30, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_75 = tensor.expand_shape %92 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %93 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_74 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %94 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_75, %93 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%88 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_76 = tensor.extract_slice %expanded_45[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_77 = tensor.collapse_shape %extracted_slice_76 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %95 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_77 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_78 = tensor.concat dim(1) %expanded_72, %cst_30, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_79 = tensor.expand_shape %95 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %96 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_78 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %97 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_79, %96 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%94 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_80 = tensor.extract_slice %76[2] [1] [1] : tensor<4xi64> to tensor<1xi64>
    %collapsed_81 = tensor.collapse_shape %extracted_slice_80 [] : tensor<1xi64> into tensor<i64>
    %extracted_slice_82 = tensor.extract_slice %4[2, 0] [1, %dim] [1, 1] : tensor<4x?xi64> to tensor<1x?xi64>
    %collapsed_83 = tensor.collapse_shape %extracted_slice_82 [[0, 1]] : tensor<1x?xi64> into tensor<?xi64>
    %98 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_81 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.sitofp %in : i64 to f32
      %3262 = arith.divf %3261, %cst_41 : f32
      %3263 = math.floor %3262 : f32
      %3264 = arith.fptosi %3263 : f32 to i64
      linalg.yield %3264 : i64
    } -> tensor<i64>
    %expanded_84 = tensor.expand_shape %98 [] output_shape [1] : tensor<i64> into tensor<1xi64>
    %99 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%expanded_84 : tensor<1xi64>) outs(%22 : tensor<1xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.index_cast %in : i64 to index
      %extracted = tensor.extract %collapsed_83[%3261] : tensor<?xi64>
      linalg.yield %extracted : i64
    } -> tensor<1xi64>
    %100 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_81 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.remsi %in, %c16_i64 : i64
      %3262 = arith.cmpi ne, %3261, %c0_i64 : i64
      %3263 = arith.cmpi slt, %3261, %c0_i64 : i64
      %3264 = arith.andi %3262, %3263 : i1
      %3265 = arith.addi %3261, %c16_i64 : i64
      %3266 = arith.select %3264, %3265, %3261 : i64
      linalg.yield %3266 : i64
    } -> tensor<i64>
    %extracted_slice_85 = tensor.extract_slice %74[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_86 = tensor.collapse_shape %extracted_slice_85 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_86 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %expanded_87 = tensor.expand_shape %99 [[0, 1]] output_shape [1, 1] : tensor<1xi64> into tensor<1x1xi64>
    %expanded_88 = tensor.expand_shape %100 [] output_shape [1, 1] : tensor<i64> into tensor<1x1xi64>
    %concat_89 = tensor.concat dim(1) %expanded_87, %cst_30, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_90 = tensor.expand_shape %101 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %102 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_89 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %103 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_90, %102 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%97 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_91 = tensor.extract_slice %expanded_45[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_92 = tensor.collapse_shape %extracted_slice_91 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_92 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_93 = tensor.concat dim(1) %expanded_87, %cst_30, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_94 = tensor.expand_shape %104 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %105 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_93 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %106 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_94, %105 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%103 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_95 = tensor.extract_slice %76[3] [1] [1] : tensor<4xi64> to tensor<1xi64>
    %collapsed_96 = tensor.collapse_shape %extracted_slice_95 [] : tensor<1xi64> into tensor<i64>
    %extracted_slice_97 = tensor.extract_slice %4[3, 0] [1, %dim] [1, 1] : tensor<4x?xi64> to tensor<1x?xi64>
    %collapsed_98 = tensor.collapse_shape %extracted_slice_97 [[0, 1]] : tensor<1x?xi64> into tensor<?xi64>
    %107 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_96 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.sitofp %in : i64 to f32
      %3262 = arith.divf %3261, %cst_41 : f32
      %3263 = math.floor %3262 : f32
      %3264 = arith.fptosi %3263 : f32 to i64
      linalg.yield %3264 : i64
    } -> tensor<i64>
    %expanded_99 = tensor.expand_shape %107 [] output_shape [1] : tensor<i64> into tensor<1xi64>
    %108 = linalg.generic {indexing_maps = [affine_map<(d0) -> (d0)>, affine_map<(d0) -> (d0)>], iterator_types = ["parallel"]} ins(%expanded_99 : tensor<1xi64>) outs(%22 : tensor<1xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.index_cast %in : i64 to index
      %extracted = tensor.extract %collapsed_98[%3261] : tensor<?xi64>
      linalg.yield %extracted : i64
    } -> tensor<1xi64>
    %109 = linalg.generic {indexing_maps = [affine_map<() -> ()>, affine_map<() -> ()>], iterator_types = []} ins(%collapsed_96 : tensor<i64>) outs(%77 : tensor<i64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.remsi %in, %c16_i64 : i64
      %3262 = arith.cmpi ne, %3261, %c0_i64 : i64
      %3263 = arith.cmpi slt, %3261, %c0_i64 : i64
      %3264 = arith.andi %3262, %3263 : i1
      %3265 = arith.addi %3261, %c16_i64 : i64
      %3266 = arith.select %3264, %3265, %3261 : i64
      linalg.yield %3266 : i64
    } -> tensor<i64>
    %extracted_slice_100 = tensor.extract_slice %74[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_101 = tensor.collapse_shape %extracted_slice_100 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_101 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %expanded_102 = tensor.expand_shape %108 [[0, 1]] output_shape [1, 1] : tensor<1xi64> into tensor<1x1xi64>
    %expanded_103 = tensor.expand_shape %109 [] output_shape [1, 1] : tensor<i64> into tensor<1x1xi64>
    %concat_104 = tensor.concat dim(1) %expanded_102, %cst_30, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_105 = tensor.expand_shape %110 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %111 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_104 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %112 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_105, %111 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%106 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_106 = tensor.extract_slice %expanded_45[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_107 = tensor.collapse_shape %extracted_slice_106 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_107 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_108 = tensor.concat dim(1) %expanded_102, %cst_30, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_109 = tensor.expand_shape %113 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %114 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_108 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %115 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_109, %114 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%112 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %116 = arith.cmpi slt, %9, %c0 : index
    %117 = arith.addi %9, %c8192 : index
    %118 = arith.select %116, %117, %9 : index
    %119 = arith.cmpi slt, %118, %c0 : index
    %120 = arith.select %119, %c-1, %118 : index
    %121 = arith.cmpi sgt, %120, %c8192 : index
    %122 = arith.select %121, %c8192, %120 : index
    %123 = arith.cmpi slt, %122, %c0 : index
    %124 = arith.select %123, %c0, %122 : index
    %125 = tensor.empty(%dim) : tensor<4x?xi64>
    %126 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%4 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.muli %in, %c64_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_110 = tensor.collapse_shape %126 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_111 = tensor.collapse_shape %115 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %127 = affine.apply affine_map<()[s0] -> (s0 * 4)>()[%dim]
    %128 = tensor.empty(%127) : tensor<?x16x8x128xf16>
    %129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_110 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_111[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %130 = arith.divui %127, %c4 : index
    %expanded_112 = tensor.expand_shape %129 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_113 = tensor.collapse_shape %expanded_112 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %131 = arith.index_cast %124 : index to i64
    %132 = arith.index_cast %131 : i64 to index
    %133 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_114 = tensor.collapse_shape %133 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_114 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_111[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_115 = tensor.expand_shape %134 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_116 = tensor.collapse_shape %expanded_115 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %135 = affine.apply affine_map<()[s0] -> (s0 * 16)>()[%dim]
    %expanded_117 = tensor.expand_shape %collapsed_113 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %136 = tensor.empty(%132) : tensor<4x?x8x4x128xf16>
    %137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_117 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_118 = tensor.collapse_shape %137 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_119 = tensor.expand_shape %collapsed_116 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %138 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_119 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_120 = tensor.collapse_shape %138 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %139 = tensor.empty() : tensor<4x32x1x128xf16>
    %140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%72 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %141 = tensor.empty(%132) : tensor<4x32x?x128xf16>
    %142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_118 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_120 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %144 = tensor.empty(%132) : tensor<4x32x128x?xf16>
    %145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%142 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_121 = tensor.collapse_shape %140 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_122 = tensor.collapse_shape %145 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %146 = tensor.empty(%132) : tensor<128x1x?xf16>
    %147 = linalg.fill ins(%cst_34 : f16) outs(%146 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %148 = linalg.batch_matmul ins(%collapsed_121, %collapsed_122 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_123 = tensor.expand_shape %148 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %149 = tensor.empty(%132) : tensor<4x32x1x?xf16>
    %150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_123 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %expanded_124 = tensor.expand_shape %21 [[0], [1, 2, 3]] output_shape [4, 1, 1, %9] : tensor<4x?xf16> into tensor<4x1x1x?xf16>
    %151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%150, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %152 = tensor.empty(%132) : tensor<4x32x1x?xf32>
    %153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%151 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %154 = tensor.empty() : tensor<4x32x1xi64>
    %155 = linalg.fill ins(%c0_i64 : i64) outs(%154 : tensor<4x32x1xi64>) -> tensor<4x32x1xi64>
    %156 = tensor.empty() : tensor<4x32x1xf32>
    %157 = linalg.fill ins(%cst_35 : f32) outs(%156 : tensor<4x32x1xf32>) -> tensor<4x32x1xf32>
    %158:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%153 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_125 = tensor.expand_shape %158#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%153, %expanded_125 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %160 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%159 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %161 = tensor.empty() : tensor<4x32x1x1xf32>
    %162 = linalg.fill ins(%cst_33 : f32) outs(%161 : tensor<4x32x1x1xf32>) -> tensor<4x32x1x1xf32>
    %163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%160 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%160, %163 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%164 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_126 = tensor.collapse_shape %165 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_127 = tensor.collapse_shape %143 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %166 = tensor.empty() : tensor<128x1x128xf16>
    %167 = linalg.fill ins(%cst_34 : f16) outs(%166 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %168 = linalg.batch_matmul ins(%collapsed_126, %collapsed_127 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_128 = tensor.expand_shape %168 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_128 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_129 = tensor.collapse_shape %169 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %170 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %171 = tensor.empty() : tensor<4x4096x4096xf16>
    %172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%170 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %173 = linalg.fill ins(%cst_34 : f16) outs(%28 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %174 = linalg.batch_matmul ins(%collapsed_129, %172 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%29, %174 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%175 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %177 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%176 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %178 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%177 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%178 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %180 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%179 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %181 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%180 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%176, %181 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%182, %__auto.blk.0.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%183 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %185 = tensor.empty() : tensor<4096x14336xf16>
    %186 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_130 = tensor.collapse_shape %184 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %187 = tensor.empty() : tensor<4x14336xf32>
    %188 = linalg.fill ins(%cst_33 : f32) outs(%187 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %189 = linalg.matmul ins(%collapsed_130, %186 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %190 = tensor.empty() : tensor<4x14336xf16>
    %191 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%189 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_131 = tensor.expand_shape %191 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %192 = tensor.empty() : tensor<4x1x14336xf16>
    %193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_131 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %194 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%193, %expanded_131 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %195 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %196 = linalg.matmul ins(%collapsed_130, %195 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %197 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%196 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_132 = tensor.expand_shape %197 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%194, %expanded_132 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %199 = tensor.empty() : tensor<14336x4096xf16>
    %200 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.0.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_133 = tensor.collapse_shape %198 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %201 = linalg.matmul ins(%collapsed_133, %200 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %202 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%201 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_134 = tensor.expand_shape %202 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%175, %expanded_134 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%203 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%204 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%205 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%206 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%207 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%208 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%204, %209 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%210, %__auto.blk.1.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%211 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %213 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_135 = tensor.collapse_shape %212 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %214 = linalg.matmul ins(%collapsed_135, %213 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %215 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%214 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %216 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %217 = linalg.matmul ins(%collapsed_135, %216 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %218 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%217 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %219 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %220 = linalg.matmul ins(%collapsed_135, %219 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %221 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%220 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_136 = tensor.expand_shape %221 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_137 = tensor.expand_shape %215 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_137[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_137[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_138 = tensor.expand_shape %218 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_138[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_138[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%222, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%224 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_139 = tensor.collapse_shape %225 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%223, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%226 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_140 = tensor.collapse_shape %227 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_139 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_140 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_141 = tensor.extract_slice %229[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_142 = tensor.collapse_shape %extracted_slice_141 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_142 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_143 = tensor.concat dim(1) %expanded_58, %cst_29, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_144 = tensor.expand_shape %230 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %231 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_143 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %232 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_144, %231 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%115 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_145 = tensor.extract_slice %expanded_136[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_146 = tensor.collapse_shape %extracted_slice_145 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_146 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_147 = tensor.concat dim(1) %expanded_58, %cst_29, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_148 = tensor.expand_shape %233 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %234 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_147 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %235 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_148, %234 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%232 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_149 = tensor.extract_slice %229[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_150 = tensor.collapse_shape %extracted_slice_149 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %236 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_150 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_151 = tensor.concat dim(1) %expanded_72, %cst_29, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_152 = tensor.expand_shape %236 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %237 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_151 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %238 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_152, %237 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%235 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_153 = tensor.extract_slice %expanded_136[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_154 = tensor.collapse_shape %extracted_slice_153 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_154 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_155 = tensor.concat dim(1) %expanded_72, %cst_29, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_156 = tensor.expand_shape %239 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %240 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_155 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %241 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_156, %240 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%238 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_157 = tensor.extract_slice %229[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_158 = tensor.collapse_shape %extracted_slice_157 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_158 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_159 = tensor.concat dim(1) %expanded_87, %cst_29, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_160 = tensor.expand_shape %242 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %243 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_159 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %244 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_160, %243 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%241 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_161 = tensor.extract_slice %expanded_136[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_162 = tensor.collapse_shape %extracted_slice_161 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_162 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_163 = tensor.concat dim(1) %expanded_87, %cst_29, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_164 = tensor.expand_shape %245 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %246 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_163 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %247 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_164, %246 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%244 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_165 = tensor.extract_slice %229[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_166 = tensor.collapse_shape %extracted_slice_165 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_166 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_167 = tensor.concat dim(1) %expanded_102, %cst_29, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_168 = tensor.expand_shape %248 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %249 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_167 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %250 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_168, %249 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%247 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_169 = tensor.extract_slice %expanded_136[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_170 = tensor.collapse_shape %extracted_slice_169 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_170 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_171 = tensor.concat dim(1) %expanded_102, %cst_29, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_172 = tensor.expand_shape %251 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %252 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_171 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %253 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_172, %252 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%250 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %254 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c2_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_173 = tensor.collapse_shape %254 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_174 = tensor.collapse_shape %253 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_173 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_174[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_175 = tensor.expand_shape %255 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_176 = tensor.collapse_shape %expanded_175 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %256 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%254 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_177 = tensor.collapse_shape %256 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_177 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_174[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_178 = tensor.expand_shape %257 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_179 = tensor.collapse_shape %expanded_178 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_180 = tensor.expand_shape %collapsed_176 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %258 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_180 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_181 = tensor.collapse_shape %258 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_182 = tensor.expand_shape %collapsed_179 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_182 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_183 = tensor.collapse_shape %259 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%228 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_181 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_183 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%261 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_184 = tensor.collapse_shape %260 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_185 = tensor.collapse_shape %263 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %264 = linalg.batch_matmul ins(%collapsed_184, %collapsed_185 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_186 = tensor.expand_shape %264 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_186 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%265, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%266 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %268:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%267 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_187 = tensor.expand_shape %268#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%267, %expanded_187 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%269 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %271 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%270 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%270, %271 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%272 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_188 = tensor.collapse_shape %273 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_189 = tensor.collapse_shape %262 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %274 = linalg.batch_matmul ins(%collapsed_188, %collapsed_189 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_190 = tensor.expand_shape %274 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %275 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_190 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_191 = tensor.collapse_shape %275 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %276 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%276 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %278 = linalg.batch_matmul ins(%collapsed_191, %277 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %279 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%203, %278 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%279 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%280 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%281 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%282 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%283 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%284 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%280, %285 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%286, %__auto.blk.1.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%287 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %289 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_192 = tensor.collapse_shape %288 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %290 = linalg.matmul ins(%collapsed_192, %289 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %291 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%290 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_193 = tensor.expand_shape %291 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %292 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_193 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %293 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%292, %expanded_193 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %294 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %295 = linalg.matmul ins(%collapsed_192, %294 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %296 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%295 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_194 = tensor.expand_shape %296 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%293, %expanded_194 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %298 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.1.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_195 = tensor.collapse_shape %297 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %299 = linalg.matmul ins(%collapsed_195, %298 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %300 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%299 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_196 = tensor.expand_shape %300 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%279, %expanded_196 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%301 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%302 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%303 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%304 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%305 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%306 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%302, %307 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%308, %__auto.blk.2.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %310 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%309 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %311 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_197 = tensor.collapse_shape %310 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %312 = linalg.matmul ins(%collapsed_197, %311 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %313 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%312 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %314 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %315 = linalg.matmul ins(%collapsed_197, %314 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %316 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%315 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %317 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %318 = linalg.matmul ins(%collapsed_197, %317 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %319 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%318 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_198 = tensor.expand_shape %319 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_199 = tensor.expand_shape %313 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_199[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_199[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_200 = tensor.expand_shape %316 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_200[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_200[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %322 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%320, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%322 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_201 = tensor.collapse_shape %323 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%321, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%324 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_202 = tensor.collapse_shape %325 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_201 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_202 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_203 = tensor.extract_slice %327[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_204 = tensor.collapse_shape %extracted_slice_203 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_204 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_205 = tensor.concat dim(1) %expanded_58, %cst_28, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_206 = tensor.expand_shape %328 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %329 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_205 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %330 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_206, %329 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%253 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_207 = tensor.extract_slice %expanded_198[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_208 = tensor.collapse_shape %extracted_slice_207 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_208 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_209 = tensor.concat dim(1) %expanded_58, %cst_28, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_210 = tensor.expand_shape %331 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %332 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_209 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %333 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_210, %332 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%330 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_211 = tensor.extract_slice %327[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_212 = tensor.collapse_shape %extracted_slice_211 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %334 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_212 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_213 = tensor.concat dim(1) %expanded_72, %cst_28, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_214 = tensor.expand_shape %334 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %335 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_213 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %336 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_214, %335 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%333 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_215 = tensor.extract_slice %expanded_198[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_216 = tensor.collapse_shape %extracted_slice_215 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_216 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_217 = tensor.concat dim(1) %expanded_72, %cst_28, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_218 = tensor.expand_shape %337 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %338 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_217 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %339 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_218, %338 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%336 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_219 = tensor.extract_slice %327[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_220 = tensor.collapse_shape %extracted_slice_219 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_220 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_221 = tensor.concat dim(1) %expanded_87, %cst_28, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_222 = tensor.expand_shape %340 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %341 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_221 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %342 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_222, %341 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%339 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_223 = tensor.extract_slice %expanded_198[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_224 = tensor.collapse_shape %extracted_slice_223 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_224 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_225 = tensor.concat dim(1) %expanded_87, %cst_28, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_226 = tensor.expand_shape %343 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %344 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_225 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %345 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_226, %344 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%342 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_227 = tensor.extract_slice %327[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_228 = tensor.collapse_shape %extracted_slice_227 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_228 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_229 = tensor.concat dim(1) %expanded_102, %cst_28, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_230 = tensor.expand_shape %346 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %347 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_229 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %348 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_230, %347 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%345 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_231 = tensor.extract_slice %expanded_198[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_232 = tensor.collapse_shape %extracted_slice_231 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_232 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_233 = tensor.concat dim(1) %expanded_102, %cst_28, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_234 = tensor.expand_shape %349 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %350 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_233 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %351 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_234, %350 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%348 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %352 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c4_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_235 = tensor.collapse_shape %352 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_236 = tensor.collapse_shape %351 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_235 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_236[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_237 = tensor.expand_shape %353 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_238 = tensor.collapse_shape %expanded_237 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %354 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%352 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_239 = tensor.collapse_shape %354 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_239 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_236[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_240 = tensor.expand_shape %355 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_241 = tensor.collapse_shape %expanded_240 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_242 = tensor.expand_shape %collapsed_238 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %356 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_242 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_243 = tensor.collapse_shape %356 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_244 = tensor.expand_shape %collapsed_241 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_244 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_245 = tensor.collapse_shape %357 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%326 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_243 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_245 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%359 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_246 = tensor.collapse_shape %358 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_247 = tensor.collapse_shape %361 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %362 = linalg.batch_matmul ins(%collapsed_246, %collapsed_247 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_248 = tensor.expand_shape %362 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_248 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%363, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%364 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %366:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%365 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_249 = tensor.expand_shape %366#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%365, %expanded_249 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%367 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %369 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%368 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%368, %369 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%370 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_250 = tensor.collapse_shape %371 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_251 = tensor.collapse_shape %360 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %372 = linalg.batch_matmul ins(%collapsed_250, %collapsed_251 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_252 = tensor.expand_shape %372 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %373 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_252 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_253 = tensor.collapse_shape %373 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %374 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%374 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %376 = linalg.batch_matmul ins(%collapsed_253, %375 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %377 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%301, %376 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%377 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%378 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%379 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%380 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%381 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%382 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%378, %383 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%384, %__auto.blk.2.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%385 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %387 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_254 = tensor.collapse_shape %386 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %388 = linalg.matmul ins(%collapsed_254, %387 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %389 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%388 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_255 = tensor.expand_shape %389 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %390 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_255 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %391 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%390, %expanded_255 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %392 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %393 = linalg.matmul ins(%collapsed_254, %392 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %394 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%393 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_256 = tensor.expand_shape %394 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%391, %expanded_256 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %396 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.2.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_257 = tensor.collapse_shape %395 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %397 = linalg.matmul ins(%collapsed_257, %396 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %398 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%397 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_258 = tensor.expand_shape %398 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%377, %expanded_258 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%399 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%400 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%401 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %403 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%402 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%403 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%404 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%400, %405 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%406, %__auto.blk.3.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %408 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%407 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %409 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_259 = tensor.collapse_shape %408 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %410 = linalg.matmul ins(%collapsed_259, %409 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %411 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%410 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %412 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %413 = linalg.matmul ins(%collapsed_259, %412 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %414 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%413 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %415 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %416 = linalg.matmul ins(%collapsed_259, %415 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %417 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%416 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_260 = tensor.expand_shape %417 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_261 = tensor.expand_shape %411 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_261[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_261[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_262 = tensor.expand_shape %414 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_262[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_262[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %420 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%418, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%420 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_263 = tensor.collapse_shape %421 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%419, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%422 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_264 = tensor.collapse_shape %423 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %424 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_263 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_264 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_265 = tensor.extract_slice %425[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_266 = tensor.collapse_shape %extracted_slice_265 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_266 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_267 = tensor.concat dim(1) %expanded_58, %cst_27, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_268 = tensor.expand_shape %426 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %427 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_267 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %428 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_268, %427 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%351 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_269 = tensor.extract_slice %expanded_260[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_270 = tensor.collapse_shape %extracted_slice_269 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_270 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_271 = tensor.concat dim(1) %expanded_58, %cst_27, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_272 = tensor.expand_shape %429 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %430 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_271 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %431 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_272, %430 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%428 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_273 = tensor.extract_slice %425[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_274 = tensor.collapse_shape %extracted_slice_273 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %432 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_274 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_275 = tensor.concat dim(1) %expanded_72, %cst_27, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_276 = tensor.expand_shape %432 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %433 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_275 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %434 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_276, %433 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%431 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_277 = tensor.extract_slice %expanded_260[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_278 = tensor.collapse_shape %extracted_slice_277 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_278 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_279 = tensor.concat dim(1) %expanded_72, %cst_27, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_280 = tensor.expand_shape %435 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %436 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_279 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %437 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_280, %436 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%434 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_281 = tensor.extract_slice %425[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_282 = tensor.collapse_shape %extracted_slice_281 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_282 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_283 = tensor.concat dim(1) %expanded_87, %cst_27, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_284 = tensor.expand_shape %438 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %439 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_283 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %440 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_284, %439 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%437 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_285 = tensor.extract_slice %expanded_260[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_286 = tensor.collapse_shape %extracted_slice_285 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_286 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_287 = tensor.concat dim(1) %expanded_87, %cst_27, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_288 = tensor.expand_shape %441 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %442 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_287 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %443 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_288, %442 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%440 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_289 = tensor.extract_slice %425[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_290 = tensor.collapse_shape %extracted_slice_289 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_290 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_291 = tensor.concat dim(1) %expanded_102, %cst_27, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_292 = tensor.expand_shape %444 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %445 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_291 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %446 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_292, %445 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%443 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_293 = tensor.extract_slice %expanded_260[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_294 = tensor.collapse_shape %extracted_slice_293 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_294 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_295 = tensor.concat dim(1) %expanded_102, %cst_27, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_296 = tensor.expand_shape %447 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %448 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_295 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %449 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_296, %448 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%446 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %450 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c6_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_297 = tensor.collapse_shape %450 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_298 = tensor.collapse_shape %449 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_297 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_298[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_299 = tensor.expand_shape %451 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_300 = tensor.collapse_shape %expanded_299 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %452 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%450 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_301 = tensor.collapse_shape %452 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_301 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_298[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_302 = tensor.expand_shape %453 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_303 = tensor.collapse_shape %expanded_302 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_304 = tensor.expand_shape %collapsed_300 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %454 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_304 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_305 = tensor.collapse_shape %454 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_306 = tensor.expand_shape %collapsed_303 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_306 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_307 = tensor.collapse_shape %455 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%424 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_305 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_307 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%457 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_308 = tensor.collapse_shape %456 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_309 = tensor.collapse_shape %459 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %460 = linalg.batch_matmul ins(%collapsed_308, %collapsed_309 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_310 = tensor.expand_shape %460 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_310 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%461, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%462 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %464:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%463 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_311 = tensor.expand_shape %464#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%463, %expanded_311 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%465 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %467 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%466 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%466, %467 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%468 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_312 = tensor.collapse_shape %469 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_313 = tensor.collapse_shape %458 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %470 = linalg.batch_matmul ins(%collapsed_312, %collapsed_313 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_314 = tensor.expand_shape %470 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %471 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_314 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_315 = tensor.collapse_shape %471 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %472 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %473 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%472 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %474 = linalg.batch_matmul ins(%collapsed_315, %473 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %475 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%399, %474 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%475 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%477 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%478 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%479 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%480 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%476, %481 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%482, %__auto.blk.3.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%483 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %485 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_316 = tensor.collapse_shape %484 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %486 = linalg.matmul ins(%collapsed_316, %485 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %487 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%486 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_317 = tensor.expand_shape %487 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %488 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_317 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %489 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%488, %expanded_317 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %490 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %491 = linalg.matmul ins(%collapsed_316, %490 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %492 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%491 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_318 = tensor.expand_shape %492 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%489, %expanded_318 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %494 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.3.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_319 = tensor.collapse_shape %493 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %495 = linalg.matmul ins(%collapsed_319, %494 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %496 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%495 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_320 = tensor.expand_shape %496 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%475, %expanded_320 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%497 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%498 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %500 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%499 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %501 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%500 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%501 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%502 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%498, %503 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%504, %__auto.blk.4.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %506 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%505 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %507 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_321 = tensor.collapse_shape %506 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %508 = linalg.matmul ins(%collapsed_321, %507 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %509 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%508 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %510 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %511 = linalg.matmul ins(%collapsed_321, %510 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %512 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%511 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %513 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %514 = linalg.matmul ins(%collapsed_321, %513 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %515 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%514 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_322 = tensor.expand_shape %515 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_323 = tensor.expand_shape %509 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_323[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_323[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_324 = tensor.expand_shape %512 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_324[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_324[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %518 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%516, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%518 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_325 = tensor.collapse_shape %519 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%517, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%520 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_326 = tensor.collapse_shape %521 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_325 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_326 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_327 = tensor.extract_slice %523[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_328 = tensor.collapse_shape %extracted_slice_327 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %524 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_328 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_329 = tensor.concat dim(1) %expanded_58, %cst_26, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_330 = tensor.expand_shape %524 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %525 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_329 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %526 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_330, %525 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%449 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_331 = tensor.extract_slice %expanded_322[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_332 = tensor.collapse_shape %extracted_slice_331 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_332 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_333 = tensor.concat dim(1) %expanded_58, %cst_26, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_334 = tensor.expand_shape %527 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %528 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_333 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %529 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_334, %528 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%526 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_335 = tensor.extract_slice %523[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_336 = tensor.collapse_shape %extracted_slice_335 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %530 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_336 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_337 = tensor.concat dim(1) %expanded_72, %cst_26, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_338 = tensor.expand_shape %530 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %531 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_337 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %532 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_338, %531 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%529 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_339 = tensor.extract_slice %expanded_322[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_340 = tensor.collapse_shape %extracted_slice_339 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_340 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_341 = tensor.concat dim(1) %expanded_72, %cst_26, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_342 = tensor.expand_shape %533 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %534 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_341 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %535 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_342, %534 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%532 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_343 = tensor.extract_slice %523[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_344 = tensor.collapse_shape %extracted_slice_343 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_344 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_345 = tensor.concat dim(1) %expanded_87, %cst_26, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_346 = tensor.expand_shape %536 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %537 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_345 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %538 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_346, %537 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%535 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_347 = tensor.extract_slice %expanded_322[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_348 = tensor.collapse_shape %extracted_slice_347 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_348 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_349 = tensor.concat dim(1) %expanded_87, %cst_26, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_350 = tensor.expand_shape %539 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %540 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_349 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %541 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_350, %540 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%538 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_351 = tensor.extract_slice %523[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_352 = tensor.collapse_shape %extracted_slice_351 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_352 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_353 = tensor.concat dim(1) %expanded_102, %cst_26, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_354 = tensor.expand_shape %542 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %543 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_353 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %544 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_354, %543 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%541 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_355 = tensor.extract_slice %expanded_322[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_356 = tensor.collapse_shape %extracted_slice_355 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_356 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_357 = tensor.concat dim(1) %expanded_102, %cst_26, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_358 = tensor.expand_shape %545 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %546 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_357 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %547 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_358, %546 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%544 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %548 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c8_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_359 = tensor.collapse_shape %548 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_360 = tensor.collapse_shape %547 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %549 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_359 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_360[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_361 = tensor.expand_shape %549 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_362 = tensor.collapse_shape %expanded_361 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %550 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%548 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_363 = tensor.collapse_shape %550 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_363 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_360[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_364 = tensor.expand_shape %551 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_365 = tensor.collapse_shape %expanded_364 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_366 = tensor.expand_shape %collapsed_362 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %552 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_366 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_367 = tensor.collapse_shape %552 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_368 = tensor.expand_shape %collapsed_365 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_368 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_369 = tensor.collapse_shape %553 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %554 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%522 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_367 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_369 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%555 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_370 = tensor.collapse_shape %554 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_371 = tensor.collapse_shape %557 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %558 = linalg.batch_matmul ins(%collapsed_370, %collapsed_371 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_372 = tensor.expand_shape %558 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_372 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%559, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%560 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %562:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%561 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_373 = tensor.expand_shape %562#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%561, %expanded_373 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%563 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %565 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%564 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%564, %565 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%566 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_374 = tensor.collapse_shape %567 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_375 = tensor.collapse_shape %556 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %568 = linalg.batch_matmul ins(%collapsed_374, %collapsed_375 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_376 = tensor.expand_shape %568 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %569 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_376 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_377 = tensor.collapse_shape %569 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %570 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%570 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %572 = linalg.batch_matmul ins(%collapsed_377, %571 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %573 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%497, %572 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%573 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%574 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%575 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%576 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%577 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%578 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%574, %579 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%580, %__auto.blk.4.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%581 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %583 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_378 = tensor.collapse_shape %582 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %584 = linalg.matmul ins(%collapsed_378, %583 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %585 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%584 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_379 = tensor.expand_shape %585 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %586 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_379 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %587 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%586, %expanded_379 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %588 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %589 = linalg.matmul ins(%collapsed_378, %588 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %590 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%589 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_380 = tensor.expand_shape %590 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%587, %expanded_380 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %592 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.4.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_381 = tensor.collapse_shape %591 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %593 = linalg.matmul ins(%collapsed_381, %592 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %594 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%593 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_382 = tensor.expand_shape %594 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%573, %expanded_382 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%595 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%596 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%597 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%598 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %600 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%599 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%600 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%596, %601 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%602, %__auto.blk.5.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %604 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%603 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %605 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_383 = tensor.collapse_shape %604 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %606 = linalg.matmul ins(%collapsed_383, %605 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %607 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%606 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %608 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %609 = linalg.matmul ins(%collapsed_383, %608 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %610 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%609 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %611 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %612 = linalg.matmul ins(%collapsed_383, %611 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %613 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%612 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_384 = tensor.expand_shape %613 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_385 = tensor.expand_shape %607 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_385[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_385[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_386 = tensor.expand_shape %610 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_386[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_386[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %616 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%614, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%616 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_387 = tensor.collapse_shape %617 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%615, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %619 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%618 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_388 = tensor.collapse_shape %619 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_387 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_388 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_389 = tensor.extract_slice %621[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_390 = tensor.collapse_shape %extracted_slice_389 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %622 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_390 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_391 = tensor.concat dim(1) %expanded_58, %cst_25, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_392 = tensor.expand_shape %622 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %623 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_391 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %624 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_392, %623 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%547 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_393 = tensor.extract_slice %expanded_384[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_394 = tensor.collapse_shape %extracted_slice_393 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_394 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_395 = tensor.concat dim(1) %expanded_58, %cst_25, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_396 = tensor.expand_shape %625 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %626 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_395 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %627 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_396, %626 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%624 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_397 = tensor.extract_slice %621[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_398 = tensor.collapse_shape %extracted_slice_397 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %628 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_398 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_399 = tensor.concat dim(1) %expanded_72, %cst_25, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_400 = tensor.expand_shape %628 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %629 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_399 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %630 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_400, %629 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%627 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_401 = tensor.extract_slice %expanded_384[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_402 = tensor.collapse_shape %extracted_slice_401 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_402 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_403 = tensor.concat dim(1) %expanded_72, %cst_25, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_404 = tensor.expand_shape %631 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %632 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_403 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %633 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_404, %632 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%630 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_405 = tensor.extract_slice %621[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_406 = tensor.collapse_shape %extracted_slice_405 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_406 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_407 = tensor.concat dim(1) %expanded_87, %cst_25, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_408 = tensor.expand_shape %634 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %635 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_407 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %636 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_408, %635 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%633 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_409 = tensor.extract_slice %expanded_384[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_410 = tensor.collapse_shape %extracted_slice_409 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_410 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_411 = tensor.concat dim(1) %expanded_87, %cst_25, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_412 = tensor.expand_shape %637 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %638 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_411 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %639 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_412, %638 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%636 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_413 = tensor.extract_slice %621[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_414 = tensor.collapse_shape %extracted_slice_413 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_414 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_415 = tensor.concat dim(1) %expanded_102, %cst_25, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_416 = tensor.expand_shape %640 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %641 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_415 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %642 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_416, %641 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%639 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_417 = tensor.extract_slice %expanded_384[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_418 = tensor.collapse_shape %extracted_slice_417 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_418 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_419 = tensor.concat dim(1) %expanded_102, %cst_25, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_420 = tensor.expand_shape %643 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %644 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_419 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %645 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_420, %644 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%642 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %646 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c10_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_421 = tensor.collapse_shape %646 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_422 = tensor.collapse_shape %645 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_421 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_422[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_423 = tensor.expand_shape %647 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_424 = tensor.collapse_shape %expanded_423 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %648 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%646 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_425 = tensor.collapse_shape %648 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_425 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_422[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_426 = tensor.expand_shape %649 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_427 = tensor.collapse_shape %expanded_426 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_428 = tensor.expand_shape %collapsed_424 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %650 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_428 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_429 = tensor.collapse_shape %650 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_430 = tensor.expand_shape %collapsed_427 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_430 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_431 = tensor.collapse_shape %651 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%620 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_429 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_431 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%653 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_432 = tensor.collapse_shape %652 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_433 = tensor.collapse_shape %655 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %656 = linalg.batch_matmul ins(%collapsed_432, %collapsed_433 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_434 = tensor.expand_shape %656 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_434 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%657, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%658 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %660:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%659 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_435 = tensor.expand_shape %660#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%659, %expanded_435 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%661 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %663 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%662 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %664 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%662, %663 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%664 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_436 = tensor.collapse_shape %665 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_437 = tensor.collapse_shape %654 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %666 = linalg.batch_matmul ins(%collapsed_436, %collapsed_437 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_438 = tensor.expand_shape %666 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %667 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_438 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_439 = tensor.collapse_shape %667 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %668 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%668 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %670 = linalg.batch_matmul ins(%collapsed_439, %669 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %671 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%595, %670 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%671 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%672 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%673 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%674 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%675 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%676 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%672, %677 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%678, %__auto.blk.5.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%679 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %681 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_440 = tensor.collapse_shape %680 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %682 = linalg.matmul ins(%collapsed_440, %681 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %683 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%682 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_441 = tensor.expand_shape %683 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %684 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_441 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %685 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%684, %expanded_441 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %686 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %687 = linalg.matmul ins(%collapsed_440, %686 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %688 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%687 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_442 = tensor.expand_shape %688 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %689 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%685, %expanded_442 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %690 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.5.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_443 = tensor.collapse_shape %689 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %691 = linalg.matmul ins(%collapsed_443, %690 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %692 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%691 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_444 = tensor.expand_shape %692 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%671, %expanded_444 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%693 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%694 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%695 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%696 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%697 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%698 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %700 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%694, %699 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%700, %__auto.blk.6.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %702 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%701 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %703 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_445 = tensor.collapse_shape %702 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %704 = linalg.matmul ins(%collapsed_445, %703 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %705 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%704 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %706 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %707 = linalg.matmul ins(%collapsed_445, %706 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %708 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%707 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %709 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %710 = linalg.matmul ins(%collapsed_445, %709 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %711 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%710 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_446 = tensor.expand_shape %711 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_447 = tensor.expand_shape %705 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_447[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_447[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_448 = tensor.expand_shape %708 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_448[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_448[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %714 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%712, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%714 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_449 = tensor.collapse_shape %715 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%713, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%716 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_450 = tensor.collapse_shape %717 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_449 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %719 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_450 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_451 = tensor.extract_slice %719[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_452 = tensor.collapse_shape %extracted_slice_451 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_452 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_453 = tensor.concat dim(1) %expanded_58, %cst_24, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_454 = tensor.expand_shape %720 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %721 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_453 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %722 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_454, %721 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%645 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_455 = tensor.extract_slice %expanded_446[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_456 = tensor.collapse_shape %extracted_slice_455 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_456 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_457 = tensor.concat dim(1) %expanded_58, %cst_24, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_458 = tensor.expand_shape %723 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %724 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_457 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %725 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_458, %724 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%722 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_459 = tensor.extract_slice %719[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_460 = tensor.collapse_shape %extracted_slice_459 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %726 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_460 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_461 = tensor.concat dim(1) %expanded_72, %cst_24, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_462 = tensor.expand_shape %726 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %727 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_461 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %728 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_462, %727 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%725 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_463 = tensor.extract_slice %expanded_446[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_464 = tensor.collapse_shape %extracted_slice_463 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_464 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_465 = tensor.concat dim(1) %expanded_72, %cst_24, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_466 = tensor.expand_shape %729 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %730 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_465 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %731 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_466, %730 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%728 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_467 = tensor.extract_slice %719[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_468 = tensor.collapse_shape %extracted_slice_467 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_468 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_469 = tensor.concat dim(1) %expanded_87, %cst_24, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_470 = tensor.expand_shape %732 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %733 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_469 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %734 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_470, %733 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%731 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_471 = tensor.extract_slice %expanded_446[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_472 = tensor.collapse_shape %extracted_slice_471 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_472 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_473 = tensor.concat dim(1) %expanded_87, %cst_24, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_474 = tensor.expand_shape %735 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %736 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_473 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %737 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_474, %736 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%734 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_475 = tensor.extract_slice %719[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_476 = tensor.collapse_shape %extracted_slice_475 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_476 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_477 = tensor.concat dim(1) %expanded_102, %cst_24, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_478 = tensor.expand_shape %738 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %739 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_477 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %740 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_478, %739 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%737 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_479 = tensor.extract_slice %expanded_446[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_480 = tensor.collapse_shape %extracted_slice_479 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %741 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_480 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_481 = tensor.concat dim(1) %expanded_102, %cst_24, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_482 = tensor.expand_shape %741 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %742 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_481 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %743 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_482, %742 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%740 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %744 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c12_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_483 = tensor.collapse_shape %744 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_484 = tensor.collapse_shape %743 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_483 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_484[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_485 = tensor.expand_shape %745 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_486 = tensor.collapse_shape %expanded_485 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %746 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%744 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_487 = tensor.collapse_shape %746 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_487 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_484[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_488 = tensor.expand_shape %747 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_489 = tensor.collapse_shape %expanded_488 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_490 = tensor.expand_shape %collapsed_486 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %748 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_490 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_491 = tensor.collapse_shape %748 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_492 = tensor.expand_shape %collapsed_489 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_492 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_493 = tensor.collapse_shape %749 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%718 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_491 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_493 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%751 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_494 = tensor.collapse_shape %750 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_495 = tensor.collapse_shape %753 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %754 = linalg.batch_matmul ins(%collapsed_494, %collapsed_495 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_496 = tensor.expand_shape %754 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_496 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%755, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%756 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %758:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%757 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_497 = tensor.expand_shape %758#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%757, %expanded_497 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%759 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %761 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%760 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%760, %761 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%762 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_498 = tensor.collapse_shape %763 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_499 = tensor.collapse_shape %752 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %764 = linalg.batch_matmul ins(%collapsed_498, %collapsed_499 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_500 = tensor.expand_shape %764 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %765 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_500 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_501 = tensor.collapse_shape %765 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %766 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%766 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %768 = linalg.batch_matmul ins(%collapsed_501, %767 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %769 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%693, %768 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%769 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%770 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%771 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%772 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%773 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%774 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%770, %775 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%776, %__auto.blk.6.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%777 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %779 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_502 = tensor.collapse_shape %778 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %780 = linalg.matmul ins(%collapsed_502, %779 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %781 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%780 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_503 = tensor.expand_shape %781 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %782 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_503 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %783 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%782, %expanded_503 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %784 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %785 = linalg.matmul ins(%collapsed_502, %784 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %786 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%785 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_504 = tensor.expand_shape %786 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%783, %expanded_504 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %788 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.6.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_505 = tensor.collapse_shape %787 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %789 = linalg.matmul ins(%collapsed_505, %788 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %790 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%789 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_506 = tensor.expand_shape %790 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%769, %expanded_506 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %792 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%791 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%792 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%793 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%794 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%795 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%796 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%792, %797 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%798, %__auto.blk.7.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %800 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%799 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %801 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_507 = tensor.collapse_shape %800 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %802 = linalg.matmul ins(%collapsed_507, %801 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %803 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%802 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %804 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %805 = linalg.matmul ins(%collapsed_507, %804 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %806 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%805 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %807 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %808 = linalg.matmul ins(%collapsed_507, %807 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %809 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%808 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_508 = tensor.expand_shape %809 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_509 = tensor.expand_shape %803 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_509[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_509[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_510 = tensor.expand_shape %806 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_510[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_510[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %812 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%810, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%812 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_511 = tensor.collapse_shape %813 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%811, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%814 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_512 = tensor.collapse_shape %815 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %816 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_511 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_512 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_513 = tensor.extract_slice %817[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_514 = tensor.collapse_shape %extracted_slice_513 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_514 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_515 = tensor.concat dim(1) %expanded_58, %cst_23, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_516 = tensor.expand_shape %818 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %819 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_515 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %820 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_516, %819 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%743 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_517 = tensor.extract_slice %expanded_508[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_518 = tensor.collapse_shape %extracted_slice_517 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_518 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_519 = tensor.concat dim(1) %expanded_58, %cst_23, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_520 = tensor.expand_shape %821 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %822 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_519 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %823 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_520, %822 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%820 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_521 = tensor.extract_slice %817[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_522 = tensor.collapse_shape %extracted_slice_521 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %824 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_522 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_523 = tensor.concat dim(1) %expanded_72, %cst_23, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_524 = tensor.expand_shape %824 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %825 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_523 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %826 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_524, %825 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%823 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_525 = tensor.extract_slice %expanded_508[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_526 = tensor.collapse_shape %extracted_slice_525 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_526 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_527 = tensor.concat dim(1) %expanded_72, %cst_23, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_528 = tensor.expand_shape %827 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %828 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_527 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %829 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_528, %828 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%826 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_529 = tensor.extract_slice %817[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_530 = tensor.collapse_shape %extracted_slice_529 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_530 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_531 = tensor.concat dim(1) %expanded_87, %cst_23, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_532 = tensor.expand_shape %830 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %831 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_531 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %832 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_532, %831 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%829 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_533 = tensor.extract_slice %expanded_508[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_534 = tensor.collapse_shape %extracted_slice_533 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_534 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_535 = tensor.concat dim(1) %expanded_87, %cst_23, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_536 = tensor.expand_shape %833 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %834 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_535 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %835 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_536, %834 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%832 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_537 = tensor.extract_slice %817[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_538 = tensor.collapse_shape %extracted_slice_537 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_538 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_539 = tensor.concat dim(1) %expanded_102, %cst_23, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_540 = tensor.expand_shape %836 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %837 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_539 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %838 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_540, %837 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%835 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_541 = tensor.extract_slice %expanded_508[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_542 = tensor.collapse_shape %extracted_slice_541 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_542 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_543 = tensor.concat dim(1) %expanded_102, %cst_23, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_544 = tensor.expand_shape %839 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %840 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_543 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %841 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_544, %840 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%838 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %842 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c14_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_545 = tensor.collapse_shape %842 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_546 = tensor.collapse_shape %841 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_545 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_546[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_547 = tensor.expand_shape %843 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_548 = tensor.collapse_shape %expanded_547 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %844 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%842 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_549 = tensor.collapse_shape %844 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_549 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_546[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_550 = tensor.expand_shape %845 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_551 = tensor.collapse_shape %expanded_550 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_552 = tensor.expand_shape %collapsed_548 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %846 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_552 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_553 = tensor.collapse_shape %846 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_554 = tensor.expand_shape %collapsed_551 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_554 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_555 = tensor.collapse_shape %847 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%816 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_553 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_555 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%849 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_556 = tensor.collapse_shape %848 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_557 = tensor.collapse_shape %851 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %852 = linalg.batch_matmul ins(%collapsed_556, %collapsed_557 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_558 = tensor.expand_shape %852 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_558 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%853, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%854 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %856:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%855 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_559 = tensor.expand_shape %856#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%855, %expanded_559 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%857 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %859 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%858 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%858, %859 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%860 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_560 = tensor.collapse_shape %861 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_561 = tensor.collapse_shape %850 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %862 = linalg.batch_matmul ins(%collapsed_560, %collapsed_561 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_562 = tensor.expand_shape %862 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %863 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_562 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_563 = tensor.collapse_shape %863 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %864 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %865 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%864 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %866 = linalg.batch_matmul ins(%collapsed_563, %865 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %867 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%791, %866 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%867 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%868 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%869 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%870 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%871 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%872 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%868, %873 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%874, %__auto.blk.7.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%875 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %877 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_564 = tensor.collapse_shape %876 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %878 = linalg.matmul ins(%collapsed_564, %877 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %879 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%878 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_565 = tensor.expand_shape %879 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %880 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_565 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %881 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%880, %expanded_565 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %882 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %883 = linalg.matmul ins(%collapsed_564, %882 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %884 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%883 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_566 = tensor.expand_shape %884 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%881, %expanded_566 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %886 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.7.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_567 = tensor.collapse_shape %885 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %887 = linalg.matmul ins(%collapsed_567, %886 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %888 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%887 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_568 = tensor.expand_shape %888 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%867, %expanded_568 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%889 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%890 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %892 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%891 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%892 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%893 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%894 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%890, %895 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %897 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%896, %__auto.blk.8.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %898 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%897 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %899 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_569 = tensor.collapse_shape %898 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %900 = linalg.matmul ins(%collapsed_569, %899 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %901 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%900 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %902 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %903 = linalg.matmul ins(%collapsed_569, %902 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %904 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%903 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %905 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %906 = linalg.matmul ins(%collapsed_569, %905 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %907 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%906 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_570 = tensor.expand_shape %907 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_571 = tensor.expand_shape %901 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_571[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_571[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_572 = tensor.expand_shape %904 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_572[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_572[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %910 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%908, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%910 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_573 = tensor.collapse_shape %911 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%909, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%912 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_574 = tensor.collapse_shape %913 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %914 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_573 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_574 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_575 = tensor.extract_slice %915[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_576 = tensor.collapse_shape %extracted_slice_575 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_576 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_577 = tensor.concat dim(1) %expanded_58, %cst_22, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_578 = tensor.expand_shape %916 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %917 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_577 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %918 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_578, %917 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%841 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_579 = tensor.extract_slice %expanded_570[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_580 = tensor.collapse_shape %extracted_slice_579 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %919 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_580 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_581 = tensor.concat dim(1) %expanded_58, %cst_22, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_582 = tensor.expand_shape %919 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %920 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_581 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %921 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_582, %920 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%918 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_583 = tensor.extract_slice %915[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_584 = tensor.collapse_shape %extracted_slice_583 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %922 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_584 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_585 = tensor.concat dim(1) %expanded_72, %cst_22, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_586 = tensor.expand_shape %922 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %923 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_585 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %924 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_586, %923 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%921 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_587 = tensor.extract_slice %expanded_570[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_588 = tensor.collapse_shape %extracted_slice_587 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_588 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_589 = tensor.concat dim(1) %expanded_72, %cst_22, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_590 = tensor.expand_shape %925 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %926 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_589 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %927 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_590, %926 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%924 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_591 = tensor.extract_slice %915[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_592 = tensor.collapse_shape %extracted_slice_591 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_592 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_593 = tensor.concat dim(1) %expanded_87, %cst_22, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_594 = tensor.expand_shape %928 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %929 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_593 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %930 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_594, %929 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%927 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_595 = tensor.extract_slice %expanded_570[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_596 = tensor.collapse_shape %extracted_slice_595 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_596 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_597 = tensor.concat dim(1) %expanded_87, %cst_22, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_598 = tensor.expand_shape %931 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %932 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_597 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %933 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_598, %932 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%930 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_599 = tensor.extract_slice %915[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_600 = tensor.collapse_shape %extracted_slice_599 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_600 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_601 = tensor.concat dim(1) %expanded_102, %cst_22, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_602 = tensor.expand_shape %934 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %935 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_601 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %936 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_602, %935 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%933 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_603 = tensor.extract_slice %expanded_570[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_604 = tensor.collapse_shape %extracted_slice_603 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_604 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_605 = tensor.concat dim(1) %expanded_102, %cst_22, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_606 = tensor.expand_shape %937 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %938 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_605 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %939 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_606, %938 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%936 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %940 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c16_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_607 = tensor.collapse_shape %940 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_608 = tensor.collapse_shape %939 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_607 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_608[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_609 = tensor.expand_shape %941 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_610 = tensor.collapse_shape %expanded_609 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %942 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%940 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_611 = tensor.collapse_shape %942 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_611 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_608[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_612 = tensor.expand_shape %943 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_613 = tensor.collapse_shape %expanded_612 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_614 = tensor.expand_shape %collapsed_610 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %944 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_614 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_615 = tensor.collapse_shape %944 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_616 = tensor.expand_shape %collapsed_613 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_616 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_617 = tensor.collapse_shape %945 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%914 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_615 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_617 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%947 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_618 = tensor.collapse_shape %946 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_619 = tensor.collapse_shape %949 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %950 = linalg.batch_matmul ins(%collapsed_618, %collapsed_619 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_620 = tensor.expand_shape %950 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_620 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%951, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%952 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %954:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%953 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_621 = tensor.expand_shape %954#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%953, %expanded_621 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %956 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%955 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %957 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%956 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%956, %957 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %959 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%958 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_622 = tensor.collapse_shape %959 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_623 = tensor.collapse_shape %948 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %960 = linalg.batch_matmul ins(%collapsed_622, %collapsed_623 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_624 = tensor.expand_shape %960 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %961 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_624 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_625 = tensor.collapse_shape %961 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %962 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%962 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %964 = linalg.batch_matmul ins(%collapsed_625, %963 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %965 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%889, %964 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%965 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%966 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%967 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%968 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%969 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%970 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%966, %971 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%972, %__auto.blk.8.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%973 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %975 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_626 = tensor.collapse_shape %974 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %976 = linalg.matmul ins(%collapsed_626, %975 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %977 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%976 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_627 = tensor.expand_shape %977 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %978 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_627 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %979 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%978, %expanded_627 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %980 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %981 = linalg.matmul ins(%collapsed_626, %980 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %982 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%981 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_628 = tensor.expand_shape %982 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%979, %expanded_628 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %984 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.8.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_629 = tensor.collapse_shape %983 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %985 = linalg.matmul ins(%collapsed_629, %984 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %986 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%985 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_630 = tensor.expand_shape %986 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%965, %expanded_630 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%987 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%988 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%989 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%990 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%991 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%992 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %994 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%988, %993 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%994, %__auto.blk.9.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %996 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%995 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %997 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_631 = tensor.collapse_shape %996 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %998 = linalg.matmul ins(%collapsed_631, %997 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %999 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%998 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1000 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1001 = linalg.matmul ins(%collapsed_631, %1000 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1002 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1001 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1003 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1004 = linalg.matmul ins(%collapsed_631, %1003 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1005 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1004 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_632 = tensor.expand_shape %1005 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_633 = tensor.expand_shape %999 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_633[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_633[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_634 = tensor.expand_shape %1002 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_634[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_634[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1008 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1006, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1008 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_635 = tensor.collapse_shape %1009 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1007, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1011 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1010 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_636 = tensor.collapse_shape %1011 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_635 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_636 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_637 = tensor.extract_slice %1013[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_638 = tensor.collapse_shape %extracted_slice_637 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_638 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_639 = tensor.concat dim(1) %expanded_58, %cst_21, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_640 = tensor.expand_shape %1014 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1015 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_639 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1016 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_640, %1015 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%939 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_641 = tensor.extract_slice %expanded_632[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_642 = tensor.collapse_shape %extracted_slice_641 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_642 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_643 = tensor.concat dim(1) %expanded_58, %cst_21, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_644 = tensor.expand_shape %1017 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1018 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_643 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1019 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_644, %1018 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1016 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_645 = tensor.extract_slice %1013[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_646 = tensor.collapse_shape %extracted_slice_645 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1020 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_646 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_647 = tensor.concat dim(1) %expanded_72, %cst_21, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_648 = tensor.expand_shape %1020 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1021 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_647 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1022 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_648, %1021 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1019 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_649 = tensor.extract_slice %expanded_632[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_650 = tensor.collapse_shape %extracted_slice_649 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_650 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_651 = tensor.concat dim(1) %expanded_72, %cst_21, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_652 = tensor.expand_shape %1023 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1024 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_651 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1025 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_652, %1024 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1022 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_653 = tensor.extract_slice %1013[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_654 = tensor.collapse_shape %extracted_slice_653 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_654 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_655 = tensor.concat dim(1) %expanded_87, %cst_21, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_656 = tensor.expand_shape %1026 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1027 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_655 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1028 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_656, %1027 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1025 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_657 = tensor.extract_slice %expanded_632[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_658 = tensor.collapse_shape %extracted_slice_657 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_658 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_659 = tensor.concat dim(1) %expanded_87, %cst_21, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_660 = tensor.expand_shape %1029 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1030 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_659 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1031 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_660, %1030 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1028 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_661 = tensor.extract_slice %1013[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_662 = tensor.collapse_shape %extracted_slice_661 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1032 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_662 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_663 = tensor.concat dim(1) %expanded_102, %cst_21, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_664 = tensor.expand_shape %1032 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1033 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_663 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1034 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_664, %1033 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1031 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_665 = tensor.extract_slice %expanded_632[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_666 = tensor.collapse_shape %extracted_slice_665 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1035 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_666 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_667 = tensor.concat dim(1) %expanded_102, %cst_21, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_668 = tensor.expand_shape %1035 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1036 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_667 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1037 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_668, %1036 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1034 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1038 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c18_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_669 = tensor.collapse_shape %1038 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_670 = tensor.collapse_shape %1037 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_669 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_670[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_671 = tensor.expand_shape %1039 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_672 = tensor.collapse_shape %expanded_671 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1040 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1038 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_673 = tensor.collapse_shape %1040 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_673 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_670[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_674 = tensor.expand_shape %1041 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_675 = tensor.collapse_shape %expanded_674 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_676 = tensor.expand_shape %collapsed_672 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1042 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_676 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_677 = tensor.collapse_shape %1042 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_678 = tensor.expand_shape %collapsed_675 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_678 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_679 = tensor.collapse_shape %1043 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1012 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_677 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_679 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1045 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_680 = tensor.collapse_shape %1044 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_681 = tensor.collapse_shape %1047 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1048 = linalg.batch_matmul ins(%collapsed_680, %collapsed_681 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_682 = tensor.expand_shape %1048 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_682 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1049, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1050 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1052:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1051 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_683 = tensor.expand_shape %1052#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1051, %expanded_683 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1053 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1055 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1054 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1054, %1055 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1057 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1056 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_684 = tensor.collapse_shape %1057 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_685 = tensor.collapse_shape %1046 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1058 = linalg.batch_matmul ins(%collapsed_684, %collapsed_685 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_686 = tensor.expand_shape %1058 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1059 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_686 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_687 = tensor.collapse_shape %1059 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1060 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1060 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1062 = linalg.batch_matmul ins(%collapsed_687, %1061 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1063 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%987, %1062 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1063 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1064 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1065 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1066 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1067 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1068 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1064, %1069 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1070, %__auto.blk.9.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1071 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1073 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_688 = tensor.collapse_shape %1072 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1074 = linalg.matmul ins(%collapsed_688, %1073 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1075 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1074 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_689 = tensor.expand_shape %1075 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1076 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_689 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1077 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1076, %expanded_689 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1078 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1079 = linalg.matmul ins(%collapsed_688, %1078 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1080 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1079 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_690 = tensor.expand_shape %1080 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1077, %expanded_690 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1082 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.9.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_691 = tensor.collapse_shape %1081 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1083 = linalg.matmul ins(%collapsed_691, %1082 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1084 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1083 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_692 = tensor.expand_shape %1084 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1063, %expanded_692 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1085 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1086 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1087 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1088 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1089 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1091 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1090 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1092 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1086, %1091 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1092, %__auto.blk.10.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1094 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1093 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1095 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_693 = tensor.collapse_shape %1094 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1096 = linalg.matmul ins(%collapsed_693, %1095 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1097 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1096 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1098 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1099 = linalg.matmul ins(%collapsed_693, %1098 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1100 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1099 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1101 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1102 = linalg.matmul ins(%collapsed_693, %1101 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1103 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1102 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_694 = tensor.expand_shape %1103 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_695 = tensor.expand_shape %1097 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_695[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_695[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_696 = tensor.expand_shape %1100 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_696[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_696[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1106 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1104, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1106 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_697 = tensor.collapse_shape %1107 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1108 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1105, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1108 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_698 = tensor.collapse_shape %1109 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_697 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_698 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_699 = tensor.extract_slice %1111[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_700 = tensor.collapse_shape %extracted_slice_699 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_700 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_701 = tensor.concat dim(1) %expanded_58, %cst_20, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_702 = tensor.expand_shape %1112 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1113 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_701 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1114 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_702, %1113 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1037 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_703 = tensor.extract_slice %expanded_694[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_704 = tensor.collapse_shape %extracted_slice_703 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_704 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_705 = tensor.concat dim(1) %expanded_58, %cst_20, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_706 = tensor.expand_shape %1115 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1116 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_705 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1117 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_706, %1116 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1114 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_707 = tensor.extract_slice %1111[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_708 = tensor.collapse_shape %extracted_slice_707 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1118 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_708 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_709 = tensor.concat dim(1) %expanded_72, %cst_20, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_710 = tensor.expand_shape %1118 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1119 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_709 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1120 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_710, %1119 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1117 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_711 = tensor.extract_slice %expanded_694[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_712 = tensor.collapse_shape %extracted_slice_711 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_712 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_713 = tensor.concat dim(1) %expanded_72, %cst_20, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_714 = tensor.expand_shape %1121 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1122 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_713 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1123 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_714, %1122 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1120 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_715 = tensor.extract_slice %1111[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_716 = tensor.collapse_shape %extracted_slice_715 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_716 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_717 = tensor.concat dim(1) %expanded_87, %cst_20, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_718 = tensor.expand_shape %1124 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1125 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_717 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1126 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_718, %1125 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1123 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_719 = tensor.extract_slice %expanded_694[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_720 = tensor.collapse_shape %extracted_slice_719 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_720 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_721 = tensor.concat dim(1) %expanded_87, %cst_20, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_722 = tensor.expand_shape %1127 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1128 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_721 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1129 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_722, %1128 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1126 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_723 = tensor.extract_slice %1111[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_724 = tensor.collapse_shape %extracted_slice_723 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_724 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_725 = tensor.concat dim(1) %expanded_102, %cst_20, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_726 = tensor.expand_shape %1130 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1131 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_725 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1132 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_726, %1131 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1129 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_727 = tensor.extract_slice %expanded_694[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_728 = tensor.collapse_shape %extracted_slice_727 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_728 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_729 = tensor.concat dim(1) %expanded_102, %cst_20, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_730 = tensor.expand_shape %1133 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1134 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_729 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1135 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_730, %1134 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1132 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1136 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c20_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_731 = tensor.collapse_shape %1136 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_732 = tensor.collapse_shape %1135 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_731 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_732[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_733 = tensor.expand_shape %1137 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_734 = tensor.collapse_shape %expanded_733 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1138 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1136 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_735 = tensor.collapse_shape %1138 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_735 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_732[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_736 = tensor.expand_shape %1139 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_737 = tensor.collapse_shape %expanded_736 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_738 = tensor.expand_shape %collapsed_734 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1140 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_738 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_739 = tensor.collapse_shape %1140 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_740 = tensor.expand_shape %collapsed_737 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_740 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_741 = tensor.collapse_shape %1141 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1110 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_739 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_741 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1143 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_742 = tensor.collapse_shape %1142 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_743 = tensor.collapse_shape %1145 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1146 = linalg.batch_matmul ins(%collapsed_742, %collapsed_743 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_744 = tensor.expand_shape %1146 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_744 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1147, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1148 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1150:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1149 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_745 = tensor.expand_shape %1150#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1149, %expanded_745 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1151 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1153 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1152 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1152, %1153 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1154 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_746 = tensor.collapse_shape %1155 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_747 = tensor.collapse_shape %1144 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1156 = linalg.batch_matmul ins(%collapsed_746, %collapsed_747 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_748 = tensor.expand_shape %1156 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1157 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_748 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_749 = tensor.collapse_shape %1157 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1158 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1158 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1160 = linalg.batch_matmul ins(%collapsed_749, %1159 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1161 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1085, %1160 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1161 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1162 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1163 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1164 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1165 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1166 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1162, %1167 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1168, %__auto.blk.10.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1169 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1171 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_750 = tensor.collapse_shape %1170 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1172 = linalg.matmul ins(%collapsed_750, %1171 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1173 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1172 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_751 = tensor.expand_shape %1173 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1174 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_751 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1175 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1174, %expanded_751 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1176 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1177 = linalg.matmul ins(%collapsed_750, %1176 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1178 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1177 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_752 = tensor.expand_shape %1178 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1175, %expanded_752 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1180 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.10.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_753 = tensor.collapse_shape %1179 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1181 = linalg.matmul ins(%collapsed_753, %1180 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1182 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1181 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_754 = tensor.expand_shape %1182 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1161, %expanded_754 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1183 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1184 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1185 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1186 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1187 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1188 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1184, %1189 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1190, %__auto.blk.11.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1192 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1191 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1193 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_755 = tensor.collapse_shape %1192 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1194 = linalg.matmul ins(%collapsed_755, %1193 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1195 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1194 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1196 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1197 = linalg.matmul ins(%collapsed_755, %1196 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1198 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1197 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1199 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1200 = linalg.matmul ins(%collapsed_755, %1199 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1201 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1200 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_756 = tensor.expand_shape %1201 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_757 = tensor.expand_shape %1195 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_757[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_757[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_758 = tensor.expand_shape %1198 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_758[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_758[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1204 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1202, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1204 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_759 = tensor.collapse_shape %1205 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1203, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1206 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_760 = tensor.collapse_shape %1207 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_759 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_760 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_761 = tensor.extract_slice %1209[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_762 = tensor.collapse_shape %extracted_slice_761 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_762 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_763 = tensor.concat dim(1) %expanded_58, %cst_19, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_764 = tensor.expand_shape %1210 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1211 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_763 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1212 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_764, %1211 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1135 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_765 = tensor.extract_slice %expanded_756[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_766 = tensor.collapse_shape %extracted_slice_765 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_766 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_767 = tensor.concat dim(1) %expanded_58, %cst_19, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_768 = tensor.expand_shape %1213 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1214 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_767 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1215 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_768, %1214 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1212 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_769 = tensor.extract_slice %1209[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_770 = tensor.collapse_shape %extracted_slice_769 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1216 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_770 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_771 = tensor.concat dim(1) %expanded_72, %cst_19, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_772 = tensor.expand_shape %1216 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1217 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_771 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1218 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_772, %1217 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1215 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_773 = tensor.extract_slice %expanded_756[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_774 = tensor.collapse_shape %extracted_slice_773 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_774 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_775 = tensor.concat dim(1) %expanded_72, %cst_19, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_776 = tensor.expand_shape %1219 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1220 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_775 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1221 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_776, %1220 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1218 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_777 = tensor.extract_slice %1209[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_778 = tensor.collapse_shape %extracted_slice_777 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_778 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_779 = tensor.concat dim(1) %expanded_87, %cst_19, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_780 = tensor.expand_shape %1222 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1223 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_779 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1224 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_780, %1223 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1221 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_781 = tensor.extract_slice %expanded_756[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_782 = tensor.collapse_shape %extracted_slice_781 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_782 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_783 = tensor.concat dim(1) %expanded_87, %cst_19, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_784 = tensor.expand_shape %1225 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1226 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_783 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1227 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_784, %1226 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1224 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_785 = tensor.extract_slice %1209[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_786 = tensor.collapse_shape %extracted_slice_785 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_786 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_787 = tensor.concat dim(1) %expanded_102, %cst_19, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_788 = tensor.expand_shape %1228 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1229 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_787 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1230 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_788, %1229 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1227 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_789 = tensor.extract_slice %expanded_756[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_790 = tensor.collapse_shape %extracted_slice_789 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_790 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_791 = tensor.concat dim(1) %expanded_102, %cst_19, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_792 = tensor.expand_shape %1231 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1232 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_791 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1233 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_792, %1232 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1230 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1234 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c22_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_793 = tensor.collapse_shape %1234 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_794 = tensor.collapse_shape %1233 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_793 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_794[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_795 = tensor.expand_shape %1235 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_796 = tensor.collapse_shape %expanded_795 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1236 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1234 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_797 = tensor.collapse_shape %1236 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_797 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_794[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_798 = tensor.expand_shape %1237 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_799 = tensor.collapse_shape %expanded_798 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_800 = tensor.expand_shape %collapsed_796 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1238 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_800 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_801 = tensor.collapse_shape %1238 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_802 = tensor.expand_shape %collapsed_799 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_802 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_803 = tensor.collapse_shape %1239 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1208 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_801 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_803 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1241 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_804 = tensor.collapse_shape %1240 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_805 = tensor.collapse_shape %1243 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1244 = linalg.batch_matmul ins(%collapsed_804, %collapsed_805 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_806 = tensor.expand_shape %1244 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_806 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1245, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1246 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1248:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1247 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_807 = tensor.expand_shape %1248#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1247, %expanded_807 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1249 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1251 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1250 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1250, %1251 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1252 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_808 = tensor.collapse_shape %1253 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_809 = tensor.collapse_shape %1242 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1254 = linalg.batch_matmul ins(%collapsed_808, %collapsed_809 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_810 = tensor.expand_shape %1254 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1255 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_810 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_811 = tensor.collapse_shape %1255 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1256 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1256 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1258 = linalg.batch_matmul ins(%collapsed_811, %1257 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1259 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1183, %1258 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1260 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1259 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1260 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1261 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1262 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1263 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1264 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1260, %1265 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1266, %__auto.blk.11.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1267 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1269 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_812 = tensor.collapse_shape %1268 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1270 = linalg.matmul ins(%collapsed_812, %1269 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1271 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1270 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_813 = tensor.expand_shape %1271 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1272 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_813 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1273 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1272, %expanded_813 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1274 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1275 = linalg.matmul ins(%collapsed_812, %1274 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1276 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1275 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_814 = tensor.expand_shape %1276 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1277 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1273, %expanded_814 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1278 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.11.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_815 = tensor.collapse_shape %1277 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1279 = linalg.matmul ins(%collapsed_815, %1278 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1280 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1279 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_816 = tensor.expand_shape %1280 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1259, %expanded_816 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1281 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1282 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1283 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1284 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1285 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1286 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1282, %1287 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1289 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1288, %__auto.blk.12.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1290 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1289 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1291 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_817 = tensor.collapse_shape %1290 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1292 = linalg.matmul ins(%collapsed_817, %1291 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1293 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1292 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1294 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1295 = linalg.matmul ins(%collapsed_817, %1294 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1296 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1295 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1297 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1298 = linalg.matmul ins(%collapsed_817, %1297 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1299 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1298 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_818 = tensor.expand_shape %1299 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_819 = tensor.expand_shape %1293 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_819[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_819[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_820 = tensor.expand_shape %1296 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1301 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_820[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_820[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1302 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1300, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1302 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_821 = tensor.collapse_shape %1303 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1304 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1301, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1305 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1304 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_822 = tensor.collapse_shape %1305 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_821 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1307 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_822 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_823 = tensor.extract_slice %1307[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_824 = tensor.collapse_shape %extracted_slice_823 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1308 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_824 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_825 = tensor.concat dim(1) %expanded_58, %cst_18, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_826 = tensor.expand_shape %1308 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1309 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_825 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1310 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_826, %1309 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1233 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_827 = tensor.extract_slice %expanded_818[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_828 = tensor.collapse_shape %extracted_slice_827 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1311 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_828 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_829 = tensor.concat dim(1) %expanded_58, %cst_18, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_830 = tensor.expand_shape %1311 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1312 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_829 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1313 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_830, %1312 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1310 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_831 = tensor.extract_slice %1307[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_832 = tensor.collapse_shape %extracted_slice_831 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1314 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_832 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_833 = tensor.concat dim(1) %expanded_72, %cst_18, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_834 = tensor.expand_shape %1314 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1315 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_833 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1316 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_834, %1315 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1313 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_835 = tensor.extract_slice %expanded_818[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_836 = tensor.collapse_shape %extracted_slice_835 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_836 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_837 = tensor.concat dim(1) %expanded_72, %cst_18, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_838 = tensor.expand_shape %1317 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1318 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_837 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1319 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_838, %1318 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1316 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_839 = tensor.extract_slice %1307[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_840 = tensor.collapse_shape %extracted_slice_839 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_840 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_841 = tensor.concat dim(1) %expanded_87, %cst_18, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_842 = tensor.expand_shape %1320 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1321 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_841 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1322 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_842, %1321 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1319 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_843 = tensor.extract_slice %expanded_818[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_844 = tensor.collapse_shape %extracted_slice_843 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_844 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_845 = tensor.concat dim(1) %expanded_87, %cst_18, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_846 = tensor.expand_shape %1323 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1324 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_845 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1325 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_846, %1324 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1322 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_847 = tensor.extract_slice %1307[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_848 = tensor.collapse_shape %extracted_slice_847 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1326 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_848 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_849 = tensor.concat dim(1) %expanded_102, %cst_18, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_850 = tensor.expand_shape %1326 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1327 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_849 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1328 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_850, %1327 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1325 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_851 = tensor.extract_slice %expanded_818[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_852 = tensor.collapse_shape %extracted_slice_851 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_852 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_853 = tensor.concat dim(1) %expanded_102, %cst_18, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_854 = tensor.expand_shape %1329 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1330 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_853 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1331 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_854, %1330 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1328 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1332 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c24_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_855 = tensor.collapse_shape %1332 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_856 = tensor.collapse_shape %1331 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_855 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_856[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_857 = tensor.expand_shape %1333 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_858 = tensor.collapse_shape %expanded_857 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1334 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1332 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_859 = tensor.collapse_shape %1334 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_859 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_856[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_860 = tensor.expand_shape %1335 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_861 = tensor.collapse_shape %expanded_860 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_862 = tensor.expand_shape %collapsed_858 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1336 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_862 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_863 = tensor.collapse_shape %1336 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_864 = tensor.expand_shape %collapsed_861 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_864 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_865 = tensor.collapse_shape %1337 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1306 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_863 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_865 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1339 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_866 = tensor.collapse_shape %1338 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_867 = tensor.collapse_shape %1341 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1342 = linalg.batch_matmul ins(%collapsed_866, %collapsed_867 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_868 = tensor.expand_shape %1342 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_868 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1343, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1344 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1346:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1345 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_869 = tensor.expand_shape %1346#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1347 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1345, %expanded_869 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1348 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1347 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1349 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1348 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1348, %1349 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1350 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_870 = tensor.collapse_shape %1351 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_871 = tensor.collapse_shape %1340 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1352 = linalg.batch_matmul ins(%collapsed_870, %collapsed_871 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_872 = tensor.expand_shape %1352 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1353 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_872 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_873 = tensor.collapse_shape %1353 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1354 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1354 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1356 = linalg.batch_matmul ins(%collapsed_873, %1355 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1357 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1281, %1356 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1358 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1357 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1358 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1359 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1360 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1361 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1362 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1358, %1363 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1364, %__auto.blk.12.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1365 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1367 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_874 = tensor.collapse_shape %1366 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1368 = linalg.matmul ins(%collapsed_874, %1367 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1369 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1368 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_875 = tensor.expand_shape %1369 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1370 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_875 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1371 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1370, %expanded_875 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1372 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1373 = linalg.matmul ins(%collapsed_874, %1372 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1374 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1373 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_876 = tensor.expand_shape %1374 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1375 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1371, %expanded_876 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1376 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.12.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_877 = tensor.collapse_shape %1375 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1377 = linalg.matmul ins(%collapsed_877, %1376 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1378 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1377 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_878 = tensor.expand_shape %1378 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1357, %expanded_878 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1379 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1380 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1381 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1382 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1383 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1384 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1380, %1385 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1387 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1386, %__auto.blk.13.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1388 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1387 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1389 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_879 = tensor.collapse_shape %1388 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1390 = linalg.matmul ins(%collapsed_879, %1389 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1391 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1390 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1392 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1393 = linalg.matmul ins(%collapsed_879, %1392 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1394 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1393 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1395 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1396 = linalg.matmul ins(%collapsed_879, %1395 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1397 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1396 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_880 = tensor.expand_shape %1397 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_881 = tensor.expand_shape %1391 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_881[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_881[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_882 = tensor.expand_shape %1394 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1399 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_882[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_882[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1400 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1398, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1400 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_883 = tensor.collapse_shape %1401 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1402 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1399, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1403 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1402 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_884 = tensor.collapse_shape %1403 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_883 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1405 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_884 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_885 = tensor.extract_slice %1405[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_886 = tensor.collapse_shape %extracted_slice_885 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1406 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_886 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_887 = tensor.concat dim(1) %expanded_58, %cst_17, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_888 = tensor.expand_shape %1406 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1407 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_887 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1408 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_888, %1407 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1331 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_889 = tensor.extract_slice %expanded_880[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_890 = tensor.collapse_shape %extracted_slice_889 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1409 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_890 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_891 = tensor.concat dim(1) %expanded_58, %cst_17, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_892 = tensor.expand_shape %1409 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1410 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_891 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1411 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_892, %1410 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1408 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_893 = tensor.extract_slice %1405[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_894 = tensor.collapse_shape %extracted_slice_893 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1412 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_894 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_895 = tensor.concat dim(1) %expanded_72, %cst_17, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_896 = tensor.expand_shape %1412 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1413 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_895 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1414 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_896, %1413 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1411 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_897 = tensor.extract_slice %expanded_880[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_898 = tensor.collapse_shape %extracted_slice_897 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_898 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_899 = tensor.concat dim(1) %expanded_72, %cst_17, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_900 = tensor.expand_shape %1415 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1416 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_899 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1417 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_900, %1416 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1414 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_901 = tensor.extract_slice %1405[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_902 = tensor.collapse_shape %extracted_slice_901 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_902 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_903 = tensor.concat dim(1) %expanded_87, %cst_17, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_904 = tensor.expand_shape %1418 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1419 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_903 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1420 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_904, %1419 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1417 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_905 = tensor.extract_slice %expanded_880[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_906 = tensor.collapse_shape %extracted_slice_905 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_906 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_907 = tensor.concat dim(1) %expanded_87, %cst_17, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_908 = tensor.expand_shape %1421 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1422 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_907 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1423 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_908, %1422 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1420 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_909 = tensor.extract_slice %1405[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_910 = tensor.collapse_shape %extracted_slice_909 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1424 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_910 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_911 = tensor.concat dim(1) %expanded_102, %cst_17, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_912 = tensor.expand_shape %1424 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1425 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_911 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1426 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_912, %1425 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1423 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_913 = tensor.extract_slice %expanded_880[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_914 = tensor.collapse_shape %extracted_slice_913 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1427 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_914 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_915 = tensor.concat dim(1) %expanded_102, %cst_17, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_916 = tensor.expand_shape %1427 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1428 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_915 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1429 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_916, %1428 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1426 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1430 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c26_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_917 = tensor.collapse_shape %1430 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_918 = tensor.collapse_shape %1429 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_917 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_918[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_919 = tensor.expand_shape %1431 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_920 = tensor.collapse_shape %expanded_919 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1432 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1430 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_921 = tensor.collapse_shape %1432 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_921 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_918[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_922 = tensor.expand_shape %1433 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_923 = tensor.collapse_shape %expanded_922 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_924 = tensor.expand_shape %collapsed_920 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1434 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_924 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_925 = tensor.collapse_shape %1434 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_926 = tensor.expand_shape %collapsed_923 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_926 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_927 = tensor.collapse_shape %1435 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1404 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_925 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_927 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1437 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_928 = tensor.collapse_shape %1436 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_929 = tensor.collapse_shape %1439 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1440 = linalg.batch_matmul ins(%collapsed_928, %collapsed_929 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_930 = tensor.expand_shape %1440 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_930 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1441, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1442 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1444:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1443 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_931 = tensor.expand_shape %1444#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1445 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1443, %expanded_931 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1446 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1445 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1447 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1446 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1446, %1447 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1449 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1448 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_932 = tensor.collapse_shape %1449 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_933 = tensor.collapse_shape %1438 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1450 = linalg.batch_matmul ins(%collapsed_932, %collapsed_933 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_934 = tensor.expand_shape %1450 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1451 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_934 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_935 = tensor.collapse_shape %1451 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1452 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1452 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1454 = linalg.batch_matmul ins(%collapsed_935, %1453 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1455 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1379, %1454 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1456 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1455 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1456 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1457 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1458 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1459 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1460 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1456, %1461 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1462, %__auto.blk.13.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1463 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1465 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_936 = tensor.collapse_shape %1464 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1466 = linalg.matmul ins(%collapsed_936, %1465 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1467 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1466 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_937 = tensor.expand_shape %1467 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1468 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_937 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1469 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1468, %expanded_937 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1470 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1471 = linalg.matmul ins(%collapsed_936, %1470 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1472 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1471 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_938 = tensor.expand_shape %1472 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1473 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1469, %expanded_938 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1474 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.13.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_939 = tensor.collapse_shape %1473 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1475 = linalg.matmul ins(%collapsed_939, %1474 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1476 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1475 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_940 = tensor.expand_shape %1476 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1455, %expanded_940 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1477 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1478 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1479 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1480 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1481 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1482 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1478, %1483 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1485 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1484, %__auto.blk.14.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1486 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1485 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1487 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_941 = tensor.collapse_shape %1486 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1488 = linalg.matmul ins(%collapsed_941, %1487 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1489 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1488 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1490 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1491 = linalg.matmul ins(%collapsed_941, %1490 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1492 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1491 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1493 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1494 = linalg.matmul ins(%collapsed_941, %1493 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1495 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1494 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_942 = tensor.expand_shape %1495 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_943 = tensor.expand_shape %1489 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_943[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_943[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_944 = tensor.expand_shape %1492 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1497 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_944[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_944[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1498 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1496, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1498 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_945 = tensor.collapse_shape %1499 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1500 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1497, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1501 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1500 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_946 = tensor.collapse_shape %1501 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_945 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1503 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_946 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_947 = tensor.extract_slice %1503[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_948 = tensor.collapse_shape %extracted_slice_947 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1504 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_948 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_949 = tensor.concat dim(1) %expanded_58, %cst_16, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_950 = tensor.expand_shape %1504 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1505 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_949 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1506 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_950, %1505 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1429 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_951 = tensor.extract_slice %expanded_942[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_952 = tensor.collapse_shape %extracted_slice_951 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1507 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_952 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_953 = tensor.concat dim(1) %expanded_58, %cst_16, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_954 = tensor.expand_shape %1507 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1508 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_953 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1509 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_954, %1508 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1506 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_955 = tensor.extract_slice %1503[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_956 = tensor.collapse_shape %extracted_slice_955 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1510 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_956 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_957 = tensor.concat dim(1) %expanded_72, %cst_16, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_958 = tensor.expand_shape %1510 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1511 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_957 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1512 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_958, %1511 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1509 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_959 = tensor.extract_slice %expanded_942[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_960 = tensor.collapse_shape %extracted_slice_959 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_960 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_961 = tensor.concat dim(1) %expanded_72, %cst_16, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_962 = tensor.expand_shape %1513 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1514 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_961 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1515 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_962, %1514 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1512 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_963 = tensor.extract_slice %1503[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_964 = tensor.collapse_shape %extracted_slice_963 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_964 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_965 = tensor.concat dim(1) %expanded_87, %cst_16, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_966 = tensor.expand_shape %1516 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1517 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_965 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1518 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_966, %1517 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1515 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_967 = tensor.extract_slice %expanded_942[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_968 = tensor.collapse_shape %extracted_slice_967 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_968 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_969 = tensor.concat dim(1) %expanded_87, %cst_16, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_970 = tensor.expand_shape %1519 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1520 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_969 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1521 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_970, %1520 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1518 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_971 = tensor.extract_slice %1503[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_972 = tensor.collapse_shape %extracted_slice_971 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1522 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_972 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_973 = tensor.concat dim(1) %expanded_102, %cst_16, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_974 = tensor.expand_shape %1522 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1523 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_973 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1524 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_974, %1523 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1521 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_975 = tensor.extract_slice %expanded_942[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_976 = tensor.collapse_shape %extracted_slice_975 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_976 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_977 = tensor.concat dim(1) %expanded_102, %cst_16, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_978 = tensor.expand_shape %1525 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1526 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_977 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1527 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_978, %1526 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1524 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1528 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c28_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_979 = tensor.collapse_shape %1528 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_980 = tensor.collapse_shape %1527 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_979 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_980[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_981 = tensor.expand_shape %1529 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_982 = tensor.collapse_shape %expanded_981 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1530 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1528 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_983 = tensor.collapse_shape %1530 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_983 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_980[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_984 = tensor.expand_shape %1531 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_985 = tensor.collapse_shape %expanded_984 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_986 = tensor.expand_shape %collapsed_982 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1532 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_986 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_987 = tensor.collapse_shape %1532 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_988 = tensor.expand_shape %collapsed_985 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_988 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_989 = tensor.collapse_shape %1533 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1502 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_987 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_989 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1535 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_990 = tensor.collapse_shape %1534 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_991 = tensor.collapse_shape %1537 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1538 = linalg.batch_matmul ins(%collapsed_990, %collapsed_991 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_992 = tensor.expand_shape %1538 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_992 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1539, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1540 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1542:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1541 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_993 = tensor.expand_shape %1542#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1543 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1541, %expanded_993 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1544 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1543 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1545 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1544 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1544, %1545 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1546 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_994 = tensor.collapse_shape %1547 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_995 = tensor.collapse_shape %1536 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1548 = linalg.batch_matmul ins(%collapsed_994, %collapsed_995 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_996 = tensor.expand_shape %1548 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1549 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_996 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_997 = tensor.collapse_shape %1549 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1550 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1550 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1552 = linalg.batch_matmul ins(%collapsed_997, %1551 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1553 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1477, %1552 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1554 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1553 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1554 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1555 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1556 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1557 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1558 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1554, %1559 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1560, %__auto.blk.14.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1561 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1563 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_998 = tensor.collapse_shape %1562 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1564 = linalg.matmul ins(%collapsed_998, %1563 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1565 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1564 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_999 = tensor.expand_shape %1565 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1566 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_999 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1567 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1566, %expanded_999 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1568 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1569 = linalg.matmul ins(%collapsed_998, %1568 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1570 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1569 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1000 = tensor.expand_shape %1570 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1571 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1567, %expanded_1000 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1572 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.14.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1001 = tensor.collapse_shape %1571 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1573 = linalg.matmul ins(%collapsed_1001, %1572 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1574 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1573 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1002 = tensor.expand_shape %1574 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1553, %expanded_1002 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1575 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1576 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1577 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1578 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1579 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1580 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1576, %1581 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1583 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1582, %__auto.blk.15.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1584 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1583 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1585 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1003 = tensor.collapse_shape %1584 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1586 = linalg.matmul ins(%collapsed_1003, %1585 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1587 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1586 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1588 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1589 = linalg.matmul ins(%collapsed_1003, %1588 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1590 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1589 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1591 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1592 = linalg.matmul ins(%collapsed_1003, %1591 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1593 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1592 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1004 = tensor.expand_shape %1593 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1005 = tensor.expand_shape %1587 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1005[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1005[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1006 = tensor.expand_shape %1590 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1595 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1006[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1006[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1596 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1594, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1596 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1007 = tensor.collapse_shape %1597 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1598 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1595, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1599 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1598 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1008 = tensor.collapse_shape %1599 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1600 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1007 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1601 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1008 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1009 = tensor.extract_slice %1601[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1010 = tensor.collapse_shape %extracted_slice_1009 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1602 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1010 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1011 = tensor.concat dim(1) %expanded_58, %cst_15, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1012 = tensor.expand_shape %1602 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1603 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1011 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1604 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1012, %1603 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1527 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1013 = tensor.extract_slice %expanded_1004[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1014 = tensor.collapse_shape %extracted_slice_1013 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1605 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1014 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1015 = tensor.concat dim(1) %expanded_58, %cst_15, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1016 = tensor.expand_shape %1605 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1606 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1015 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1607 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1016, %1606 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1604 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1017 = tensor.extract_slice %1601[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1018 = tensor.collapse_shape %extracted_slice_1017 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1608 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1018 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1019 = tensor.concat dim(1) %expanded_72, %cst_15, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1020 = tensor.expand_shape %1608 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1609 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1019 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1610 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1020, %1609 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1607 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1021 = tensor.extract_slice %expanded_1004[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1022 = tensor.collapse_shape %extracted_slice_1021 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1022 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1023 = tensor.concat dim(1) %expanded_72, %cst_15, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1024 = tensor.expand_shape %1611 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1612 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1023 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1613 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1024, %1612 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1610 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1025 = tensor.extract_slice %1601[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1026 = tensor.collapse_shape %extracted_slice_1025 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1026 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1027 = tensor.concat dim(1) %expanded_87, %cst_15, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1028 = tensor.expand_shape %1614 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1615 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1027 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1616 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1028, %1615 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1613 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1029 = tensor.extract_slice %expanded_1004[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1030 = tensor.collapse_shape %extracted_slice_1029 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1030 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1031 = tensor.concat dim(1) %expanded_87, %cst_15, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1032 = tensor.expand_shape %1617 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1618 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1031 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1619 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1032, %1618 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1616 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1033 = tensor.extract_slice %1601[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1034 = tensor.collapse_shape %extracted_slice_1033 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1620 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1034 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1035 = tensor.concat dim(1) %expanded_102, %cst_15, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1036 = tensor.expand_shape %1620 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1621 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1035 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1622 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1036, %1621 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1619 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1037 = tensor.extract_slice %expanded_1004[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1038 = tensor.collapse_shape %extracted_slice_1037 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1038 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1039 = tensor.concat dim(1) %expanded_102, %cst_15, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1040 = tensor.expand_shape %1623 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1624 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1039 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1625 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1040, %1624 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1622 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1626 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c30_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1041 = tensor.collapse_shape %1626 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1042 = tensor.collapse_shape %1625 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1627 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1041 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1042[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1043 = tensor.expand_shape %1627 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1044 = tensor.collapse_shape %expanded_1043 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1628 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1626 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1045 = tensor.collapse_shape %1628 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1045 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1042[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1046 = tensor.expand_shape %1629 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1047 = tensor.collapse_shape %expanded_1046 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1048 = tensor.expand_shape %collapsed_1044 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1630 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1048 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1049 = tensor.collapse_shape %1630 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1050 = tensor.expand_shape %collapsed_1047 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1050 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1051 = tensor.collapse_shape %1631 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1600 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1049 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1051 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1635 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1633 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1052 = tensor.collapse_shape %1632 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1053 = tensor.collapse_shape %1635 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1636 = linalg.batch_matmul ins(%collapsed_1052, %collapsed_1053 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1054 = tensor.expand_shape %1636 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1054 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1637, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1638 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1640:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1639 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1055 = tensor.expand_shape %1640#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1641 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1639, %expanded_1055 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1642 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1641 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1643 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1642 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1642, %1643 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1644 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1056 = tensor.collapse_shape %1645 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1057 = tensor.collapse_shape %1634 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1646 = linalg.batch_matmul ins(%collapsed_1056, %collapsed_1057 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1058 = tensor.expand_shape %1646 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1647 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1058 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1059 = tensor.collapse_shape %1647 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1648 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1648 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1650 = linalg.batch_matmul ins(%collapsed_1059, %1649 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1651 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1575, %1650 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1652 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1651 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1652 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1653 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1654 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1655 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1656 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1652, %1657 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1658, %__auto.blk.15.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1659 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1661 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1060 = tensor.collapse_shape %1660 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1662 = linalg.matmul ins(%collapsed_1060, %1661 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1663 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1662 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1061 = tensor.expand_shape %1663 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1664 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1061 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1665 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1664, %expanded_1061 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1666 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1667 = linalg.matmul ins(%collapsed_1060, %1666 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1668 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1667 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1062 = tensor.expand_shape %1668 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1669 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1665, %expanded_1062 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1670 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.15.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1063 = tensor.collapse_shape %1669 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1671 = linalg.matmul ins(%collapsed_1063, %1670 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1672 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1671 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1064 = tensor.expand_shape %1672 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1651, %expanded_1064 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1673 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1674 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1675 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1676 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1677 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1678 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1674, %1679 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1681 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1680, %__auto.blk.16.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1682 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1681 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1683 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1065 = tensor.collapse_shape %1682 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1684 = linalg.matmul ins(%collapsed_1065, %1683 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1685 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1684 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1686 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1687 = linalg.matmul ins(%collapsed_1065, %1686 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1688 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1687 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1689 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1690 = linalg.matmul ins(%collapsed_1065, %1689 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1691 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1690 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1066 = tensor.expand_shape %1691 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1067 = tensor.expand_shape %1685 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1067[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1067[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1068 = tensor.expand_shape %1688 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1693 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1068[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1068[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1694 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1692, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1694 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1069 = tensor.collapse_shape %1695 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1696 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1693, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1697 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1696 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1070 = tensor.collapse_shape %1697 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1069 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1699 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1070 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1071 = tensor.extract_slice %1699[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1072 = tensor.collapse_shape %extracted_slice_1071 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1700 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1072 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1073 = tensor.concat dim(1) %expanded_58, %cst_14, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1074 = tensor.expand_shape %1700 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1701 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1073 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1702 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1074, %1701 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1625 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1075 = tensor.extract_slice %expanded_1066[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1076 = tensor.collapse_shape %extracted_slice_1075 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1703 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1076 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1077 = tensor.concat dim(1) %expanded_58, %cst_14, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1078 = tensor.expand_shape %1703 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1704 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1077 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1705 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1078, %1704 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1702 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1079 = tensor.extract_slice %1699[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1080 = tensor.collapse_shape %extracted_slice_1079 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1706 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1080 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1081 = tensor.concat dim(1) %expanded_72, %cst_14, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1082 = tensor.expand_shape %1706 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1707 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1081 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1708 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1082, %1707 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1705 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1083 = tensor.extract_slice %expanded_1066[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1084 = tensor.collapse_shape %extracted_slice_1083 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1084 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1085 = tensor.concat dim(1) %expanded_72, %cst_14, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1086 = tensor.expand_shape %1709 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1710 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1085 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1711 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1086, %1710 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1708 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1087 = tensor.extract_slice %1699[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1088 = tensor.collapse_shape %extracted_slice_1087 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1088 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1089 = tensor.concat dim(1) %expanded_87, %cst_14, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1090 = tensor.expand_shape %1712 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1713 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1089 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1714 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1090, %1713 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1711 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1091 = tensor.extract_slice %expanded_1066[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1092 = tensor.collapse_shape %extracted_slice_1091 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1092 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1093 = tensor.concat dim(1) %expanded_87, %cst_14, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1094 = tensor.expand_shape %1715 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1716 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1093 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1717 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1094, %1716 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1714 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1095 = tensor.extract_slice %1699[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1096 = tensor.collapse_shape %extracted_slice_1095 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1718 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1096 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1097 = tensor.concat dim(1) %expanded_102, %cst_14, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1098 = tensor.expand_shape %1718 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1719 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1097 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1720 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1098, %1719 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1717 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1099 = tensor.extract_slice %expanded_1066[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1100 = tensor.collapse_shape %extracted_slice_1099 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1100 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1101 = tensor.concat dim(1) %expanded_102, %cst_14, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1102 = tensor.expand_shape %1721 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1722 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1101 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1723 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1102, %1722 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1720 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1724 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c32_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1103 = tensor.collapse_shape %1724 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1104 = tensor.collapse_shape %1723 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1103 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1104[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1105 = tensor.expand_shape %1725 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1106 = tensor.collapse_shape %expanded_1105 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1726 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1724 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1107 = tensor.collapse_shape %1726 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1107 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1104[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1108 = tensor.expand_shape %1727 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1109 = tensor.collapse_shape %expanded_1108 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1110 = tensor.expand_shape %collapsed_1106 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1728 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1110 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1111 = tensor.collapse_shape %1728 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1112 = tensor.expand_shape %collapsed_1109 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1112 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1113 = tensor.collapse_shape %1729 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1730 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1698 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1111 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1113 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1731 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1114 = tensor.collapse_shape %1730 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1115 = tensor.collapse_shape %1733 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1734 = linalg.batch_matmul ins(%collapsed_1114, %collapsed_1115 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1116 = tensor.expand_shape %1734 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1116 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1735, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1736 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1738:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1737 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1117 = tensor.expand_shape %1738#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1739 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1737, %expanded_1117 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1740 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1739 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1741 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1740 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1740, %1741 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1743 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1742 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1118 = tensor.collapse_shape %1743 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1119 = tensor.collapse_shape %1732 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1744 = linalg.batch_matmul ins(%collapsed_1118, %collapsed_1119 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1120 = tensor.expand_shape %1744 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1745 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1120 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1121 = tensor.collapse_shape %1745 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1746 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1746 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1748 = linalg.batch_matmul ins(%collapsed_1121, %1747 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1749 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1673, %1748 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1750 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1749 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1750 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1751 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1752 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1753 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1754 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1750, %1755 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1756, %__auto.blk.16.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1757 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1759 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1122 = tensor.collapse_shape %1758 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1760 = linalg.matmul ins(%collapsed_1122, %1759 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1761 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1760 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1123 = tensor.expand_shape %1761 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1762 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1123 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1763 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1762, %expanded_1123 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1764 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1765 = linalg.matmul ins(%collapsed_1122, %1764 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1766 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1765 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1124 = tensor.expand_shape %1766 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1767 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1763, %expanded_1124 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1768 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.16.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1125 = tensor.collapse_shape %1767 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1769 = linalg.matmul ins(%collapsed_1125, %1768 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1770 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1769 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1126 = tensor.expand_shape %1770 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1749, %expanded_1126 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1771 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1772 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1773 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1774 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1775 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1776 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1772, %1777 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1779 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1778, %__auto.blk.17.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1780 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1779 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1781 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1127 = tensor.collapse_shape %1780 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1782 = linalg.matmul ins(%collapsed_1127, %1781 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1783 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1782 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1784 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1785 = linalg.matmul ins(%collapsed_1127, %1784 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1786 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1785 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1787 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1788 = linalg.matmul ins(%collapsed_1127, %1787 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1789 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1788 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1128 = tensor.expand_shape %1789 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1129 = tensor.expand_shape %1783 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1129[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1129[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1130 = tensor.expand_shape %1786 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1791 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1130[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1130[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1792 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1790, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1792 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1131 = tensor.collapse_shape %1793 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1794 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1791, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1795 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1794 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1132 = tensor.collapse_shape %1795 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1131 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1797 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1132 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1133 = tensor.extract_slice %1797[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1134 = tensor.collapse_shape %extracted_slice_1133 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1798 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1134 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1135 = tensor.concat dim(1) %expanded_58, %cst_13, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1136 = tensor.expand_shape %1798 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1799 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1135 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1800 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1136, %1799 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1723 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1137 = tensor.extract_slice %expanded_1128[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1138 = tensor.collapse_shape %extracted_slice_1137 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1801 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1138 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1139 = tensor.concat dim(1) %expanded_58, %cst_13, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1140 = tensor.expand_shape %1801 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1802 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1139 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1803 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1140, %1802 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1800 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1141 = tensor.extract_slice %1797[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1142 = tensor.collapse_shape %extracted_slice_1141 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1804 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1142 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1143 = tensor.concat dim(1) %expanded_72, %cst_13, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1144 = tensor.expand_shape %1804 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1805 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1143 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1806 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1144, %1805 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1803 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1145 = tensor.extract_slice %expanded_1128[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1146 = tensor.collapse_shape %extracted_slice_1145 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1146 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1147 = tensor.concat dim(1) %expanded_72, %cst_13, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1148 = tensor.expand_shape %1807 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1808 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1147 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1809 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1148, %1808 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1806 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1149 = tensor.extract_slice %1797[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1150 = tensor.collapse_shape %extracted_slice_1149 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1150 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1151 = tensor.concat dim(1) %expanded_87, %cst_13, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1152 = tensor.expand_shape %1810 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1811 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1151 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1812 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1152, %1811 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1809 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1153 = tensor.extract_slice %expanded_1128[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1154 = tensor.collapse_shape %extracted_slice_1153 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1154 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1155 = tensor.concat dim(1) %expanded_87, %cst_13, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1156 = tensor.expand_shape %1813 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1814 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1155 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1815 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1156, %1814 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1812 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1157 = tensor.extract_slice %1797[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1158 = tensor.collapse_shape %extracted_slice_1157 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1816 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1158 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1159 = tensor.concat dim(1) %expanded_102, %cst_13, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1160 = tensor.expand_shape %1816 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1817 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1159 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1818 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1160, %1817 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1815 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1161 = tensor.extract_slice %expanded_1128[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1162 = tensor.collapse_shape %extracted_slice_1161 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1819 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1162 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1163 = tensor.concat dim(1) %expanded_102, %cst_13, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1164 = tensor.expand_shape %1819 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1820 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1163 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1821 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1164, %1820 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1818 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1822 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c34_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1165 = tensor.collapse_shape %1822 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1166 = tensor.collapse_shape %1821 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1165 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1166[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1167 = tensor.expand_shape %1823 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1168 = tensor.collapse_shape %expanded_1167 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1824 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1822 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1169 = tensor.collapse_shape %1824 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1169 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1166[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1170 = tensor.expand_shape %1825 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1171 = tensor.collapse_shape %expanded_1170 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1172 = tensor.expand_shape %collapsed_1168 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1826 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1172 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1173 = tensor.collapse_shape %1826 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1174 = tensor.expand_shape %collapsed_1171 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1174 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1175 = tensor.collapse_shape %1827 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1796 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1173 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1175 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1829 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1176 = tensor.collapse_shape %1828 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1177 = tensor.collapse_shape %1831 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1832 = linalg.batch_matmul ins(%collapsed_1176, %collapsed_1177 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1178 = tensor.expand_shape %1832 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1178 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1833, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1834 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1836:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1835 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1179 = tensor.expand_shape %1836#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1837 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1835, %expanded_1179 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1838 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1837 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1839 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1838 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1838, %1839 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1841 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1840 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1180 = tensor.collapse_shape %1841 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1181 = tensor.collapse_shape %1830 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1842 = linalg.batch_matmul ins(%collapsed_1180, %collapsed_1181 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1182 = tensor.expand_shape %1842 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1843 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1182 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1183 = tensor.collapse_shape %1843 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1844 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1844 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1846 = linalg.batch_matmul ins(%collapsed_1183, %1845 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1847 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1771, %1846 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1848 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1847 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1848 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1849 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1850 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1851 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1852 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1848, %1853 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1854, %__auto.blk.17.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1855 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1857 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1184 = tensor.collapse_shape %1856 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1858 = linalg.matmul ins(%collapsed_1184, %1857 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1859 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1858 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1185 = tensor.expand_shape %1859 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1860 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1185 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1861 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1860, %expanded_1185 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1862 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1863 = linalg.matmul ins(%collapsed_1184, %1862 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1864 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1863 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1186 = tensor.expand_shape %1864 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1865 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1861, %expanded_1186 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1866 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.17.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1187 = tensor.collapse_shape %1865 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1867 = linalg.matmul ins(%collapsed_1187, %1866 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1868 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1867 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1188 = tensor.expand_shape %1868 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1847, %expanded_1188 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1870 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1871 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1872 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1873 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1874 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1870, %1875 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1877 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1876, %__auto.blk.18.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1878 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1877 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1879 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1189 = tensor.collapse_shape %1878 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1880 = linalg.matmul ins(%collapsed_1189, %1879 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1881 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1880 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1882 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1883 = linalg.matmul ins(%collapsed_1189, %1882 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1884 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1883 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1885 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1886 = linalg.matmul ins(%collapsed_1189, %1885 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1887 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1886 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1190 = tensor.expand_shape %1887 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1191 = tensor.expand_shape %1881 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1191[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1191[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1192 = tensor.expand_shape %1884 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1889 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1192[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1192[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1890 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1888, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1890 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1193 = tensor.collapse_shape %1891 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1892 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1889, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1893 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1892 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1194 = tensor.collapse_shape %1893 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1193 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1895 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1194 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1195 = tensor.extract_slice %1895[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1196 = tensor.collapse_shape %extracted_slice_1195 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1896 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1196 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1197 = tensor.concat dim(1) %expanded_58, %cst_12, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1198 = tensor.expand_shape %1896 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1897 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1197 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1898 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1198, %1897 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1821 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1199 = tensor.extract_slice %expanded_1190[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1200 = tensor.collapse_shape %extracted_slice_1199 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1899 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1200 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1201 = tensor.concat dim(1) %expanded_58, %cst_12, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1202 = tensor.expand_shape %1899 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1900 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1201 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1901 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1202, %1900 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1898 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1203 = tensor.extract_slice %1895[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1204 = tensor.collapse_shape %extracted_slice_1203 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1902 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1204 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1205 = tensor.concat dim(1) %expanded_72, %cst_12, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1206 = tensor.expand_shape %1902 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1903 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1205 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1904 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1206, %1903 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1901 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1207 = tensor.extract_slice %expanded_1190[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1208 = tensor.collapse_shape %extracted_slice_1207 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1208 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1209 = tensor.concat dim(1) %expanded_72, %cst_12, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1210 = tensor.expand_shape %1905 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1906 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1209 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1907 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1210, %1906 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1904 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1211 = tensor.extract_slice %1895[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1212 = tensor.collapse_shape %extracted_slice_1211 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1212 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1213 = tensor.concat dim(1) %expanded_87, %cst_12, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1214 = tensor.expand_shape %1908 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1909 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1213 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1910 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1214, %1909 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1907 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1215 = tensor.extract_slice %expanded_1190[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1216 = tensor.collapse_shape %extracted_slice_1215 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1216 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1217 = tensor.concat dim(1) %expanded_87, %cst_12, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1218 = tensor.expand_shape %1911 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1912 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1217 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1913 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1218, %1912 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1910 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1219 = tensor.extract_slice %1895[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1220 = tensor.collapse_shape %extracted_slice_1219 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1914 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1220 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1221 = tensor.concat dim(1) %expanded_102, %cst_12, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1222 = tensor.expand_shape %1914 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1915 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1221 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1916 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1222, %1915 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1913 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1223 = tensor.extract_slice %expanded_1190[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1224 = tensor.collapse_shape %extracted_slice_1223 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1224 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1225 = tensor.concat dim(1) %expanded_102, %cst_12, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1226 = tensor.expand_shape %1917 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1918 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1225 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1919 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1226, %1918 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1916 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %1920 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c36_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1227 = tensor.collapse_shape %1920 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1228 = tensor.collapse_shape %1919 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %1921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1227 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1228[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1229 = tensor.expand_shape %1921 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1230 = tensor.collapse_shape %expanded_1229 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %1922 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1920 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1231 = tensor.collapse_shape %1922 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %1923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1231 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1228[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1232 = tensor.expand_shape %1923 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1233 = tensor.collapse_shape %expanded_1232 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1234 = tensor.expand_shape %collapsed_1230 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1924 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1234 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1235 = tensor.collapse_shape %1924 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1236 = tensor.expand_shape %collapsed_1233 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %1925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1236 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1237 = tensor.collapse_shape %1925 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %1926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1894 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %1927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1235 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1237 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %1929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1927 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1238 = tensor.collapse_shape %1926 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1239 = tensor.collapse_shape %1929 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %1930 = linalg.batch_matmul ins(%collapsed_1238, %collapsed_1239 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1240 = tensor.expand_shape %1930 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %1931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1240 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %1932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1931, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %1933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1932 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1934:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1933 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1241 = tensor.expand_shape %1934#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %1935 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1933, %expanded_1241 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1936 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1935 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1937 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%1936 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %1938 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1936, %1937 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %1939 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1938 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1242 = tensor.collapse_shape %1939 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1243 = tensor.collapse_shape %1928 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %1940 = linalg.batch_matmul ins(%collapsed_1242, %collapsed_1243 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1244 = tensor.expand_shape %1940 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %1941 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1244 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1245 = tensor.collapse_shape %1941 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %1942 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %1943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1942 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %1944 = linalg.batch_matmul ins(%collapsed_1245, %1943 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %1945 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1869, %1944 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1946 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1945 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1946 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1947 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1948 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1949 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1950 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1946, %1951 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1952, %__auto.blk.18.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1953 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1955 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1246 = tensor.collapse_shape %1954 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1956 = linalg.matmul ins(%collapsed_1246, %1955 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1957 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1956 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1247 = tensor.expand_shape %1957 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1958 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1247 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %1959 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1958, %expanded_1247 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1960 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %1961 = linalg.matmul ins(%collapsed_1246, %1960 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %1962 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1961 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1248 = tensor.expand_shape %1962 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %1963 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1959, %expanded_1248 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %1964 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.18.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1249 = tensor.collapse_shape %1963 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %1965 = linalg.matmul ins(%collapsed_1249, %1964 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1966 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1965 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1250 = tensor.expand_shape %1966 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %1967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1945, %expanded_1250 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1967 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1968 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%1969 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1970 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1971 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1972 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %1974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1968, %1973 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1975 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1974, %__auto.blk.19.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %1976 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1975 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %1977 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1251 = tensor.collapse_shape %1976 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %1978 = linalg.matmul ins(%collapsed_1251, %1977 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %1979 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1978 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %1980 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1981 = linalg.matmul ins(%collapsed_1251, %1980 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1982 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1981 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %1983 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %1984 = linalg.matmul ins(%collapsed_1251, %1983 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %1985 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%1984 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1252 = tensor.expand_shape %1985 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1253 = tensor.expand_shape %1979 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %1986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1253[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1253[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1254 = tensor.expand_shape %1982 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %1987 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1254[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1254[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %1988 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1986, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %1989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1988 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1255 = tensor.collapse_shape %1989 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %1990 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1987, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %1991 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%1990 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1256 = tensor.collapse_shape %1991 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %1992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1255 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %1993 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1256 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1257 = tensor.extract_slice %1993[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1258 = tensor.collapse_shape %extracted_slice_1257 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1994 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1258 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1259 = tensor.concat dim(1) %expanded_58, %cst_11, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1260 = tensor.expand_shape %1994 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1995 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1259 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1996 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1260, %1995 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1919 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1261 = tensor.extract_slice %expanded_1252[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1262 = tensor.collapse_shape %extracted_slice_1261 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %1997 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1262 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1263 = tensor.concat dim(1) %expanded_58, %cst_11, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1264 = tensor.expand_shape %1997 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %1998 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1263 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %1999 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1264, %1998 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1996 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1265 = tensor.extract_slice %1993[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1266 = tensor.collapse_shape %extracted_slice_1265 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2000 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1266 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1267 = tensor.concat dim(1) %expanded_72, %cst_11, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1268 = tensor.expand_shape %2000 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2001 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1267 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2002 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1268, %2001 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%1999 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1269 = tensor.extract_slice %expanded_1252[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1270 = tensor.collapse_shape %extracted_slice_1269 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1270 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1271 = tensor.concat dim(1) %expanded_72, %cst_11, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1272 = tensor.expand_shape %2003 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2004 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1271 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2005 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1272, %2004 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2002 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1273 = tensor.extract_slice %1993[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1274 = tensor.collapse_shape %extracted_slice_1273 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1274 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1275 = tensor.concat dim(1) %expanded_87, %cst_11, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1276 = tensor.expand_shape %2006 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2007 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1275 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2008 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1276, %2007 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2005 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1277 = tensor.extract_slice %expanded_1252[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1278 = tensor.collapse_shape %extracted_slice_1277 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1278 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1279 = tensor.concat dim(1) %expanded_87, %cst_11, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1280 = tensor.expand_shape %2009 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2010 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1279 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2011 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1280, %2010 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2008 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1281 = tensor.extract_slice %1993[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1282 = tensor.collapse_shape %extracted_slice_1281 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2012 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1282 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1283 = tensor.concat dim(1) %expanded_102, %cst_11, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1284 = tensor.expand_shape %2012 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2013 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1283 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2014 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1284, %2013 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2011 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1285 = tensor.extract_slice %expanded_1252[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1286 = tensor.collapse_shape %extracted_slice_1285 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1286 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1287 = tensor.concat dim(1) %expanded_102, %cst_11, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1288 = tensor.expand_shape %2015 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2016 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1287 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2017 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1288, %2016 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2014 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2018 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c38_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1289 = tensor.collapse_shape %2018 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1290 = tensor.collapse_shape %2017 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1289 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1290[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1291 = tensor.expand_shape %2019 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1292 = tensor.collapse_shape %expanded_1291 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2020 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2018 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1293 = tensor.collapse_shape %2020 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1293 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1290[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1294 = tensor.expand_shape %2021 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1295 = tensor.collapse_shape %expanded_1294 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1296 = tensor.expand_shape %collapsed_1292 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2022 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1296 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1297 = tensor.collapse_shape %2022 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1298 = tensor.expand_shape %collapsed_1295 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1298 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1299 = tensor.collapse_shape %2023 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%1992 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1297 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1299 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2025 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1300 = tensor.collapse_shape %2024 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1301 = tensor.collapse_shape %2027 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2028 = linalg.batch_matmul ins(%collapsed_1300, %collapsed_1301 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1302 = tensor.expand_shape %2028 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1302 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2029, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2030 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2032:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2031 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1303 = tensor.expand_shape %2032#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2033 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2031, %expanded_1303 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2034 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2033 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2035 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2034 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2034, %2035 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2036 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1304 = tensor.collapse_shape %2037 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1305 = tensor.collapse_shape %2026 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2038 = linalg.batch_matmul ins(%collapsed_1304, %collapsed_1305 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1306 = tensor.expand_shape %2038 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2039 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1306 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1307 = tensor.collapse_shape %2039 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2040 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2040 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2042 = linalg.batch_matmul ins(%collapsed_1307, %2041 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2043 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%1967, %2042 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2044 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2043 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2044 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2045 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2046 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2047 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2048 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2044, %2049 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2050, %__auto.blk.19.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2051 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2053 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1308 = tensor.collapse_shape %2052 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2054 = linalg.matmul ins(%collapsed_1308, %2053 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2055 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2054 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1309 = tensor.expand_shape %2055 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2056 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1309 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2057 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2056, %expanded_1309 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2058 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2059 = linalg.matmul ins(%collapsed_1308, %2058 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2060 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2059 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1310 = tensor.expand_shape %2060 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2061 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2057, %expanded_1310 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2062 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.19.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1311 = tensor.collapse_shape %2061 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2063 = linalg.matmul ins(%collapsed_1311, %2062 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2064 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2063 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1312 = tensor.expand_shape %2064 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2043, %expanded_1312 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2065 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2066 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2067 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2068 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2069 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2070 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2066, %2071 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2073 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2072, %__auto.blk.20.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2074 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2073 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2075 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1313 = tensor.collapse_shape %2074 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2076 = linalg.matmul ins(%collapsed_1313, %2075 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2077 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2076 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2078 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2079 = linalg.matmul ins(%collapsed_1313, %2078 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2080 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2079 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2081 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2082 = linalg.matmul ins(%collapsed_1313, %2081 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2083 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2082 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1314 = tensor.expand_shape %2083 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1315 = tensor.expand_shape %2077 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1315[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1315[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1316 = tensor.expand_shape %2080 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2085 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1316[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1316[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2086 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2084, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2086 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1317 = tensor.collapse_shape %2087 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2088 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2085, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2089 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2088 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1318 = tensor.collapse_shape %2089 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1317 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2091 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1318 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1319 = tensor.extract_slice %2091[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1320 = tensor.collapse_shape %extracted_slice_1319 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2092 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1320 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1321 = tensor.concat dim(1) %expanded_58, %cst_10, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1322 = tensor.expand_shape %2092 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2093 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1321 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2094 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1322, %2093 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2017 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1323 = tensor.extract_slice %expanded_1314[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1324 = tensor.collapse_shape %extracted_slice_1323 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2095 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1324 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1325 = tensor.concat dim(1) %expanded_58, %cst_10, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1326 = tensor.expand_shape %2095 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2096 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1325 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2097 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1326, %2096 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2094 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1327 = tensor.extract_slice %2091[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1328 = tensor.collapse_shape %extracted_slice_1327 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2098 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1328 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1329 = tensor.concat dim(1) %expanded_72, %cst_10, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1330 = tensor.expand_shape %2098 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2099 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1329 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2100 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1330, %2099 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2097 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1331 = tensor.extract_slice %expanded_1314[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1332 = tensor.collapse_shape %extracted_slice_1331 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1332 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1333 = tensor.concat dim(1) %expanded_72, %cst_10, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1334 = tensor.expand_shape %2101 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2102 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1333 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2103 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1334, %2102 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2100 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1335 = tensor.extract_slice %2091[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1336 = tensor.collapse_shape %extracted_slice_1335 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1336 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1337 = tensor.concat dim(1) %expanded_87, %cst_10, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1338 = tensor.expand_shape %2104 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2105 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1337 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2106 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1338, %2105 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2103 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1339 = tensor.extract_slice %expanded_1314[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1340 = tensor.collapse_shape %extracted_slice_1339 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1340 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1341 = tensor.concat dim(1) %expanded_87, %cst_10, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1342 = tensor.expand_shape %2107 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2108 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1341 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2109 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1342, %2108 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2106 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1343 = tensor.extract_slice %2091[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1344 = tensor.collapse_shape %extracted_slice_1343 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2110 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1344 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1345 = tensor.concat dim(1) %expanded_102, %cst_10, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1346 = tensor.expand_shape %2110 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2111 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1345 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2112 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1346, %2111 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2109 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1347 = tensor.extract_slice %expanded_1314[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1348 = tensor.collapse_shape %extracted_slice_1347 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1348 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1349 = tensor.concat dim(1) %expanded_102, %cst_10, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1350 = tensor.expand_shape %2113 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2114 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1349 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2115 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1350, %2114 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2112 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2116 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c40_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1351 = tensor.collapse_shape %2116 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1352 = tensor.collapse_shape %2115 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1351 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1352[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1353 = tensor.expand_shape %2117 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1354 = tensor.collapse_shape %expanded_1353 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2118 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2116 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1355 = tensor.collapse_shape %2118 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1355 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1352[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1356 = tensor.expand_shape %2119 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1357 = tensor.collapse_shape %expanded_1356 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1358 = tensor.expand_shape %collapsed_1354 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2120 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1358 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1359 = tensor.collapse_shape %2120 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1360 = tensor.expand_shape %collapsed_1357 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1360 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1361 = tensor.collapse_shape %2121 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2090 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1359 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1361 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2123 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1362 = tensor.collapse_shape %2122 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1363 = tensor.collapse_shape %2125 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2126 = linalg.batch_matmul ins(%collapsed_1362, %collapsed_1363 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1364 = tensor.expand_shape %2126 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1364 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2127, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2128 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2130:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2129 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1365 = tensor.expand_shape %2130#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2131 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2129, %expanded_1365 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2132 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2131 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2133 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2132 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2132, %2133 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2134 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1366 = tensor.collapse_shape %2135 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1367 = tensor.collapse_shape %2124 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2136 = linalg.batch_matmul ins(%collapsed_1366, %collapsed_1367 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1368 = tensor.expand_shape %2136 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2137 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1368 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1369 = tensor.collapse_shape %2137 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2138 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2138 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2140 = linalg.batch_matmul ins(%collapsed_1369, %2139 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2141 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2065, %2140 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2142 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2141 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2143 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2144 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2145 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2146 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2142, %2147 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2148, %__auto.blk.20.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2149 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2151 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1370 = tensor.collapse_shape %2150 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2152 = linalg.matmul ins(%collapsed_1370, %2151 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2153 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2152 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1371 = tensor.expand_shape %2153 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2154 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1371 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2155 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2154, %expanded_1371 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2156 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2157 = linalg.matmul ins(%collapsed_1370, %2156 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2158 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2157 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1372 = tensor.expand_shape %2158 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2159 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2155, %expanded_1372 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2160 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.20.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1373 = tensor.collapse_shape %2159 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2161 = linalg.matmul ins(%collapsed_1373, %2160 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2162 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2161 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1374 = tensor.expand_shape %2162 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2141, %expanded_1374 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2163 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2164 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2165 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2166 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2167 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2168 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2164, %2169 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2171 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2170, %__auto.blk.21.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2172 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2171 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2173 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1375 = tensor.collapse_shape %2172 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2174 = linalg.matmul ins(%collapsed_1375, %2173 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2175 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2174 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2176 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2177 = linalg.matmul ins(%collapsed_1375, %2176 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2178 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2177 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2179 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2180 = linalg.matmul ins(%collapsed_1375, %2179 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2181 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2180 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1376 = tensor.expand_shape %2181 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1377 = tensor.expand_shape %2175 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1377[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1377[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1378 = tensor.expand_shape %2178 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2183 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1378[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1378[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2184 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2182, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2184 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1379 = tensor.collapse_shape %2185 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2186 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2183, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2187 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2186 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1380 = tensor.collapse_shape %2187 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1379 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2189 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1380 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1381 = tensor.extract_slice %2189[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1382 = tensor.collapse_shape %extracted_slice_1381 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2190 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1382 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1383 = tensor.concat dim(1) %expanded_58, %cst_9, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1384 = tensor.expand_shape %2190 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2191 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1383 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2192 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1384, %2191 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2115 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1385 = tensor.extract_slice %expanded_1376[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1386 = tensor.collapse_shape %extracted_slice_1385 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2193 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1386 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1387 = tensor.concat dim(1) %expanded_58, %cst_9, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1388 = tensor.expand_shape %2193 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2194 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1387 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2195 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1388, %2194 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2192 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1389 = tensor.extract_slice %2189[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1390 = tensor.collapse_shape %extracted_slice_1389 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2196 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1390 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1391 = tensor.concat dim(1) %expanded_72, %cst_9, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1392 = tensor.expand_shape %2196 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2197 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1391 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2198 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1392, %2197 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2195 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1393 = tensor.extract_slice %expanded_1376[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1394 = tensor.collapse_shape %extracted_slice_1393 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1394 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1395 = tensor.concat dim(1) %expanded_72, %cst_9, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1396 = tensor.expand_shape %2199 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2200 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1395 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2201 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1396, %2200 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2198 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1397 = tensor.extract_slice %2189[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1398 = tensor.collapse_shape %extracted_slice_1397 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1398 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1399 = tensor.concat dim(1) %expanded_87, %cst_9, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1400 = tensor.expand_shape %2202 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2203 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1399 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2204 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1400, %2203 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2201 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1401 = tensor.extract_slice %expanded_1376[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1402 = tensor.collapse_shape %extracted_slice_1401 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1402 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1403 = tensor.concat dim(1) %expanded_87, %cst_9, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1404 = tensor.expand_shape %2205 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2206 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1403 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2207 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1404, %2206 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2204 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1405 = tensor.extract_slice %2189[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1406 = tensor.collapse_shape %extracted_slice_1405 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2208 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1406 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1407 = tensor.concat dim(1) %expanded_102, %cst_9, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1408 = tensor.expand_shape %2208 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2209 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1407 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2210 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1408, %2209 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2207 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1409 = tensor.extract_slice %expanded_1376[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1410 = tensor.collapse_shape %extracted_slice_1409 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1410 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1411 = tensor.concat dim(1) %expanded_102, %cst_9, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1412 = tensor.expand_shape %2211 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2212 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1411 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2213 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1412, %2212 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2210 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2214 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c42_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1413 = tensor.collapse_shape %2214 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1414 = tensor.collapse_shape %2213 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1413 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1414[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1415 = tensor.expand_shape %2215 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1416 = tensor.collapse_shape %expanded_1415 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2216 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2214 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1417 = tensor.collapse_shape %2216 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1417 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1414[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1418 = tensor.expand_shape %2217 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1419 = tensor.collapse_shape %expanded_1418 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1420 = tensor.expand_shape %collapsed_1416 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2218 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1420 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1421 = tensor.collapse_shape %2218 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1422 = tensor.expand_shape %collapsed_1419 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1422 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1423 = tensor.collapse_shape %2219 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2188 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1421 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1423 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2221 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1424 = tensor.collapse_shape %2220 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1425 = tensor.collapse_shape %2223 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2224 = linalg.batch_matmul ins(%collapsed_1424, %collapsed_1425 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1426 = tensor.expand_shape %2224 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1426 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2225, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2226 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2228:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2227 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1427 = tensor.expand_shape %2228#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2229 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2227, %expanded_1427 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2230 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2229 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2231 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2230 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2230, %2231 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2232 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1428 = tensor.collapse_shape %2233 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1429 = tensor.collapse_shape %2222 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2234 = linalg.batch_matmul ins(%collapsed_1428, %collapsed_1429 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1430 = tensor.expand_shape %2234 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2235 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1430 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1431 = tensor.collapse_shape %2235 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2236 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2236 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2238 = linalg.batch_matmul ins(%collapsed_1431, %2237 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2239 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2163, %2238 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2240 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2239 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2240 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2241 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2242 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2243 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2244 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2240, %2245 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2246, %__auto.blk.21.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2247 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2249 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1432 = tensor.collapse_shape %2248 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2250 = linalg.matmul ins(%collapsed_1432, %2249 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2251 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2250 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1433 = tensor.expand_shape %2251 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2252 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1433 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2253 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2252, %expanded_1433 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2254 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2255 = linalg.matmul ins(%collapsed_1432, %2254 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2256 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2255 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1434 = tensor.expand_shape %2256 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2257 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2253, %expanded_1434 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2258 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.21.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1435 = tensor.collapse_shape %2257 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2259 = linalg.matmul ins(%collapsed_1435, %2258 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2260 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2259 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1436 = tensor.expand_shape %2260 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2261 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2239, %expanded_1436 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2262 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2261 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2263 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2262 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2264 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2263 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2265 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2264 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2266 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2265 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2267 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2266 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2268 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2262, %2267 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2269 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2268, %__auto.blk.22.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2270 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2269 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2271 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1437 = tensor.collapse_shape %2270 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2272 = linalg.matmul ins(%collapsed_1437, %2271 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2273 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2272 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2274 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2275 = linalg.matmul ins(%collapsed_1437, %2274 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2276 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2275 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2277 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2278 = linalg.matmul ins(%collapsed_1437, %2277 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2279 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2278 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1438 = tensor.expand_shape %2279 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1439 = tensor.expand_shape %2273 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2280 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1439[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1439[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1440 = tensor.expand_shape %2276 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2281 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1440[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1440[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2282 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2280, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2283 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2282 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1441 = tensor.collapse_shape %2283 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2284 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2281, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2285 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2284 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1442 = tensor.collapse_shape %2285 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2286 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1441 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2287 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1442 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1443 = tensor.extract_slice %2287[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1444 = tensor.collapse_shape %extracted_slice_1443 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2288 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1444 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1445 = tensor.concat dim(1) %expanded_58, %cst_8, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1446 = tensor.expand_shape %2288 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2289 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1445 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2290 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1446, %2289 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2213 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1447 = tensor.extract_slice %expanded_1438[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1448 = tensor.collapse_shape %extracted_slice_1447 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2291 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1448 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1449 = tensor.concat dim(1) %expanded_58, %cst_8, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1450 = tensor.expand_shape %2291 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2292 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1449 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2293 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1450, %2292 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2290 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1451 = tensor.extract_slice %2287[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1452 = tensor.collapse_shape %extracted_slice_1451 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2294 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1452 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1453 = tensor.concat dim(1) %expanded_72, %cst_8, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1454 = tensor.expand_shape %2294 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2295 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1453 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2296 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1454, %2295 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2293 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1455 = tensor.extract_slice %expanded_1438[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1456 = tensor.collapse_shape %extracted_slice_1455 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2297 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1456 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1457 = tensor.concat dim(1) %expanded_72, %cst_8, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1458 = tensor.expand_shape %2297 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2298 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1457 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2299 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1458, %2298 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2296 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1459 = tensor.extract_slice %2287[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1460 = tensor.collapse_shape %extracted_slice_1459 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2300 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1460 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1461 = tensor.concat dim(1) %expanded_87, %cst_8, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1462 = tensor.expand_shape %2300 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2301 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1461 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2302 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1462, %2301 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2299 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1463 = tensor.extract_slice %expanded_1438[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1464 = tensor.collapse_shape %extracted_slice_1463 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2303 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1464 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1465 = tensor.concat dim(1) %expanded_87, %cst_8, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1466 = tensor.expand_shape %2303 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2304 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1465 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2305 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1466, %2304 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2302 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1467 = tensor.extract_slice %2287[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1468 = tensor.collapse_shape %extracted_slice_1467 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2306 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1468 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1469 = tensor.concat dim(1) %expanded_102, %cst_8, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1470 = tensor.expand_shape %2306 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2307 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1469 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2308 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1470, %2307 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2305 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1471 = tensor.extract_slice %expanded_1438[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1472 = tensor.collapse_shape %extracted_slice_1471 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2309 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1472 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1473 = tensor.concat dim(1) %expanded_102, %cst_8, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1474 = tensor.expand_shape %2309 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2310 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1473 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2311 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1474, %2310 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2308 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2312 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c44_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1475 = tensor.collapse_shape %2312 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1476 = tensor.collapse_shape %2311 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2313 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1475 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1476[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1477 = tensor.expand_shape %2313 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1478 = tensor.collapse_shape %expanded_1477 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2314 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2312 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1479 = tensor.collapse_shape %2314 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2315 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1479 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1476[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1480 = tensor.expand_shape %2315 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1481 = tensor.collapse_shape %expanded_1480 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1482 = tensor.expand_shape %collapsed_1478 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2316 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1482 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1483 = tensor.collapse_shape %2316 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1484 = tensor.expand_shape %collapsed_1481 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2317 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1484 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1485 = tensor.collapse_shape %2317 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2318 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2286 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2319 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1483 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2320 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1485 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2321 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2319 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1486 = tensor.collapse_shape %2318 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1487 = tensor.collapse_shape %2321 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2322 = linalg.batch_matmul ins(%collapsed_1486, %collapsed_1487 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1488 = tensor.expand_shape %2322 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2323 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1488 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2324 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2323, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2325 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2324 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2326:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2325 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1489 = tensor.expand_shape %2326#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2327 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2325, %expanded_1489 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2328 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2327 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2329 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2328 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2330 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2328, %2329 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2331 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2330 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1490 = tensor.collapse_shape %2331 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1491 = tensor.collapse_shape %2320 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2332 = linalg.batch_matmul ins(%collapsed_1490, %collapsed_1491 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1492 = tensor.expand_shape %2332 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2333 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1492 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1493 = tensor.collapse_shape %2333 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2334 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2335 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2334 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2336 = linalg.batch_matmul ins(%collapsed_1493, %2335 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2337 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2261, %2336 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2338 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2337 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2339 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2338 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2340 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2339 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2341 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2340 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2342 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2341 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2343 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2342 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2344 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2338, %2343 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2345 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2344, %__auto.blk.22.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2346 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2345 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2347 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1494 = tensor.collapse_shape %2346 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2348 = linalg.matmul ins(%collapsed_1494, %2347 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2349 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2348 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1495 = tensor.expand_shape %2349 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2350 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1495 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2351 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2350, %expanded_1495 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2352 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2353 = linalg.matmul ins(%collapsed_1494, %2352 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2354 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2353 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1496 = tensor.expand_shape %2354 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2355 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2351, %expanded_1496 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2356 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.22.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1497 = tensor.collapse_shape %2355 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2357 = linalg.matmul ins(%collapsed_1497, %2356 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2358 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2357 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1498 = tensor.expand_shape %2358 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2359 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2337, %expanded_1498 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2360 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2359 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2361 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2360 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2362 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2361 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2363 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2362 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2364 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2363 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2365 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2364 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2366 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2360, %2365 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2367 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2366, %__auto.blk.23.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2368 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2367 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2369 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1499 = tensor.collapse_shape %2368 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2370 = linalg.matmul ins(%collapsed_1499, %2369 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2371 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2370 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2372 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2373 = linalg.matmul ins(%collapsed_1499, %2372 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2374 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2373 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2375 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2376 = linalg.matmul ins(%collapsed_1499, %2375 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2377 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2376 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1500 = tensor.expand_shape %2377 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1501 = tensor.expand_shape %2371 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2378 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1501[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1501[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1502 = tensor.expand_shape %2374 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2379 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1502[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1502[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2380 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2378, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2381 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2380 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1503 = tensor.collapse_shape %2381 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2382 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2379, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2383 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2382 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1504 = tensor.collapse_shape %2383 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2384 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1503 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2385 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1504 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1505 = tensor.extract_slice %2385[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1506 = tensor.collapse_shape %extracted_slice_1505 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2386 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1506 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1507 = tensor.concat dim(1) %expanded_58, %cst_7, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1508 = tensor.expand_shape %2386 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2387 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1507 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2388 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1508, %2387 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2311 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1509 = tensor.extract_slice %expanded_1500[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1510 = tensor.collapse_shape %extracted_slice_1509 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2389 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1510 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1511 = tensor.concat dim(1) %expanded_58, %cst_7, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1512 = tensor.expand_shape %2389 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2390 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1511 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2391 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1512, %2390 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2388 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1513 = tensor.extract_slice %2385[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1514 = tensor.collapse_shape %extracted_slice_1513 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2392 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1514 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1515 = tensor.concat dim(1) %expanded_72, %cst_7, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1516 = tensor.expand_shape %2392 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2393 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1515 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2394 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1516, %2393 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2391 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1517 = tensor.extract_slice %expanded_1500[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1518 = tensor.collapse_shape %extracted_slice_1517 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2395 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1518 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1519 = tensor.concat dim(1) %expanded_72, %cst_7, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1520 = tensor.expand_shape %2395 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2396 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1519 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2397 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1520, %2396 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2394 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1521 = tensor.extract_slice %2385[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1522 = tensor.collapse_shape %extracted_slice_1521 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2398 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1522 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1523 = tensor.concat dim(1) %expanded_87, %cst_7, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1524 = tensor.expand_shape %2398 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2399 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1523 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2400 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1524, %2399 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2397 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1525 = tensor.extract_slice %expanded_1500[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1526 = tensor.collapse_shape %extracted_slice_1525 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2401 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1526 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1527 = tensor.concat dim(1) %expanded_87, %cst_7, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1528 = tensor.expand_shape %2401 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2402 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1527 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2403 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1528, %2402 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2400 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1529 = tensor.extract_slice %2385[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1530 = tensor.collapse_shape %extracted_slice_1529 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2404 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1530 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1531 = tensor.concat dim(1) %expanded_102, %cst_7, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1532 = tensor.expand_shape %2404 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2405 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1531 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2406 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1532, %2405 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2403 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1533 = tensor.extract_slice %expanded_1500[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1534 = tensor.collapse_shape %extracted_slice_1533 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2407 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1534 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1535 = tensor.concat dim(1) %expanded_102, %cst_7, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1536 = tensor.expand_shape %2407 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2408 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1535 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2409 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1536, %2408 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2406 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2410 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c46_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1537 = tensor.collapse_shape %2410 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1538 = tensor.collapse_shape %2409 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2411 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1537 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1538[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1539 = tensor.expand_shape %2411 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1540 = tensor.collapse_shape %expanded_1539 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2412 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2410 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1541 = tensor.collapse_shape %2412 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2413 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1541 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1538[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1542 = tensor.expand_shape %2413 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1543 = tensor.collapse_shape %expanded_1542 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1544 = tensor.expand_shape %collapsed_1540 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2414 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1544 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1545 = tensor.collapse_shape %2414 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1546 = tensor.expand_shape %collapsed_1543 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2415 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1546 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1547 = tensor.collapse_shape %2415 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2416 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2384 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2417 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1545 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2418 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1547 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2419 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2417 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1548 = tensor.collapse_shape %2416 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1549 = tensor.collapse_shape %2419 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2420 = linalg.batch_matmul ins(%collapsed_1548, %collapsed_1549 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1550 = tensor.expand_shape %2420 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2421 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1550 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2422 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2421, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2423 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2422 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2424:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2423 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1551 = tensor.expand_shape %2424#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2425 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2423, %expanded_1551 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2426 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2425 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2427 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2426 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2428 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2426, %2427 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2429 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2428 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1552 = tensor.collapse_shape %2429 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1553 = tensor.collapse_shape %2418 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2430 = linalg.batch_matmul ins(%collapsed_1552, %collapsed_1553 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1554 = tensor.expand_shape %2430 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2431 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1554 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1555 = tensor.collapse_shape %2431 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2432 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2433 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2432 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2434 = linalg.batch_matmul ins(%collapsed_1555, %2433 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2435 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2359, %2434 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2436 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2435 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2437 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2436 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2438 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2437 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2439 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2438 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2440 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2439 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2441 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2440 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2442 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2436, %2441 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2443 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2442, %__auto.blk.23.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2444 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2443 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2445 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1556 = tensor.collapse_shape %2444 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2446 = linalg.matmul ins(%collapsed_1556, %2445 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2447 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2446 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1557 = tensor.expand_shape %2447 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2448 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1557 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2449 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2448, %expanded_1557 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2450 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2451 = linalg.matmul ins(%collapsed_1556, %2450 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2452 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2451 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1558 = tensor.expand_shape %2452 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2453 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2449, %expanded_1558 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2454 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.23.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1559 = tensor.collapse_shape %2453 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2455 = linalg.matmul ins(%collapsed_1559, %2454 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2456 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2455 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1560 = tensor.expand_shape %2456 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2457 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2435, %expanded_1560 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2458 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2457 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2459 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2458 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2460 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2459 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2461 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2460 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2462 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2461 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2463 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2462 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2464 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2458, %2463 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2465 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2464, %__auto.blk.24.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2466 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2465 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2467 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1561 = tensor.collapse_shape %2466 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2468 = linalg.matmul ins(%collapsed_1561, %2467 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2469 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2468 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2470 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2471 = linalg.matmul ins(%collapsed_1561, %2470 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2472 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2471 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2473 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2474 = linalg.matmul ins(%collapsed_1561, %2473 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2475 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2474 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1562 = tensor.expand_shape %2475 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1563 = tensor.expand_shape %2469 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2476 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1563[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1563[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1564 = tensor.expand_shape %2472 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2477 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1564[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1564[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2478 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2476, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2479 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2478 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1565 = tensor.collapse_shape %2479 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2480 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2477, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2481 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2480 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1566 = tensor.collapse_shape %2481 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2482 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1565 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2483 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1566 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1567 = tensor.extract_slice %2483[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1568 = tensor.collapse_shape %extracted_slice_1567 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2484 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1568 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1569 = tensor.concat dim(1) %expanded_58, %cst_6, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1570 = tensor.expand_shape %2484 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2485 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1569 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2486 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1570, %2485 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2409 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1571 = tensor.extract_slice %expanded_1562[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1572 = tensor.collapse_shape %extracted_slice_1571 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2487 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1572 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1573 = tensor.concat dim(1) %expanded_58, %cst_6, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1574 = tensor.expand_shape %2487 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2488 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1573 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2489 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1574, %2488 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2486 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1575 = tensor.extract_slice %2483[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1576 = tensor.collapse_shape %extracted_slice_1575 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2490 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1576 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1577 = tensor.concat dim(1) %expanded_72, %cst_6, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1578 = tensor.expand_shape %2490 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2491 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1577 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2492 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1578, %2491 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2489 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1579 = tensor.extract_slice %expanded_1562[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1580 = tensor.collapse_shape %extracted_slice_1579 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2493 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1580 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1581 = tensor.concat dim(1) %expanded_72, %cst_6, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1582 = tensor.expand_shape %2493 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2494 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1581 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2495 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1582, %2494 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2492 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1583 = tensor.extract_slice %2483[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1584 = tensor.collapse_shape %extracted_slice_1583 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2496 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1584 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1585 = tensor.concat dim(1) %expanded_87, %cst_6, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1586 = tensor.expand_shape %2496 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2497 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1585 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2498 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1586, %2497 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2495 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1587 = tensor.extract_slice %expanded_1562[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1588 = tensor.collapse_shape %extracted_slice_1587 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2499 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1588 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1589 = tensor.concat dim(1) %expanded_87, %cst_6, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1590 = tensor.expand_shape %2499 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2500 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1589 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2501 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1590, %2500 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2498 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1591 = tensor.extract_slice %2483[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1592 = tensor.collapse_shape %extracted_slice_1591 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2502 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1592 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1593 = tensor.concat dim(1) %expanded_102, %cst_6, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1594 = tensor.expand_shape %2502 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2503 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1593 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2504 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1594, %2503 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2501 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1595 = tensor.extract_slice %expanded_1562[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1596 = tensor.collapse_shape %extracted_slice_1595 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2505 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1596 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1597 = tensor.concat dim(1) %expanded_102, %cst_6, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1598 = tensor.expand_shape %2505 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2506 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1597 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2507 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1598, %2506 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2504 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2508 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c48_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1599 = tensor.collapse_shape %2508 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1600 = tensor.collapse_shape %2507 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2509 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1599 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1600[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1601 = tensor.expand_shape %2509 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1602 = tensor.collapse_shape %expanded_1601 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2510 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2508 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1603 = tensor.collapse_shape %2510 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2511 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1603 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1600[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1604 = tensor.expand_shape %2511 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1605 = tensor.collapse_shape %expanded_1604 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1606 = tensor.expand_shape %collapsed_1602 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2512 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1606 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1607 = tensor.collapse_shape %2512 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1608 = tensor.expand_shape %collapsed_1605 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2513 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1608 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1609 = tensor.collapse_shape %2513 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2514 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2482 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2515 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1607 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2516 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1609 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2517 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2515 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1610 = tensor.collapse_shape %2514 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1611 = tensor.collapse_shape %2517 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2518 = linalg.batch_matmul ins(%collapsed_1610, %collapsed_1611 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1612 = tensor.expand_shape %2518 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2519 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1612 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2520 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2519, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2521 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2520 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2522:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2521 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1613 = tensor.expand_shape %2522#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2523 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2521, %expanded_1613 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2524 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2523 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2525 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2524 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2526 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2524, %2525 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2527 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2526 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1614 = tensor.collapse_shape %2527 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1615 = tensor.collapse_shape %2516 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2528 = linalg.batch_matmul ins(%collapsed_1614, %collapsed_1615 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1616 = tensor.expand_shape %2528 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2529 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1616 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1617 = tensor.collapse_shape %2529 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2530 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2531 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2530 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2532 = linalg.batch_matmul ins(%collapsed_1617, %2531 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2533 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2457, %2532 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2534 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2533 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2535 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2534 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2536 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2535 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2537 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2536 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2538 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2537 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2539 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2538 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2540 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2534, %2539 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2541 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2540, %__auto.blk.24.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2542 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2541 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2543 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1618 = tensor.collapse_shape %2542 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2544 = linalg.matmul ins(%collapsed_1618, %2543 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2545 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2544 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1619 = tensor.expand_shape %2545 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2546 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1619 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2547 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2546, %expanded_1619 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2548 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2549 = linalg.matmul ins(%collapsed_1618, %2548 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2550 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2549 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1620 = tensor.expand_shape %2550 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2551 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2547, %expanded_1620 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2552 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.24.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1621 = tensor.collapse_shape %2551 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2553 = linalg.matmul ins(%collapsed_1621, %2552 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2554 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2553 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1622 = tensor.expand_shape %2554 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2555 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2533, %expanded_1622 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2556 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2555 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2557 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2556 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2558 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2557 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2559 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2558 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2560 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2559 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2561 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2560 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2562 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2556, %2561 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2563 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2562, %__auto.blk.25.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2564 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2563 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2565 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1623 = tensor.collapse_shape %2564 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2566 = linalg.matmul ins(%collapsed_1623, %2565 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2567 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2566 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2568 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2569 = linalg.matmul ins(%collapsed_1623, %2568 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2570 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2569 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2571 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2572 = linalg.matmul ins(%collapsed_1623, %2571 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2573 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2572 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1624 = tensor.expand_shape %2573 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1625 = tensor.expand_shape %2567 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2574 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1625[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1625[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1626 = tensor.expand_shape %2570 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2575 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1626[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1626[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2576 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2574, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2577 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2576 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1627 = tensor.collapse_shape %2577 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2578 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2575, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2579 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2578 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1628 = tensor.collapse_shape %2579 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2580 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1627 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2581 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1628 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1629 = tensor.extract_slice %2581[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1630 = tensor.collapse_shape %extracted_slice_1629 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2582 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1630 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1631 = tensor.concat dim(1) %expanded_58, %cst_5, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1632 = tensor.expand_shape %2582 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2583 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1631 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2584 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1632, %2583 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2507 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1633 = tensor.extract_slice %expanded_1624[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1634 = tensor.collapse_shape %extracted_slice_1633 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2585 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1634 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1635 = tensor.concat dim(1) %expanded_58, %cst_5, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1636 = tensor.expand_shape %2585 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2586 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1635 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2587 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1636, %2586 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2584 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1637 = tensor.extract_slice %2581[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1638 = tensor.collapse_shape %extracted_slice_1637 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2588 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1638 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1639 = tensor.concat dim(1) %expanded_72, %cst_5, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1640 = tensor.expand_shape %2588 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2589 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1639 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2590 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1640, %2589 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2587 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1641 = tensor.extract_slice %expanded_1624[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1642 = tensor.collapse_shape %extracted_slice_1641 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2591 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1642 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1643 = tensor.concat dim(1) %expanded_72, %cst_5, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1644 = tensor.expand_shape %2591 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2592 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1643 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2593 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1644, %2592 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2590 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1645 = tensor.extract_slice %2581[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1646 = tensor.collapse_shape %extracted_slice_1645 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2594 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1646 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1647 = tensor.concat dim(1) %expanded_87, %cst_5, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1648 = tensor.expand_shape %2594 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2595 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1647 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2596 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1648, %2595 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2593 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1649 = tensor.extract_slice %expanded_1624[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1650 = tensor.collapse_shape %extracted_slice_1649 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2597 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1650 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1651 = tensor.concat dim(1) %expanded_87, %cst_5, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1652 = tensor.expand_shape %2597 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2598 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1651 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2599 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1652, %2598 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2596 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1653 = tensor.extract_slice %2581[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1654 = tensor.collapse_shape %extracted_slice_1653 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2600 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1654 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1655 = tensor.concat dim(1) %expanded_102, %cst_5, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1656 = tensor.expand_shape %2600 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2601 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1655 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2602 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1656, %2601 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2599 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1657 = tensor.extract_slice %expanded_1624[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1658 = tensor.collapse_shape %extracted_slice_1657 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2603 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1658 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1659 = tensor.concat dim(1) %expanded_102, %cst_5, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1660 = tensor.expand_shape %2603 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2604 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1659 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2605 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1660, %2604 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2602 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2606 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c50_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1661 = tensor.collapse_shape %2606 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1662 = tensor.collapse_shape %2605 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2607 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1661 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1662[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1663 = tensor.expand_shape %2607 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1664 = tensor.collapse_shape %expanded_1663 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2608 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2606 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1665 = tensor.collapse_shape %2608 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2609 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1665 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1662[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1666 = tensor.expand_shape %2609 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1667 = tensor.collapse_shape %expanded_1666 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1668 = tensor.expand_shape %collapsed_1664 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2610 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1668 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1669 = tensor.collapse_shape %2610 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1670 = tensor.expand_shape %collapsed_1667 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2611 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1670 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1671 = tensor.collapse_shape %2611 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2612 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2580 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2613 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1669 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2614 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1671 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2615 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2613 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1672 = tensor.collapse_shape %2612 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1673 = tensor.collapse_shape %2615 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2616 = linalg.batch_matmul ins(%collapsed_1672, %collapsed_1673 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1674 = tensor.expand_shape %2616 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2617 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1674 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2618 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2617, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2619 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2618 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2620:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2619 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1675 = tensor.expand_shape %2620#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2621 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2619, %expanded_1675 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2622 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2621 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2623 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2622 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2624 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2622, %2623 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2625 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2624 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1676 = tensor.collapse_shape %2625 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1677 = tensor.collapse_shape %2614 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2626 = linalg.batch_matmul ins(%collapsed_1676, %collapsed_1677 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1678 = tensor.expand_shape %2626 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2627 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1678 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1679 = tensor.collapse_shape %2627 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2628 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2629 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2628 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2630 = linalg.batch_matmul ins(%collapsed_1679, %2629 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2631 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2555, %2630 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2632 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2631 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2633 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2632 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2634 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2633 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2635 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2634 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2636 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2635 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2637 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2636 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2638 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2632, %2637 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2639 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2638, %__auto.blk.25.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2640 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2639 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2641 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1680 = tensor.collapse_shape %2640 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2642 = linalg.matmul ins(%collapsed_1680, %2641 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2643 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2642 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1681 = tensor.expand_shape %2643 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2644 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1681 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2645 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2644, %expanded_1681 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2646 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2647 = linalg.matmul ins(%collapsed_1680, %2646 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2648 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2647 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1682 = tensor.expand_shape %2648 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2649 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2645, %expanded_1682 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2650 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.25.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1683 = tensor.collapse_shape %2649 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2651 = linalg.matmul ins(%collapsed_1683, %2650 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2652 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2651 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1684 = tensor.expand_shape %2652 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2653 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2631, %expanded_1684 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2654 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2653 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2655 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2654 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2656 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2655 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2657 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2656 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2658 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2657 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2659 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2658 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2660 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2654, %2659 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2661 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2660, %__auto.blk.26.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2662 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2661 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2663 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1685 = tensor.collapse_shape %2662 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2664 = linalg.matmul ins(%collapsed_1685, %2663 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2665 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2664 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2666 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2667 = linalg.matmul ins(%collapsed_1685, %2666 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2668 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2667 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2669 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2670 = linalg.matmul ins(%collapsed_1685, %2669 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2671 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2670 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1686 = tensor.expand_shape %2671 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1687 = tensor.expand_shape %2665 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2672 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1687[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1687[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1688 = tensor.expand_shape %2668 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2673 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1688[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1688[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2674 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2672, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2675 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2674 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1689 = tensor.collapse_shape %2675 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2676 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2673, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2677 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2676 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1690 = tensor.collapse_shape %2677 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2678 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1689 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2679 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1690 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1691 = tensor.extract_slice %2679[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1692 = tensor.collapse_shape %extracted_slice_1691 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2680 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1692 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1693 = tensor.concat dim(1) %expanded_58, %cst_4, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1694 = tensor.expand_shape %2680 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2681 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1693 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2682 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1694, %2681 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2605 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1695 = tensor.extract_slice %expanded_1686[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1696 = tensor.collapse_shape %extracted_slice_1695 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2683 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1696 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1697 = tensor.concat dim(1) %expanded_58, %cst_4, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1698 = tensor.expand_shape %2683 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2684 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1697 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2685 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1698, %2684 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2682 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1699 = tensor.extract_slice %2679[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1700 = tensor.collapse_shape %extracted_slice_1699 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2686 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1700 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1701 = tensor.concat dim(1) %expanded_72, %cst_4, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1702 = tensor.expand_shape %2686 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2687 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1701 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2688 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1702, %2687 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2685 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1703 = tensor.extract_slice %expanded_1686[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1704 = tensor.collapse_shape %extracted_slice_1703 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2689 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1704 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1705 = tensor.concat dim(1) %expanded_72, %cst_4, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1706 = tensor.expand_shape %2689 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2690 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1705 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2691 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1706, %2690 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2688 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1707 = tensor.extract_slice %2679[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1708 = tensor.collapse_shape %extracted_slice_1707 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2692 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1708 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1709 = tensor.concat dim(1) %expanded_87, %cst_4, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1710 = tensor.expand_shape %2692 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2693 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1709 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2694 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1710, %2693 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2691 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1711 = tensor.extract_slice %expanded_1686[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1712 = tensor.collapse_shape %extracted_slice_1711 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2695 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1712 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1713 = tensor.concat dim(1) %expanded_87, %cst_4, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1714 = tensor.expand_shape %2695 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2696 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1713 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2697 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1714, %2696 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2694 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1715 = tensor.extract_slice %2679[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1716 = tensor.collapse_shape %extracted_slice_1715 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2698 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1716 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1717 = tensor.concat dim(1) %expanded_102, %cst_4, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1718 = tensor.expand_shape %2698 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2699 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1717 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2700 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1718, %2699 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2697 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1719 = tensor.extract_slice %expanded_1686[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1720 = tensor.collapse_shape %extracted_slice_1719 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2701 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1720 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1721 = tensor.concat dim(1) %expanded_102, %cst_4, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1722 = tensor.expand_shape %2701 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2702 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1721 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2703 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1722, %2702 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2700 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2704 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c52_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1723 = tensor.collapse_shape %2704 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1724 = tensor.collapse_shape %2703 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2705 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1723 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1724[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1725 = tensor.expand_shape %2705 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1726 = tensor.collapse_shape %expanded_1725 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2706 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2704 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1727 = tensor.collapse_shape %2706 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2707 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1727 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1724[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1728 = tensor.expand_shape %2707 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1729 = tensor.collapse_shape %expanded_1728 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1730 = tensor.expand_shape %collapsed_1726 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2708 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1730 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1731 = tensor.collapse_shape %2708 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1732 = tensor.expand_shape %collapsed_1729 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2709 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1732 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1733 = tensor.collapse_shape %2709 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2710 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2678 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2711 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1731 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2712 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1733 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2713 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2711 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1734 = tensor.collapse_shape %2710 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1735 = tensor.collapse_shape %2713 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2714 = linalg.batch_matmul ins(%collapsed_1734, %collapsed_1735 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1736 = tensor.expand_shape %2714 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2715 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1736 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2716 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2715, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2717 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2716 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2718:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2717 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1737 = tensor.expand_shape %2718#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2719 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2717, %expanded_1737 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2720 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2719 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2721 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2720 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2722 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2720, %2721 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2723 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2722 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1738 = tensor.collapse_shape %2723 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1739 = tensor.collapse_shape %2712 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2724 = linalg.batch_matmul ins(%collapsed_1738, %collapsed_1739 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1740 = tensor.expand_shape %2724 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2725 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1740 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1741 = tensor.collapse_shape %2725 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2726 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2727 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2726 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2728 = linalg.batch_matmul ins(%collapsed_1741, %2727 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2729 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2653, %2728 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2730 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2729 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2731 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2730 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2732 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2731 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2733 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2732 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2734 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2733 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2735 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2734 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2736 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2730, %2735 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2737 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2736, %__auto.blk.26.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2738 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2737 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2739 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1742 = tensor.collapse_shape %2738 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2740 = linalg.matmul ins(%collapsed_1742, %2739 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2741 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2740 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1743 = tensor.expand_shape %2741 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2742 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1743 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2743 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2742, %expanded_1743 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2744 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2745 = linalg.matmul ins(%collapsed_1742, %2744 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2746 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2745 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1744 = tensor.expand_shape %2746 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2747 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2743, %expanded_1744 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2748 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.26.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1745 = tensor.collapse_shape %2747 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2749 = linalg.matmul ins(%collapsed_1745, %2748 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2750 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2749 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1746 = tensor.expand_shape %2750 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2751 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2729, %expanded_1746 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2752 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2751 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2753 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2752 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2754 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2753 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2755 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2754 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2756 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2755 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2757 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2756 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2758 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2752, %2757 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2759 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2758, %__auto.blk.27.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2760 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2759 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2761 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1747 = tensor.collapse_shape %2760 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2762 = linalg.matmul ins(%collapsed_1747, %2761 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2763 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2762 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2764 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2765 = linalg.matmul ins(%collapsed_1747, %2764 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2766 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2765 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2767 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2768 = linalg.matmul ins(%collapsed_1747, %2767 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2769 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2768 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1748 = tensor.expand_shape %2769 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1749 = tensor.expand_shape %2763 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2770 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1749[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1749[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1750 = tensor.expand_shape %2766 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2771 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1750[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1750[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2772 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2770, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2773 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2772 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1751 = tensor.collapse_shape %2773 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2774 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2771, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2775 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2774 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1752 = tensor.collapse_shape %2775 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2776 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1751 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2777 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1752 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1753 = tensor.extract_slice %2777[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1754 = tensor.collapse_shape %extracted_slice_1753 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2778 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1754 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1755 = tensor.concat dim(1) %expanded_58, %cst_3, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1756 = tensor.expand_shape %2778 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2779 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1755 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2780 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1756, %2779 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2703 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1757 = tensor.extract_slice %expanded_1748[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1758 = tensor.collapse_shape %extracted_slice_1757 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2781 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1758 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1759 = tensor.concat dim(1) %expanded_58, %cst_3, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1760 = tensor.expand_shape %2781 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2782 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1759 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2783 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1760, %2782 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2780 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1761 = tensor.extract_slice %2777[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1762 = tensor.collapse_shape %extracted_slice_1761 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2784 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1762 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1763 = tensor.concat dim(1) %expanded_72, %cst_3, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1764 = tensor.expand_shape %2784 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2785 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1763 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2786 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1764, %2785 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2783 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1765 = tensor.extract_slice %expanded_1748[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1766 = tensor.collapse_shape %extracted_slice_1765 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2787 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1766 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1767 = tensor.concat dim(1) %expanded_72, %cst_3, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1768 = tensor.expand_shape %2787 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2788 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1767 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2789 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1768, %2788 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2786 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1769 = tensor.extract_slice %2777[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1770 = tensor.collapse_shape %extracted_slice_1769 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2790 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1770 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1771 = tensor.concat dim(1) %expanded_87, %cst_3, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1772 = tensor.expand_shape %2790 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2791 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1771 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2792 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1772, %2791 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2789 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1773 = tensor.extract_slice %expanded_1748[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1774 = tensor.collapse_shape %extracted_slice_1773 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2793 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1774 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1775 = tensor.concat dim(1) %expanded_87, %cst_3, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1776 = tensor.expand_shape %2793 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2794 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1775 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2795 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1776, %2794 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2792 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1777 = tensor.extract_slice %2777[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1778 = tensor.collapse_shape %extracted_slice_1777 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2796 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1778 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1779 = tensor.concat dim(1) %expanded_102, %cst_3, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1780 = tensor.expand_shape %2796 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2797 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1779 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2798 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1780, %2797 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2795 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1781 = tensor.extract_slice %expanded_1748[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1782 = tensor.collapse_shape %extracted_slice_1781 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2799 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1782 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1783 = tensor.concat dim(1) %expanded_102, %cst_3, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1784 = tensor.expand_shape %2799 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2800 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1783 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2801 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1784, %2800 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2798 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2802 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c54_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1785 = tensor.collapse_shape %2802 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1786 = tensor.collapse_shape %2801 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2803 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1785 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1786[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1787 = tensor.expand_shape %2803 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1788 = tensor.collapse_shape %expanded_1787 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2804 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2802 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1789 = tensor.collapse_shape %2804 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2805 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1789 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1786[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1790 = tensor.expand_shape %2805 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1791 = tensor.collapse_shape %expanded_1790 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1792 = tensor.expand_shape %collapsed_1788 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2806 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1792 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1793 = tensor.collapse_shape %2806 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1794 = tensor.expand_shape %collapsed_1791 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2807 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1794 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1795 = tensor.collapse_shape %2807 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2808 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2776 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2809 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1793 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2810 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1795 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2811 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2809 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1796 = tensor.collapse_shape %2808 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1797 = tensor.collapse_shape %2811 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2812 = linalg.batch_matmul ins(%collapsed_1796, %collapsed_1797 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1798 = tensor.expand_shape %2812 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2813 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1798 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2814 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2813, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2815 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2814 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2816:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2815 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1799 = tensor.expand_shape %2816#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2817 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2815, %expanded_1799 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2818 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2817 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2819 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2818 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2820 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2818, %2819 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2821 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2820 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1800 = tensor.collapse_shape %2821 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1801 = tensor.collapse_shape %2810 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2822 = linalg.batch_matmul ins(%collapsed_1800, %collapsed_1801 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1802 = tensor.expand_shape %2822 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2823 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1802 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1803 = tensor.collapse_shape %2823 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2824 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2825 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2824 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2826 = linalg.batch_matmul ins(%collapsed_1803, %2825 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2827 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2751, %2826 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2828 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2827 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2829 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2828 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2830 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2829 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2831 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2830 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2832 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2831 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2833 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2832 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2834 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2828, %2833 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2835 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2834, %__auto.blk.27.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2836 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2835 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2837 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1804 = tensor.collapse_shape %2836 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2838 = linalg.matmul ins(%collapsed_1804, %2837 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2839 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2838 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1805 = tensor.expand_shape %2839 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2840 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1805 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2841 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2840, %expanded_1805 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2842 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2843 = linalg.matmul ins(%collapsed_1804, %2842 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2844 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2843 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1806 = tensor.expand_shape %2844 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2845 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2841, %expanded_1806 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2846 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.27.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1807 = tensor.collapse_shape %2845 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2847 = linalg.matmul ins(%collapsed_1807, %2846 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2848 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2847 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1808 = tensor.expand_shape %2848 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2849 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2827, %expanded_1808 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2850 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2849 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2851 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2850 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2852 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2851 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2853 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2852 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2854 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2853 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2855 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2854 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2856 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2850, %2855 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2857 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2856, %__auto.blk.28.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2858 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2857 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2859 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1809 = tensor.collapse_shape %2858 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2860 = linalg.matmul ins(%collapsed_1809, %2859 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2861 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2860 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2862 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2863 = linalg.matmul ins(%collapsed_1809, %2862 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2864 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2863 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2865 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2866 = linalg.matmul ins(%collapsed_1809, %2865 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2867 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2866 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1810 = tensor.expand_shape %2867 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1811 = tensor.expand_shape %2861 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2868 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1811[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1811[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1812 = tensor.expand_shape %2864 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2869 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1812[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1812[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2870 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2868, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2871 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2870 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1813 = tensor.collapse_shape %2871 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2872 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2869, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2873 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2872 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1814 = tensor.collapse_shape %2873 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2874 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1813 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2875 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1814 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1815 = tensor.extract_slice %2875[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1816 = tensor.collapse_shape %extracted_slice_1815 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2876 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1816 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1817 = tensor.concat dim(1) %expanded_58, %cst_2, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1818 = tensor.expand_shape %2876 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2877 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1817 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2878 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1818, %2877 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2801 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1819 = tensor.extract_slice %expanded_1810[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1820 = tensor.collapse_shape %extracted_slice_1819 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2879 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1820 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1821 = tensor.concat dim(1) %expanded_58, %cst_2, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1822 = tensor.expand_shape %2879 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2880 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1821 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2881 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1822, %2880 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2878 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1823 = tensor.extract_slice %2875[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1824 = tensor.collapse_shape %extracted_slice_1823 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2882 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1824 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1825 = tensor.concat dim(1) %expanded_72, %cst_2, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1826 = tensor.expand_shape %2882 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2883 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1825 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2884 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1826, %2883 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2881 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1827 = tensor.extract_slice %expanded_1810[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1828 = tensor.collapse_shape %extracted_slice_1827 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2885 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1828 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1829 = tensor.concat dim(1) %expanded_72, %cst_2, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1830 = tensor.expand_shape %2885 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2886 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1829 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2887 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1830, %2886 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2884 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1831 = tensor.extract_slice %2875[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1832 = tensor.collapse_shape %extracted_slice_1831 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2888 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1832 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1833 = tensor.concat dim(1) %expanded_87, %cst_2, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1834 = tensor.expand_shape %2888 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2889 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1833 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2890 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1834, %2889 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2887 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1835 = tensor.extract_slice %expanded_1810[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1836 = tensor.collapse_shape %extracted_slice_1835 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2891 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1836 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1837 = tensor.concat dim(1) %expanded_87, %cst_2, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1838 = tensor.expand_shape %2891 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2892 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1837 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2893 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1838, %2892 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2890 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1839 = tensor.extract_slice %2875[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1840 = tensor.collapse_shape %extracted_slice_1839 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2894 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1840 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1841 = tensor.concat dim(1) %expanded_102, %cst_2, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1842 = tensor.expand_shape %2894 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2895 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1841 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2896 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1842, %2895 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2893 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1843 = tensor.extract_slice %expanded_1810[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1844 = tensor.collapse_shape %extracted_slice_1843 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2897 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1844 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1845 = tensor.concat dim(1) %expanded_102, %cst_2, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1846 = tensor.expand_shape %2897 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2898 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1845 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2899 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1846, %2898 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2896 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2900 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c56_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1847 = tensor.collapse_shape %2900 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1848 = tensor.collapse_shape %2899 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2901 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1847 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1848[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1849 = tensor.expand_shape %2901 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1850 = tensor.collapse_shape %expanded_1849 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %2902 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2900 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1851 = tensor.collapse_shape %2902 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %2903 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1851 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1848[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1852 = tensor.expand_shape %2903 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1853 = tensor.collapse_shape %expanded_1852 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1854 = tensor.expand_shape %collapsed_1850 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2904 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1854 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1855 = tensor.collapse_shape %2904 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1856 = tensor.expand_shape %collapsed_1853 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %2905 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1856 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1857 = tensor.collapse_shape %2905 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %2906 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2874 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %2907 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1855 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2908 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1857 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %2909 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2907 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1858 = tensor.collapse_shape %2906 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1859 = tensor.collapse_shape %2909 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %2910 = linalg.batch_matmul ins(%collapsed_1858, %collapsed_1859 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1860 = tensor.expand_shape %2910 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %2911 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1860 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %2912 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2911, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %2913 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2912 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2914:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2913 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1861 = tensor.expand_shape %2914#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %2915 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2913, %expanded_1861 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2916 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2915 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2917 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%2916 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %2918 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2916, %2917 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %2919 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2918 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1862 = tensor.collapse_shape %2919 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1863 = tensor.collapse_shape %2908 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %2920 = linalg.batch_matmul ins(%collapsed_1862, %collapsed_1863 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1864 = tensor.expand_shape %2920 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %2921 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1864 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1865 = tensor.collapse_shape %2921 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %2922 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %2923 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2922 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %2924 = linalg.batch_matmul ins(%collapsed_1865, %2923 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %2925 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2849, %2924 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2926 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2925 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2927 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2926 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2928 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2927 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2929 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2928 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2930 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2929 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2931 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2930 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2932 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2926, %2931 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2933 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2932, %__auto.blk.28.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2934 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2933 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2935 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1866 = tensor.collapse_shape %2934 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2936 = linalg.matmul ins(%collapsed_1866, %2935 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2937 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2936 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1867 = tensor.expand_shape %2937 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2938 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1867 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %2939 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2938, %expanded_1867 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2940 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %2941 = linalg.matmul ins(%collapsed_1866, %2940 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %2942 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2941 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1868 = tensor.expand_shape %2942 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %2943 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2939, %expanded_1868 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %2944 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.28.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1869 = tensor.collapse_shape %2943 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %2945 = linalg.matmul ins(%collapsed_1869, %2944 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2946 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2945 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1870 = tensor.expand_shape %2946 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %2947 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2925, %expanded_1870 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2948 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2947 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2949 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2948 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2950 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%2949 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2951 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2950 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2952 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2951 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2953 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2952 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %2954 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2948, %2953 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2955 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2954, %__auto.blk.29.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %2956 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2955 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %2957 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1871 = tensor.collapse_shape %2956 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %2958 = linalg.matmul ins(%collapsed_1871, %2957 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %2959 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2958 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %2960 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2961 = linalg.matmul ins(%collapsed_1871, %2960 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2962 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2961 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %2963 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %2964 = linalg.matmul ins(%collapsed_1871, %2963 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %2965 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2964 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1872 = tensor.expand_shape %2965 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1873 = tensor.expand_shape %2959 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %2966 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1873[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1873[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1874 = tensor.expand_shape %2962 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %2967 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1874[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1874[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %2968 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2966, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %2969 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2968 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1875 = tensor.collapse_shape %2969 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %2970 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2967, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %2971 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%2970 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1876 = tensor.collapse_shape %2971 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %2972 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1875 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %2973 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1876 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1877 = tensor.extract_slice %2973[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1878 = tensor.collapse_shape %extracted_slice_1877 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2974 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1878 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1879 = tensor.concat dim(1) %expanded_58, %cst_1, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1880 = tensor.expand_shape %2974 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2975 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1879 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2976 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1880, %2975 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2899 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1881 = tensor.extract_slice %expanded_1872[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1882 = tensor.collapse_shape %extracted_slice_1881 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2977 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1882 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1883 = tensor.concat dim(1) %expanded_58, %cst_1, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1884 = tensor.expand_shape %2977 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2978 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1883 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2979 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1884, %2978 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2976 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1885 = tensor.extract_slice %2973[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1886 = tensor.collapse_shape %extracted_slice_1885 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2980 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1886 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1887 = tensor.concat dim(1) %expanded_72, %cst_1, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1888 = tensor.expand_shape %2980 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2981 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1887 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2982 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1888, %2981 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2979 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1889 = tensor.extract_slice %expanded_1872[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1890 = tensor.collapse_shape %extracted_slice_1889 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2983 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1890 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1891 = tensor.concat dim(1) %expanded_72, %cst_1, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1892 = tensor.expand_shape %2983 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2984 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1891 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2985 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1892, %2984 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2982 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1893 = tensor.extract_slice %2973[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1894 = tensor.collapse_shape %extracted_slice_1893 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2986 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1894 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1895 = tensor.concat dim(1) %expanded_87, %cst_1, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1896 = tensor.expand_shape %2986 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2987 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1895 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2988 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1896, %2987 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2985 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1897 = tensor.extract_slice %expanded_1872[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1898 = tensor.collapse_shape %extracted_slice_1897 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2989 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1898 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1899 = tensor.concat dim(1) %expanded_87, %cst_1, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1900 = tensor.expand_shape %2989 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2990 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1899 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2991 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1900, %2990 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2988 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1901 = tensor.extract_slice %2973[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1902 = tensor.collapse_shape %extracted_slice_1901 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2992 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1902 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1903 = tensor.concat dim(1) %expanded_102, %cst_1, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1904 = tensor.expand_shape %2992 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2993 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1903 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2994 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1904, %2993 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2991 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1905 = tensor.extract_slice %expanded_1872[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1906 = tensor.collapse_shape %extracted_slice_1905 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %2995 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1906 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1907 = tensor.concat dim(1) %expanded_102, %cst_1, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1908 = tensor.expand_shape %2995 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %2996 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1907 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %2997 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1908, %2996 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2994 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %2998 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c58_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1909 = tensor.collapse_shape %2998 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1910 = tensor.collapse_shape %2997 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %2999 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1909 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1910[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1911 = tensor.expand_shape %2999 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1912 = tensor.collapse_shape %expanded_1911 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %3000 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%2998 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1913 = tensor.collapse_shape %3000 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %3001 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1913 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1910[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1914 = tensor.expand_shape %3001 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1915 = tensor.collapse_shape %expanded_1914 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1916 = tensor.expand_shape %collapsed_1912 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3002 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1916 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1917 = tensor.collapse_shape %3002 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1918 = tensor.expand_shape %collapsed_1915 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3003 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1918 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1919 = tensor.collapse_shape %3003 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %3004 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%2972 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %3005 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1917 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3006 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1919 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3007 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3005 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1920 = tensor.collapse_shape %3004 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1921 = tensor.collapse_shape %3007 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %3008 = linalg.batch_matmul ins(%collapsed_1920, %collapsed_1921 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1922 = tensor.expand_shape %3008 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %3009 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1922 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %3010 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3009, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %3011 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3010 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3012:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3011 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1923 = tensor.expand_shape %3012#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %3013 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3011, %expanded_1923 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3014 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3013 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3015 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3014 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %3016 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3014, %3015 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3017 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3016 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1924 = tensor.collapse_shape %3017 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1925 = tensor.collapse_shape %3006 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %3018 = linalg.batch_matmul ins(%collapsed_1924, %collapsed_1925 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1926 = tensor.expand_shape %3018 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %3019 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1926 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1927 = tensor.collapse_shape %3019 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %3020 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %3021 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3020 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %3022 = linalg.batch_matmul ins(%collapsed_1927, %3021 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %3023 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%2947, %3022 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3024 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3023 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3025 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3024 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3026 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3025 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3027 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3026 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3028 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3027 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3029 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3028 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3030 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3024, %3029 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3031 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3030, %__auto.blk.29.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3032 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3031 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3033 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1928 = tensor.collapse_shape %3032 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3034 = linalg.matmul ins(%collapsed_1928, %3033 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3035 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3034 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1929 = tensor.expand_shape %3035 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3036 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1929 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %3037 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3036, %expanded_1929 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3038 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %3039 = linalg.matmul ins(%collapsed_1928, %3038 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3040 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3039 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1930 = tensor.expand_shape %3040 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3041 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3037, %expanded_1930 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3042 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.29.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1931 = tensor.collapse_shape %3041 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %3043 = linalg.matmul ins(%collapsed_1931, %3042 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %3044 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3043 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1932 = tensor.expand_shape %3044 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %3045 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3023, %expanded_1932 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3046 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3045 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3047 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3046 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3048 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3047 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3049 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3048 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3050 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3049 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3051 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3050 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3052 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3046, %3051 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3053 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3052, %__auto.blk.30.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3054 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3053 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3055 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1933 = tensor.collapse_shape %3054 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3056 = linalg.matmul ins(%collapsed_1933, %3055 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %3057 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3056 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %3058 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %3059 = linalg.matmul ins(%collapsed_1933, %3058 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %3060 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3059 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %3061 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %3062 = linalg.matmul ins(%collapsed_1933, %3061 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %3063 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3062 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1934 = tensor.expand_shape %3063 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1935 = tensor.expand_shape %3057 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %3064 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1935[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1935[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1936 = tensor.expand_shape %3060 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %3065 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1936[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1936[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %3066 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3064, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %3067 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%3066 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1937 = tensor.collapse_shape %3067 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %3068 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3065, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %3069 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%3068 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_1938 = tensor.collapse_shape %3069 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %3070 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1937 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %3071 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1938 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_1939 = tensor.extract_slice %3071[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1940 = tensor.collapse_shape %extracted_slice_1939 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3072 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1940 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1941 = tensor.concat dim(1) %expanded_58, %cst_0, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1942 = tensor.expand_shape %3072 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3073 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1941 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3074 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1942, %3073 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%2997 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1943 = tensor.extract_slice %expanded_1934[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1944 = tensor.collapse_shape %extracted_slice_1943 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3075 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1944 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1945 = tensor.concat dim(1) %expanded_58, %cst_0, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1946 = tensor.expand_shape %3075 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3076 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1945 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3077 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1946, %3076 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3074 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1947 = tensor.extract_slice %3071[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1948 = tensor.collapse_shape %extracted_slice_1947 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3078 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1948 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1949 = tensor.concat dim(1) %expanded_72, %cst_0, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1950 = tensor.expand_shape %3078 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3079 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1949 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3080 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1950, %3079 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3077 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1951 = tensor.extract_slice %expanded_1934[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1952 = tensor.collapse_shape %extracted_slice_1951 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3081 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1952 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1953 = tensor.concat dim(1) %expanded_72, %cst_0, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1954 = tensor.expand_shape %3081 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3082 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1953 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3083 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1954, %3082 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3080 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1955 = tensor.extract_slice %3071[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1956 = tensor.collapse_shape %extracted_slice_1955 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3084 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1956 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1957 = tensor.concat dim(1) %expanded_87, %cst_0, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1958 = tensor.expand_shape %3084 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3085 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1957 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3086 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1958, %3085 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3083 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1959 = tensor.extract_slice %expanded_1934[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1960 = tensor.collapse_shape %extracted_slice_1959 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3087 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1960 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1961 = tensor.concat dim(1) %expanded_87, %cst_0, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1962 = tensor.expand_shape %3087 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3088 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1961 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3089 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1962, %3088 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3086 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1963 = tensor.extract_slice %3071[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1964 = tensor.collapse_shape %extracted_slice_1963 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3090 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1964 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1965 = tensor.concat dim(1) %expanded_102, %cst_0, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1966 = tensor.expand_shape %3090 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3091 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1965 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3092 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1966, %3091 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3089 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_1967 = tensor.extract_slice %expanded_1934[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_1968 = tensor.collapse_shape %extracted_slice_1967 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3093 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_1968 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_1969 = tensor.concat dim(1) %expanded_102, %cst_0, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_1970 = tensor.expand_shape %3093 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3094 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_1969 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3095 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_1970, %3094 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3092 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %3096 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c60_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1971 = tensor.collapse_shape %3096 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_1972 = tensor.collapse_shape %3095 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %3097 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1971 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1972[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1973 = tensor.expand_shape %3097 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1974 = tensor.collapse_shape %expanded_1973 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %3098 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3096 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_1975 = tensor.collapse_shape %3098 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %3099 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1975 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_1972[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_1976 = tensor.expand_shape %3099 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_1977 = tensor.collapse_shape %expanded_1976 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_1978 = tensor.expand_shape %collapsed_1974 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3100 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1978 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1979 = tensor.collapse_shape %3100 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_1980 = tensor.expand_shape %collapsed_1977 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3101 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1980 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_1981 = tensor.collapse_shape %3101 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %3102 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3070 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %3103 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1979 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3104 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1981 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3105 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3103 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_1982 = tensor.collapse_shape %3102 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_1983 = tensor.collapse_shape %3105 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %3106 = linalg.batch_matmul ins(%collapsed_1982, %collapsed_1983 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_1984 = tensor.expand_shape %3106 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %3107 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1984 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %3108 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3107, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %3109 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3108 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3110:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3109 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_1985 = tensor.expand_shape %3110#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %3111 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3109, %expanded_1985 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3112 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3111 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3113 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3112 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %3114 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3112, %3113 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3115 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3114 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_1986 = tensor.collapse_shape %3115 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_1987 = tensor.collapse_shape %3104 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %3116 = linalg.batch_matmul ins(%collapsed_1986, %collapsed_1987 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_1988 = tensor.expand_shape %3116 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %3117 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_1988 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_1989 = tensor.collapse_shape %3117 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %3118 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %3119 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3118 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %3120 = linalg.batch_matmul ins(%collapsed_1989, %3119 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %3121 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3045, %3120 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3122 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3121 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3123 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3122 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3124 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3123 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3125 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3124 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3126 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3125 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3127 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3126 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3128 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3122, %3127 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3129 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3128, %__auto.blk.30.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3130 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3129 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3131 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_1990 = tensor.collapse_shape %3130 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3132 = linalg.matmul ins(%collapsed_1990, %3131 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3133 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3132 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1991 = tensor.expand_shape %3133 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3134 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_1991 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %3135 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3134, %expanded_1991 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3136 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %3137 = linalg.matmul ins(%collapsed_1990, %3136 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3138 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3137 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_1992 = tensor.expand_shape %3138 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3139 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3135, %expanded_1992 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3140 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.30.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_1993 = tensor.collapse_shape %3139 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %3141 = linalg.matmul ins(%collapsed_1993, %3140 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %3142 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3141 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_1994 = tensor.expand_shape %3142 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %3143 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3121, %expanded_1994 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3144 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3143 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3145 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3144 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3146 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3145 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3147 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3146 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3148 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3147 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3149 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3148 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3150 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3144, %3149 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3151 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3150, %__auto.blk.31.attn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3152 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3151 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3153 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_q.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %collapsed_1995 = tensor.collapse_shape %3152 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3154 = linalg.matmul ins(%collapsed_1995, %3153 : tensor<4x4096xf16>, tensor<4096x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %3155 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3154 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %3156 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_k.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %3157 = linalg.matmul ins(%collapsed_1995, %3156 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %3158 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3157 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %3159 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_v.weight : tensor<1024x4096xf16>) outs(%49 : tensor<4096x1024xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x1024xf16>
    %3160 = linalg.matmul ins(%collapsed_1995, %3159 : tensor<4x4096xf16>, tensor<4096x1024xf16>) outs(%52 : tensor<4x1024xf32>) -> tensor<4x1024xf32>
    %3161 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3160 : tensor<4x1024xf32>) outs(%54 : tensor<4x1024xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1024xf16>
    %expanded_1996 = tensor.expand_shape %3161 [[0], [1, 2, 3]] output_shape [4, 1, 8, 128] : tensor<4x1024xf16> into tensor<4x1x8x128xf16>
    %expanded_1997 = tensor.expand_shape %3155 [[0], [1, 2, 3, 4]] output_shape [4, 1, 32, 64, 2] : tensor<4x4096xf16> into tensor<4x1x32x64x2xf16>
    %3162 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%59 : tensor<4x1x32x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1997[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x32x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1997[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x32x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x32x64xcomplex<f16>>
    %expanded_1998 = tensor.expand_shape %3158 [[0], [1, 2, 3, 4]] output_shape [4, 1, 8, 64, 2] : tensor<4x1024xf16> into tensor<4x1x8x64x2xf16>
    %3163 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} outs(%61 : tensor<4x1x8x64xcomplex<f16>>) {
    ^bb0(%out: complex<f16>):
      %3261 = linalg.index 0 : index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %expanded_1998[%3261, %3262, %3263, %3264, %c0] : tensor<4x1x8x64x2xf16>
      %extracted_2061 = tensor.extract %expanded_1998[%3261, %3262, %3263, %3264, %c1] : tensor<4x1x8x64x2xf16>
      %3265 = complex.create %extracted, %extracted_2061 : complex<f16>
      linalg.yield %3265 : complex<f16>
    } -> tensor<4x1x8x64xcomplex<f16>>
    %3164 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3162, %expanded_44 : tensor<4x1x32x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%63 : tensor<4x1x32x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x32x64xcomplex<f32>>
    %3165 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%3164 : tensor<4x1x32x64xcomplex<f32>>) outs(%65 : tensor<4x1x32x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x32x64x2xf32>
    %collapsed_1999 = tensor.collapse_shape %3165 [[0], [1], [2], [3, 4]] : tensor<4x1x32x64x2xf32> into tensor<4x1x32x128xf32>
    %3166 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3163, %expanded_44 : tensor<4x1x8x64xcomplex<f16>>, tensor<4x1x1x64xcomplex<f32>>) outs(%67 : tensor<4x1x8x64xcomplex<f32>>) {
    ^bb0(%in: complex<f16>, %in_2061: complex<f32>, %out: complex<f32>):
      %3261 = complex.re %in : complex<f16>
      %3262 = complex.im %in : complex<f16>
      %3263 = arith.extf %3261 : f16 to f32
      %3264 = arith.extf %3262 : f16 to f32
      %3265 = complex.create %3263, %3264 : complex<f32>
      %3266 = complex.mul %3265, %in_2061 : complex<f32>
      linalg.yield %3266 : complex<f32>
    } -> tensor<4x1x8x64xcomplex<f32>>
    %3167 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%3166 : tensor<4x1x8x64xcomplex<f32>>) outs(%69 : tensor<4x1x8x64x2xf32>) {
    ^bb0(%in: complex<f32>, %out: f32):
      %3261 = complex.re %in : complex<f32>
      %3262 = complex.im %in : complex<f32>
      %3263 = linalg.index 4 : index
      %3264 = arith.cmpi eq, %3263, %c0 : index
      %3265 = arith.select %3264, %3261, %3262 : f32
      linalg.yield %3265 : f32
    } -> tensor<4x1x8x64x2xf32>
    %collapsed_2000 = tensor.collapse_shape %3167 [[0], [1], [2], [3, 4]] : tensor<4x1x8x64x2xf32> into tensor<4x1x8x128xf32>
    %3168 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_1999 : tensor<4x1x32x128xf32>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x32x128xf16>
    %3169 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, 0, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_2000 : tensor<4x1x8x128xf32>) outs(%73 : tensor<4x1x8x128xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x8x128xf16>
    %extracted_slice_2001 = tensor.extract_slice %3169[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2002 = tensor.collapse_shape %extracted_slice_2001 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3170 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2002 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2003 = tensor.concat dim(1) %expanded_58, %cst, %cst_30, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2004 = tensor.expand_shape %3170 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3171 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2003 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3172 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2004, %3171 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3095 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2005 = tensor.extract_slice %expanded_1996[0, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2006 = tensor.collapse_shape %extracted_slice_2005 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3173 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2006 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2007 = tensor.concat dim(1) %expanded_58, %cst, %cst_29, %expanded_59 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2008 = tensor.expand_shape %3173 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3174 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2007 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3175 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2008, %3174 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3172 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2009 = tensor.extract_slice %3169[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2010 = tensor.collapse_shape %extracted_slice_2009 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3176 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2010 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2011 = tensor.concat dim(1) %expanded_72, %cst, %cst_30, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2012 = tensor.expand_shape %3176 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3177 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2011 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3178 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2012, %3177 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3175 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2013 = tensor.extract_slice %expanded_1996[1, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2014 = tensor.collapse_shape %extracted_slice_2013 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3179 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2014 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2015 = tensor.concat dim(1) %expanded_72, %cst, %cst_29, %expanded_73 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2016 = tensor.expand_shape %3179 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3180 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2015 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3181 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2016, %3180 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3178 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2017 = tensor.extract_slice %3169[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2018 = tensor.collapse_shape %extracted_slice_2017 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3182 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2018 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2019 = tensor.concat dim(1) %expanded_87, %cst, %cst_30, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2020 = tensor.expand_shape %3182 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3183 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2019 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3184 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2020, %3183 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3181 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2021 = tensor.extract_slice %expanded_1996[2, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2022 = tensor.collapse_shape %extracted_slice_2021 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3185 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2022 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2023 = tensor.concat dim(1) %expanded_87, %cst, %cst_29, %expanded_88 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2024 = tensor.expand_shape %3185 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3186 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2023 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3187 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2024, %3186 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3184 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2025 = tensor.extract_slice %3169[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2026 = tensor.collapse_shape %extracted_slice_2025 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3188 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2026 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2027 = tensor.concat dim(1) %expanded_102, %cst, %cst_30, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2028 = tensor.expand_shape %3188 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3189 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2027 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3190 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2028, %3189 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3187 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %extracted_slice_2029 = tensor.extract_slice %expanded_1996[3, 0, 0, 0] [1, 1, 8, 128] [1, 1, 1, 1] : tensor<4x1x8x128xf16> to tensor<1x1x8x128xf16>
    %collapsed_2030 = tensor.collapse_shape %extracted_slice_2029 [[0, 1, 2], [3]] : tensor<1x1x8x128xf16> into tensor<8x128xf16>
    %3191 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%collapsed_2030 : tensor<8x128xf16>) outs(%81 : tensor<1x8x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<1x8x128xf16>
    %concat_2031 = tensor.concat dim(1) %expanded_102, %cst, %cst_29, %expanded_103 : (tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>, tensor<1x1xi64>) -> tensor<1x4xi64>
    %expanded_2032 = tensor.expand_shape %3191 [[0], [1, 2, 3, 4, 5], [6]] output_shape [1, 1, 1, 1, 1, 8, 128] : tensor<1x8x128xf16> into tensor<1x1x1x1x1x8x128xf16>
    %3192 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%concat_2031 : tensor<1x4xi64>) outs(%83 : tensor<1x4xi32>) {
    ^bb0(%in: i64, %out: i32):
      %3261 = arith.trunci %in : i64 to i32
      linalg.yield %3261 : i32
    } -> tensor<1x4xi32>
    %3193 = iree_linalg_ext.scatter dimension_map = [0, 1, 2, 3] unique_indices(false) ins(%expanded_2032, %3192 : tensor<1x1x1x1x1x8x128xf16>, tensor<1x4xi32>) outs(%3190 : tensor<?x32x2x16x8x128xf16>) {
    ^bb0(%arg7: f16, %arg8: f16):
      iree_linalg_ext.yield %arg7 : f16
    } -> tensor<?x32x2x16x8x128xf16>
    %collapsed_2033 = tensor.collapse_shape %3193 [[0], [1, 2, 3, 4, 5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x1048576xf16>
    %3194 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%126 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c62_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_2034 = tensor.collapse_shape %3194 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %collapsed_2035 = tensor.collapse_shape %3193 [[0, 1, 2], [3], [4], [5]] : tensor<?x32x2x16x8x128xf16> into tensor<?x16x8x128xf16>
    %3195 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_2034 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_2035[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_2036 = tensor.expand_shape %3195 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_2037 = tensor.collapse_shape %expanded_2036 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %3196 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3194 : tensor<4x?xi64>) outs(%125 : tensor<4x?xi64>) {
    ^bb0(%in: i64, %out: i64):
      %3261 = arith.addi %in, %c1_i64 : i64
      linalg.yield %3261 : i64
    } -> tensor<4x?xi64>
    %collapsed_2038 = tensor.collapse_shape %3196 [[0, 1]] : tensor<4x?xi64> into tensor<?xi64>
    %3197 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_2038 : tensor<?xi64>) outs(%128 : tensor<?x16x8x128xf16>) {
    ^bb0(%in: i64, %out: f16):
      %3261 = arith.index_cast %in : i64 to index
      %3262 = linalg.index 1 : index
      %3263 = linalg.index 2 : index
      %3264 = linalg.index 3 : index
      %extracted = tensor.extract %collapsed_2035[%3261, %3262, %3263, %3264] : tensor<?x16x8x128xf16>
      linalg.yield %extracted : f16
    } -> tensor<?x16x8x128xf16>
    %expanded_2039 = tensor.expand_shape %3197 [[0, 1], [2], [3], [4]] output_shape [4, %130, 16, 8, 128] : tensor<?x16x8x128xf16> into tensor<4x?x16x8x128xf16>
    %collapsed_2040 = tensor.collapse_shape %expanded_2039 [[0], [1, 2], [3], [4]] : tensor<4x?x16x8x128xf16> into tensor<4x?x8x128xf16>
    %expanded_2041 = tensor.expand_shape %collapsed_2037 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3198 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2041 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_2042 = tensor.collapse_shape %3198 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %expanded_2043 = tensor.expand_shape %collapsed_2040 [[0], [1], [2], [3, 4]] output_shape [4, %135, 8, 1, 128] : tensor<4x?x8x128xf16> into tensor<4x?x8x1x128xf16>
    %3199 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, 0, d4)>, affine_map<(d0, d1, d2, d3, d4) -> (d0, d1, d2, d3, d4)>], iterator_types = ["parallel", "parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2043 : tensor<4x?x8x1x128xf16>) outs(%136 : tensor<4x?x8x4x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x?x8x4x128xf16>
    %collapsed_2044 = tensor.collapse_shape %3199 [[0], [1], [2, 3], [4]] : tensor<4x?x8x4x128xf16> into tensor<4x?x32x128xf16>
    %3200 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3168 : tensor<4x1x32x128xf16>) outs(%139 : tensor<4x32x1x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x1x128xf16>
    %3201 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_2042 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3202 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%collapsed_2044 : tensor<4x?x32x128xf16>) outs(%141 : tensor<4x32x?x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x?x128xf16>
    %3203 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d3, d2)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3201 : tensor<4x32x?x128xf16>) outs(%144 : tensor<4x32x128x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x32x128x?xf16>
    %collapsed_2045 = tensor.collapse_shape %3200 [[0, 1], [2], [3]] : tensor<4x32x1x128xf16> into tensor<128x1x128xf16>
    %collapsed_2046 = tensor.collapse_shape %3203 [[0, 1], [2], [3]] : tensor<4x32x128x?xf16> into tensor<128x128x?xf16>
    %3204 = linalg.batch_matmul ins(%collapsed_2045, %collapsed_2046 : tensor<128x1x128xf16>, tensor<128x128x?xf16>) outs(%147 : tensor<128x1x?xf16>) -> tensor<128x1x?xf16>
    %expanded_2047 = tensor.expand_shape %3204 [[0, 1], [2], [3]] output_shape [4, 32, 1, %132] : tensor<128x1x?xf16> into tensor<4x32x1x?xf16>
    %3205 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2047 : tensor<4x32x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.truncf %cst_37 : f32 to f16
      %3262 = arith.divf %in, %3261 : f16
      linalg.yield %3262 : f16
    } -> tensor<4x32x1x?xf16>
    %3206 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, 0, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3205, %expanded_124 : tensor<4x32x1x?xf16>, tensor<4x1x1x?xf16>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %3207 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3206 : tensor<4x32x1x?xf16>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3208:2 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3207 : tensor<4x32x1x?xf32>) outs(%157, %155 : tensor<4x32x1xf32>, tensor<4x32x1xi64>) {
    ^bb0(%in: f32, %out: f32, %out_2061: i64):
      %3261 = linalg.index 3 : index
      %3262 = arith.index_cast %3261 : index to i64
      %3263 = arith.maximumf %in, %out : f32
      %3264 = arith.cmpf ogt, %in, %out : f32
      %3265 = arith.select %3264, %3262, %out_2061 : i64
      linalg.yield %3263, %3265 : f32, i64
    } -> (tensor<4x32x1xf32>, tensor<4x32x1xi64>)
    %expanded_2048 = tensor.expand_shape %3208#0 [[0], [1], [2, 3]] output_shape [4, 32, 1, 1] : tensor<4x32x1xf32> into tensor<4x32x1x1xf32>
    %3209 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3207, %expanded_2048 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.subf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3210 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3209 : tensor<4x32x1x?xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.exp %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3211 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, 0)>], iterator_types = ["parallel", "parallel", "parallel", "reduction"]} ins(%3210 : tensor<4x32x1x?xf32>) outs(%162 : tensor<4x32x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x1xf32>
    %3212 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, 0)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3210, %3211 : tensor<4x32x1x?xf32>, tensor<4x32x1x1xf32>) outs(%152 : tensor<4x32x1x?xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.divf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x32x1x?xf32>
    %3213 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, 0, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%3212 : tensor<4x32x1x?xf32>) outs(%149 : tensor<4x32x1x?xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x32x1x?xf16>
    %collapsed_2049 = tensor.collapse_shape %3213 [[0, 1], [2], [3]] : tensor<4x32x1x?xf16> into tensor<128x1x?xf16>
    %collapsed_2050 = tensor.collapse_shape %3202 [[0, 1], [2], [3]] : tensor<4x32x?x128xf16> into tensor<128x?x128xf16>
    %3214 = linalg.batch_matmul ins(%collapsed_2049, %collapsed_2050 : tensor<128x1x?xf16>, tensor<128x?x128xf16>) outs(%167 : tensor<128x1x128xf16>) -> tensor<128x1x128xf16>
    %expanded_2051 = tensor.expand_shape %3214 [[0, 1], [2], [3]] output_shape [4, 32, 1, 128] : tensor<128x1x128xf16> into tensor<4x32x1x128xf16>
    %3215 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>, affine_map<(d0, d1, d2, d3) -> (d0, d2, d1, d3)>], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%expanded_2051 : tensor<4x32x1x128xf16>) outs(%71 : tensor<4x1x32x128xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x1x32x128xf16>
    %collapsed_2052 = tensor.collapse_shape %3215 [[0], [1], [2, 3]] : tensor<4x1x32x128xf16> into tensor<4x1x4096xf16>
    %3216 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.attn_output.weight : tensor<4096x4096xf16>) outs(%42 : tensor<4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x4096xf16>
    %3217 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3216 : tensor<4096x4096xf16>) outs(%171 : tensor<4x4096x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4x4096x4096xf16>
    %3218 = linalg.batch_matmul ins(%collapsed_2052, %3217 : tensor<4x1x4096xf16>, tensor<4x4096x4096xf16>) outs(%173 : tensor<4x1x4096xf16>) -> tensor<4x1x4096xf16>
    %3219 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3143, %3218 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3220 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3219 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3221 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3220 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3222 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3221 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3223 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3222 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3224 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3223 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3225 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3224 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3226 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3220, %3225 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3227 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3226, %__auto.blk.31.ffn_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3228 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3227 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3229 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_gate.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %collapsed_2053 = tensor.collapse_shape %3228 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3230 = linalg.matmul ins(%collapsed_2053, %3229 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3231 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3230 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_2054 = tensor.expand_shape %3231 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3232 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%expanded_2054 : tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      %3261 = arith.negf %in : f16
      %3262 = math.exp %3261 : f16
      %3263 = arith.addf %3262, %cst_36 : f16
      %3264 = arith.divf %cst_36, %3263 : f16
      linalg.yield %3264 : f16
    } -> tensor<4x1x14336xf16>
    %3233 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3232, %expanded_2054 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3234 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_up.weight : tensor<14336x4096xf16>) outs(%185 : tensor<4096x14336xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x14336xf16>
    %3235 = linalg.matmul ins(%collapsed_2053, %3234 : tensor<4x4096xf16>, tensor<4096x14336xf16>) outs(%188 : tensor<4x14336xf32>) -> tensor<4x14336xf32>
    %3236 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3235 : tensor<4x14336xf32>) outs(%190 : tensor<4x14336xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x14336xf16>
    %expanded_2055 = tensor.expand_shape %3236 [[0], [1, 2]] output_shape [4, 1, 14336] : tensor<4x14336xf16> into tensor<4x1x14336xf16>
    %3237 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3233, %expanded_2055 : tensor<4x1x14336xf16>, tensor<4x1x14336xf16>) outs(%192 : tensor<4x1x14336xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.mulf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x14336xf16>
    %3238 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.blk.31.ffn_down.weight : tensor<4096x14336xf16>) outs(%199 : tensor<14336x4096xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<14336x4096xf16>
    %collapsed_2056 = tensor.collapse_shape %3237 [[0], [1, 2]] : tensor<4x1x14336xf16> into tensor<4x14336xf16>
    %3239 = linalg.matmul ins(%collapsed_2056, %3238 : tensor<4x14336xf16>, tensor<14336x4096xf16>) outs(%45 : tensor<4x4096xf32>) -> tensor<4x4096xf32>
    %3240 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3239 : tensor<4x4096xf32>) outs(%47 : tensor<4x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x4096xf16>
    %expanded_2057 = tensor.expand_shape %3240 [[0], [1, 2]] output_shape [4, 1, 4096] : tensor<4x4096xf16> into tensor<4x1x4096xf16>
    %3241 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3219, %expanded_2057 : tensor<4x1x4096xf16>, tensor<4x1x4096xf16>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f16, %in_2061: f16, %out: f16):
      %3261 = arith.addf %in, %in_2061 : f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3242 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3241 : tensor<4x1x4096xf16>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f16, %out: f32):
      %3261 = arith.extf %in : f16 to f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3243 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3242 : tensor<4x1x4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.powf %in, %cst_38 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3244 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, d1, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, 0)>], iterator_types = ["parallel", "parallel", "reduction"]} ins(%3243 : tensor<4x1x4096xf32>) outs(%34 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %out : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3245 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3244 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.divf %in, %cst_39 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3246 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3245 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = arith.addf %in, %cst_40 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3247 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3246 : tensor<4x1x1xf32>) outs(%33 : tensor<4x1x1xf32>) {
    ^bb0(%in: f32, %out: f32):
      %3261 = math.rsqrt %in : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x1xf32>
    %3248 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, 0, 0)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3242, %3247 : tensor<4x1x4096xf32>, tensor<4x1x1xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3249 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3248, %__auto.output_norm.weight : tensor<4x1x4096xf32>, tensor<4096xf32>) outs(%30 : tensor<4x1x4096xf32>) {
    ^bb0(%in: f32, %in_2061: f32, %out: f32):
      %3261 = arith.mulf %in, %in_2061 : f32
      linalg.yield %3261 : f32
    } -> tensor<4x1x4096xf32>
    %3250 = linalg.generic {indexing_maps = [affine_map<(d0, d1, d2) -> (d0, 0, d2)>, affine_map<(d0, d1, d2) -> (d0, d1, d2)>], iterator_types = ["parallel", "parallel", "parallel"]} ins(%3249 : tensor<4x1x4096xf32>) outs(%28 : tensor<4x1x4096xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x1x4096xf16>
    %3251 = tensor.empty() : tensor<4096x128256xf16>
    %3252 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d1, d0)>], iterator_types = ["parallel", "parallel"]} ins(%__auto.output.weight : tensor<128256x4096xf16>) outs(%3251 : tensor<4096x128256xf16>) {
    ^bb0(%in: f16, %out: f16):
      linalg.yield %in : f16
    } -> tensor<4096x128256xf16>
    %collapsed_2058 = tensor.collapse_shape %3250 [[0], [1, 2]] : tensor<4x1x4096xf16> into tensor<4x4096xf16>
    %3253 = tensor.empty() : tensor<4x128256xf32>
    %3254 = linalg.fill ins(%cst_33 : f32) outs(%3253 : tensor<4x128256xf32>) -> tensor<4x128256xf32>
    %3255 = linalg.matmul ins(%collapsed_2058, %3252 : tensor<4x4096xf16>, tensor<4096x128256xf16>) outs(%3254 : tensor<4x128256xf32>) -> tensor<4x128256xf32>
    %3256 = tensor.empty() : tensor<4x128256xf16>
    %3257 = linalg.generic {indexing_maps = [affine_map<(d0, d1) -> (d0, d1)>, affine_map<(d0, d1) -> (d0, d1)>], iterator_types = ["parallel", "parallel"]} ins(%3255 : tensor<4x128256xf32>) outs(%3256 : tensor<4x128256xf16>) {
    ^bb0(%in: f32, %out: f16):
      %3261 = arith.truncf %in : f32 to f16
      linalg.yield %3261 : f16
    } -> tensor<4x128256xf16>
    %expanded_2059 = tensor.expand_shape %3257 [[0], [1, 2]] output_shape [4, 1, 128256] : tensor<4x128256xf16> into tensor<4x1x128256xf16>
    %dim_2060 = tensor.dim %3193, %c0 : tensor<?x32x2x16x8x128xf16>
    %3258 = hal.tensor.alias wait(%arg5) => %collapsed_2033 : tensor<?x1048576xf16>{%dim_2060} to %arg4 : !hal.buffer_view
    %3259:2 = hal.tensor.barrier join(%3258, %expanded_2059 : tensor<?x1048576xf16>, tensor<4x1x128256xf16>) => %arg6 : !hal.fence
    %3260 = hal.tensor.export %3259#1 : tensor<4x1x128256xf16> -> !hal.buffer_view
    util.return %3260 : !hal.buffer_view
  }
  util.func public @decode_bs4(%arg0: !hal.buffer_view, %arg1: !hal.buffer_view, %arg2: !hal.buffer_view, %arg3: !hal.buffer_view, %arg4: !hal.buffer_view) -> !hal.buffer_view attributes {iree.abi.stub} {
    %0 = util.null : !hal.fence
    %c-1_i32 = arith.constant -1 : i32
    %c0 = arith.constant 0 : index
    %device_0 = hal.devices.get %c0 : !hal.device
    %fence = hal.fence.create device(%device_0 : !hal.device) flags("None") : !hal.fence
    %1 = util.call @decode_bs4$async(%arg0, %arg1, %arg2, %arg3, %arg4, %0, %fence) : (!hal.buffer_view, !hal.buffer_view, !hal.buffer_view, !hal.buffer_view, !hal.buffer_view, !hal.fence, !hal.fence) -> !hal.buffer_view
    %status = hal.fence.await until([%fence]) timeout_millis(%c-1_i32) : i32
    util.return %1 : !hal.buffer_view
  }
}